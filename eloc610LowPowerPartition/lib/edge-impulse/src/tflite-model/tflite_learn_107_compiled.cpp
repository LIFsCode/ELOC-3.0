/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.10.2023 11:28:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 20832;
#else
constexpr int kTensorArenaSize = 19808;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[19];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,7998 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 62, 129, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 62, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 31, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 31, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 16, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 16, 1, 32, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data7[4] = { 1, 1, 8, 32, };
const TfArray<1, int> tensor_dimension7 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 8, 1, 64, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[2] = { -1, 256, };
const TfArray<1, int> tensor_dimension9 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data10[2] = { -681, 681, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const TfArray<1, float> quant10_scale = { 1, { 3.3790140150813386e-05, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[2*256] = { 
  -22, -73, 52, -77, 34, -34, -89, -55, -68, -79, 61, 2, 49, -22, -14, -3, 46, -45, -2, 31, 34, 37, -9, -32, -52, -70, 67, 59, 30, -72, 37, -92, -69, -46, -87, 49, -72, 48, 0, 46, 41, 55, 18, 64, -12, 12, -87, 58, -65, 45, -53, -54, 62, 15, 25, 16, -38, -62, -59, 22, 17, 35, -55, 44, -42, 6, -78, -51, -4, -2, 42, -23, -42, -49, 57, 0, -57, 63, -127, -27, -71, 55, -44, 44, 1, -35, -31, -3, -53, -69, 82, -76, -11, -23, 71, -16, -5, 16, -86, -89, -30, -58, -76, -92, -103, -21, -93, -10, 18, 55, 19, -41, -5, -17, 76, -79, 69, 47, 79, 72, 40, 22, -89, -65, 66, 75, -59, -15, -62, -1, 38, -5, -40, -34, 14, -42, -9, 68, -16, 68, 8, 55, -91, 30, -12, 68, 36, 2, 34, 17, 71, -1, 11, 54, 33, -35, -33, -24, -15, -102, -54, -71, 72, -63, -103, -81, 82, 4, 43, 44, -87, 46, -48, -76, -16, -97, 50, 10, 56, -21, -10, -43, 43, 63, 89, -31, -69, 46, -2, -68, -9, 8, -44, -59, -68, 90, 77, -16, 80, 32, 19, 59, 77, 22, -11, -19, -103, 62, 60, 17, 106, 14, 18, 10, -41, -46, 93, 89, 71, 83, 90, 77, 24, 12, 21, -49, 24, -66, -23, -25, 77, -49, -77, 67, -94, 51, -54, 16, -40, -88, 26, 43, 45, 3, 45, -4, -35, 31, 62, -43, 7, 4, 8, -43, 4, 76, 
  -68, -13, 46, -20, -35, 39, 55, 26, -8, -54, 7, 54, -64, 51, -32, 90, -22, -44, -44, -45, 49, -28, 66, -21, -31, -33, -47, 30, 61, 37, 10, -9, 5, -70, -55, -66, 56, 3, 18, 41, -39, 6, 67, 65, 85, -74, -26, -29, 2, -57, 26, 81, 47, 61, 84, 9, 20, 85, 69, 19, 35, -46, 81, 74, -40, -18, 34, -20, 51, 66, -79, 34, -54, 16, 3, 56, -25, -64, -22, 90, 12, -81, -48, 61, -38, 25, -78, -72, 48, -3, -32, -66, 17, -19, 7, 39, 5, 79, -53, 22, -6, -40, 7, -19, 9, 78, 9, -32, 63, -70, -11, -53, 59, -36, -37, -29, -49, -25, -23, 73, 64, 52, -32, 28, -11, -77, -43, 9, 25, 3, -26, 68, 68, -79, 86, -55, 61, 2, 48, -37, -70, -9, 90, 17, 85, -46, -60, 7, -48, -4, -11, -18, 103, 60, 34, -36, 48, -23, -63, 80, 69, 105, 1, 38, 55, 73, -72, 76, -34, -43, -23, -53, 16, -8, 24, 54, 50, -65, -26, 61, 31, -18, -13, 3, -85, -6, -87, -13, -60, 77, -1, 49, -41, -61, -22, 0, -3, -52, -26, -56, -76, 34, -98, 40, 42, -87, 77, -49, -61, -56, 14, -86, -93, -37, 74, 28, -42, -79, 13, -101, -78, -71, -75, 95, 12, 70, -53, 43, 52, -41, 7, 73, 70, 51, 94, -95, 45, 71, 45, -17, -64, -30, 39, 51, 30, -3, -100, 30, -19, 28, -23, 17, 27, -30, 98, 14, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 2,256 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0018410080811008811, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[64] = { -560, 330, 310, 340, -243, 391, 394, 230, -111, 281, -475, -14, -547, -81, 437, 173, -439, -261, -326, -483, -557, -74, -284, -588, -192, -156, -137, -386, 137, -187, -253, 812, 396, 612, -335, 339, 794, 651, -451, 658, -433, -632, 590, -377, 581, -408, 601, 666, 0, -408, -159, 576, -408, -7, -291, -270, -304, 709, 475, 57, -441, -237, 458, -67, };
const TfArray<1, int> tensor_dimension12 = { 1, { 64 } };
const TfArray<64, float> quant12_scale = { 64, { 3.3294130844296888e-05, 3.5947126889368519e-05, 3.5353576095076278e-05, 4.296598126529716e-05, 3.7424037145683542e-05, 3.4343673178227618e-05, 4.7094279580051079e-05, 3.8330821553245187e-05, 3.2195432140724733e-05, 3.3472104405518621e-05, 4.2081464926013723e-05, 4.011569035355933e-05, 3.8159585528774187e-05, 4.3963747884845361e-05, 4.4892909500049427e-05, 3.5378059692448005e-05, 3.4406664781272411e-05, 3.4219992812722921e-05, 3.7951791455270723e-05, 3.6559857107931748e-05, 3.6599994928110391e-05, 4.0378130506724119e-05, 3.0578317819163203e-05, 3.62111532012932e-05, 3.831649519270286e-05, 3.6653342249337584e-05, 3.2232943340204656e-05, 3.7180183426244184e-05, 3.5958964872406796e-05, 3.8973972550593317e-05, 3.7339974369388074e-05, 3.5762070183409378e-05, 4.0668874135008082e-05, 4.5817971113137901e-05, 3.9897331589600071e-05, 4.4335269194561988e-05, 3.3039170375559479e-05, 3.7303907447494566e-05, 3.5138586099492386e-05, 4.6028726501390338e-05, 3.487061258056201e-05, 3.3426236768718809e-05, 4.6034441766096279e-05, 3.5223281884100288e-05, 4.124080078327097e-05, 3.4530716220615432e-05, 3.8645248423563316e-05, 4.421643097884953e-05, 3.1009691156214103e-05, 3.2179297704715282e-05, 3.6247220123186707e-05, 3.7506222724914551e-05, 3.3305390388704836e-05, 3.5338129237061366e-05, 4.1211991629097611e-05, 3.1031810067361221e-05, 3.8251957448665053e-05, 3.2230225770035759e-05, 3.5932473110733554e-05, 3.7359764974098653e-05, 3.7568319385172799e-05, 3.5043904063059017e-05, 4.1918279748642817e-05, 3.5986453440273181e-05, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[64*1*3*32] = { 
  /* [0][0][][] */ -52,-75,81,117,51,37,45,-37,-69,-44,58,45,-48,-79,-114,-2,31,-2,-97,85,-46,-126,19,-116,108,-34,-38,78,11,93,-20,89, 101,44,-75,-19,-32,91,-1,-113,-33,-98,75,-127,-67,-73,-21,116,-2,102,80,18,59,48,9,-12,90,35,26,-92,-126,-51,-35,47, 112,-102,-90,-120,-27,63,-118,5,-88,88,87,90,26,-93,-5,1,38,-42,56,-79,57,15,-104,67,63,-8,84,66,-63,-25,44,48, 
  /* [1][0][][] */ -84,-94,1,11,83,-75,-112,-64,-109,-72,-10,-43,127,11,7,-74,-59,-79,-20,32,-85,69,85,-16,10,74,-54,38,11,54,5,38, 62,-92,88,-39,-8,99,62,-43,37,-1,12,-72,11,-40,60,58,-77,1,-49,26,-14,-60,-29,82,66,-81,13,-87,-41,-32,-61,94, -72,94,-77,-49,-41,97,87,67,85,-16,-34,89,40,-81,-46,-62,120,-65,61,83,-5,51,-97,15,90,-49,18,103,-26,97,91,-58, 
  /* [2][0][][] */ -34,71,12,-43,-29,-61,-34,71,-45,110,-111,51,92,-15,74,27,-4,-39,-100,-41,23,45,-38,-74,-5,68,64,-17,53,92,52,-32, 12,-64,-95,-80,37,14,-40,-33,-83,101,19,24,-42,-21,-49,-77,35,-27,-89,-79,-8,-80,-64,-33,104,-23,-3,48,-43,9,-4,7, 91,-30,-44,20,60,-48,36,-12,-53,-79,-127,41,114,-10,78,-49,-91,2,-68,-53,42,29,86,59,57,81,-64,-63,83,-105,33,-105, 
  /* [3][0][][] */ -87,33,59,-65,-10,-62,15,-2,-77,27,-16,-30,-73,-1,76,-9,-46,8,-47,70,8,-66,38,8,-53,-14,55,-21,-10,53,34,-58, -91,-54,87,-55,38,-41,-46,-31,-31,97,33,-81,-6,1,-18,-108,55,-18,88,-61,-77,89,-33,62,-74,7,67,49,35,0,71,-56, 107,96,111,127,74,-81,9,60,4,-7,9,37,65,-78,53,107,20,59,-70,69,-19,56,101,-25,100,35,100,-55,-61,-50,-14,52, 
  /* [4][0][][] */ -61,45,31,36,-50,-83,-101,99,41,-17,11,-2,58,68,88,-64,59,76,-42,-4,57,65,-46,-69,0,81,9,-39,-41,-72,105,109, -58,17,76,-96,103,90,-85,-40,-71,64,25,18,-89,-71,79,-42,83,16,48,51,98,10,-28,45,86,-7,27,-88,-91,42,-99,16, -70,-14,51,35,79,-45,77,-29,5,-88,26,-39,-27,55,117,127,-97,89,76,127,91,42,22,-77,91,59,-85,-101,42,-36,114,-8, 
  /* [5][0][][] */ -121,2,21,-104,-64,-63,42,60,79,-114,4,-10,-75,-69,-55,-121,0,34,13,-55,10,-36,72,-57,63,-103,37,31,58,-92,62,-79, -126,-33,68,114,-42,20,67,-59,105,-46,-18,-94,-56,93,-1,50,60,-81,110,104,10,-28,0,73,21,-34,24,65,24,33,108,107, -98,85,-47,52,-84,-34,22,10,87,-98,84,-24,-22,78,-38,-37,-45,47,47,57,-92,-42,93,104,-8,118,127,88,-94,68,86,27, 
  /* [6][0][][] */ -31,-71,1,-24,24,-43,68,83,16,19,-57,26,55,-34,60,39,34,-60,-64,-38,86,7,64,-18,-77,-56,17,-35,-60,33,-64,-50, -37,42,18,35,-127,1,4,-63,26,37,-22,72,22,27,-71,60,-73,-76,14,-11,54,56,-90,98,-43,-80,-62,-82,-22,49,14,23, 68,-18,93,76,-54,37,-1,-14,46,-38,-67,-50,1,38,44,-16,-59,-32,27,39,-50,97,104,43,1,-3,19,-78,45,52,-39,-46, 
  /* [7][0][][] */ -66,90,84,36,91,-74,82,-95,105,27,19,-28,-105,-79,10,37,51,-1,-62,-9,-65,-35,0,48,107,107,27,15,-4,-71,-53,15, -92,7,54,-69,-65,8,-89,44,-66,-84,76,100,-42,-18,-55,-78,31,12,98,4,16,63,-10,-4,9,-59,-29,-57,95,79,104,2, -35,-15,127,121,28,10,90,-67,-45,74,-85,-103,27,75,5,49,-40,61,80,-34,33,26,33,19,104,113,-81,74,13,69,41,63, 
  /* [8][0][][] */ -117,-95,121,59,45,72,4,17,-24,-118,-107,-94,82,9,3,-127,25,-14,118,76,63,-109,-92,-51,48,31,-93,-54,127,114,-19,37, -114,-12,88,-8,-70,-31,101,-95,-35,-24,-67,-99,49,-21,94,-19,-120,-37,79,-92,-4,-106,-16,-52,4,-89,67,-46,-38,-83,-29,-55, -51,111,-59,-82,83,-116,-39,25,-19,-6,82,-41,-23,-19,-66,-44,84,39,-66,12,7,-23,72,-85,100,48,-56,-120,-105,87,76,-20, 
  /* [9][0][][] */ -60,83,-29,113,64,84,49,-73,-38,-60,86,-8,-7,76,-97,100,80,57,51,35,36,72,-14,-4,-49,63,-23,44,6,-33,98,86, 2,117,41,-49,107,-97,5,114,-105,77,-42,89,-127,21,14,4,-127,-24,45,93,98,-82,-106,83,-29,23,121,-68,-14,40,118,-51, 72,102,-79,-9,46,55,33,69,19,-45,-37,108,17,91,-7,80,-58,66,-125,69,-88,64,55,-105,-11,-120,126,-107,34,29,64,-92, 
  /* [10][0][][] */ 71,1,-50,39,78,50,23,-32,41,-58,-69,15,-11,56,-2,-111,41,12,-2,-59,31,38,-45,-71,15,-21,74,-74,25,-40,48,-24, -16,56,9,-97,-25,-60,58,43,2,-101,37,55,-49,22,-2,11,16,79,51,-41,-26,-85,-10,-45,25,53,12,23,76,-57,-28,-93, -41,-82,81,127,43,-63,-20,-69,-69,66,-75,-22,-80,10,96,94,-17,64,85,59,-65,42,83,61,-71,-5,78,14,-2,-71,36,22, 
  /* [11][0][][] */ 32,-83,-88,-42,42,68,23,-37,-14,23,-107,-43,-63,34,-98,71,-31,-80,69,-87,-73,42,-16,79,-22,9,-24,70,-71,-3,-7,63, 2,-58,35,85,108,75,-20,25,24,35,41,-96,89,-59,-76,-1,-79,-84,-84,38,61,69,37,84,17,11,79,35,55,-70,-58,-76, 36,-29,0,-127,21,-8,61,-48,41,-105,-103,5,-36,35,-61,-115,-123,90,25,-96,-74,8,-94,73,-82,-50,60,62,37,7,59,95, 
  /* [12][0][][] */ 68,45,92,-78,-25,1,53,-92,-11,77,40,45,-100,67,62,11,-48,3,-44,-51,-67,63,32,-104,-104,-76,68,98,48,-36,16,35, -8,5,-52,46,-33,-22,-102,-38,-92,-16,68,66,51,53,29,52,-92,76,-77,16,97,-5,-50,-65,-88,49,-126,92,12,-61,-65,80, -70,-3,36,-13,87,-13,44,-46,-30,-8,42,-23,-56,18,-19,-113,-61,-24,16,15,-104,44,-125,82,78,-49,-127,55,-41,29,48,-96, 
  /* [13][0][][] */ -16,-42,18,-66,11,-13,-44,74,-66,-52,-78,78,-97,-69,10,-35,50,-5,62,-51,89,-44,85,-7,-71,50,-85,29,75,28,-11,43, -5,-53,34,-10,46,75,-71,0,66,24,16,-56,-36,16,-127,49,-50,63,42,29,-36,91,-114,64,59,65,-85,-71,81,17,89,-71, -13,16,-35,15,45,45,-11,79,7,46,-22,15,-81,51,-58,23,-45,7,-74,81,-24,94,-80,-78,95,77,89,88,99,-42,51,-82, 
  /* [14][0][][] */ -47,-10,2,45,-46,-36,-66,-39,108,82,-65,69,41,-76,50,57,89,-31,-4,69,-89,51,29,-44,97,52,24,-23,-11,52,-42,118, 32,-77,-40,27,73,-75,7,-51,72,40,-11,39,127,70,67,-45,38,-80,-93,33,-78,-1,-43,-7,-40,-56,-46,-77,3,33,-24,1, -3,-90,10,-12,-40,-45,11,63,53,-94,13,-74,33,48,-8,69,67,28,-67,-77,27,36,-85,-99,51,-45,30,37,12,51,27,-72, 
  /* [15][0][][] */ -32,43,-73,-22,-91,-100,-35,-75,-14,113,82,1,-13,77,-49,10,-127,-89,3,100,-50,123,-70,34,-96,-97,115,99,-94,17,-80,-91, 33,-76,-33,67,-37,75,95,67,-87,46,-11,94,-23,119,43,109,32,55,-12,30,43,91,102,-23,112,47,-31,-69,120,54,38,48, 54,54,-43,40,-1,-86,79,6,13,-37,-1,-74,-85,-87,3,80,-28,-107,-127,97,-47,-89,-36,63,-30,5,31,92,46,-10,-89,80, 
  /* [16][0][][] */ 120,-87,-19,118,-14,-70,-30,-92,115,46,66,-74,21,4,23,-85,-44,61,-74,61,-104,20,5,28,97,48,-37,14,-62,93,48,122, -73,-88,-25,-46,-12,11,-17,69,31,100,-70,-18,-89,22,-16,-93,97,-53,-42,-32,-25,-112,95,82,101,55,-18,-22,54,-13,-54,88, 127,-54,127,81,12,-2,49,-5,91,-27,-1,-61,53,56,39,-36,50,11,-103,77,103,-113,88,20,13,-21,-55,-23,78,60,47,-105, 
  /* [17][0][][] */ -35,-4,18,-1,60,-30,-22,-14,34,-95,41,58,-38,15,-81,-66,99,86,114,-50,75,-91,-39,2,-70,-24,30,68,-9,39,98,-90, 17,102,40,-121,28,49,89,-92,104,43,8,-33,-65,-29,-55,-37,23,64,-23,41,12,17,94,26,-44,58,28,-114,54,-25,-32,39, 98,9,-60,-103,101,105,-12,81,37,-56,-88,74,6,-5,87,94,-42,-45,127,83,95,-15,-33,75,-71,-12,20,-59,120,23,9,-108, 
  /* [18][0][][] */ -97,-70,72,-45,-105,91,68,94,-67,-98,33,45,-3,77,1,78,-87,-41,-33,-82,0,54,-116,44,-16,14,21,54,-99,59,51,-33, -20,-1,-7,67,52,-60,-28,0,41,10,49,74,-78,100,-31,107,-118,-93,36,-38,-91,4,38,-78,70,-59,99,-70,14,-118,88,-79, 1,-30,-100,-124,40,15,-35,4,-103,-56,-7,32,6,-11,-113,-112,-127,-90,-22,55,81,-79,-9,15,87,87,51,-83,88,45,43,-46, 
  /* [19][0][][] */ -51,75,55,56,33,73,8,1,-67,90,-39,-34,-83,3,72,-11,-120,13,-111,71,-57,38,-1,33,-74,-111,30,108,-102,-123,-62,58, 110,76,111,52,-101,99,66,30,-76,72,-3,76,-127,-68,49,-38,45,48,-29,23,46,108,103,16,78,-29,-86,34,-50,-93,20,-43, 28,60,74,-48,3,-77,6,21,-93,-20,44,84,-46,-21,-80,-20,-108,47,87,23,-29,-28,-21,-53,9,-41,-46,89,14,-34,76,24, 
  /* [20][0][][] */ 58,64,-61,55,-105,-21,-89,18,65,-7,-55,-66,83,-42,-72,-33,-107,100,5,26,28,14,-67,19,-35,108,93,56,-63,6,3,-75, 26,-51,81,-27,55,102,-42,64,-127,10,-34,-95,-5,29,-2,38,60,58,47,77,-35,101,-42,101,-32,82,38,0,36,2,15,-109, 53,91,-91,-6,-28,-23,-94,30,-68,65,-56,-18,-103,-32,-87,8,-70,110,46,-123,73,-65,-28,66,13,-56,66,44,-73,47,-61,-6, 
  /* [21][0][][] */ 6,-19,-34,47,58,77,44,-58,17,69,93,3,-38,-67,33,95,13,-63,3,-56,-1,16,-64,52,61,-23,-64,-57,-43,-74,49,79, 65,-68,92,115,-44,-78,2,-49,92,-40,-100,85,-85,-34,69,-35,-43,55,93,116,-43,89,24,92,-22,-7,-5,-74,-5,-82,23,64, -81,27,44,0,62,23,1,63,-86,1,45,89,-23,-67,-11,-127,52,-22,91,70,-41,66,8,-76,-65,-72,-80,15,10,-32,77,-63, 
  /* [22][0][][] */ -7,29,94,-5,19,-26,-109,-69,89,-38,-101,-100,-46,52,-6,9,33,76,-64,-112,102,3,-63,-120,104,5,-109,68,-98,20,101,46, 60,96,27,-42,-125,-88,-88,68,40,-7,37,-127,101,-105,-93,2,-49,-126,-74,-60,-124,116,48,114,-124,85,-35,112,-78,-93,-64,76, -84,-99,-88,-64,-83,56,51,79,-101,-10,-73,-63,109,48,-72,-33,97,3,-28,-83,-99,-41,99,-117,52,-65,-82,-125,30,-41,87,-50, 
  /* [23][0][][] */ 20,-52,-97,-6,48,5,-19,-104,47,19,11,-93,62,-5,19,77,-40,-10,91,53,18,12,90,92,-93,-24,-36,-41,-13,32,-105,62, 13,-65,-61,36,-30,-45,24,96,-6,-21,4,25,61,-2,66,-79,-86,26,-74,-24,12,64,-23,76,63,73,-127,-43,-81,15,82,-104, -62,81,-79,-50,-80,106,1,89,83,3,-69,-55,70,96,-60,20,-44,103,14,-11,46,-47,30,-86,-46,-15,-17,58,103,38,66,-1, 
  /* [24][0][][] */ 80,-51,-5,-65,22,25,-21,-95,4,106,100,3,56,-14,61,-93,0,-95,-14,91,64,69,-30,86,70,108,16,-85,50,72,-35,-94, 95,-11,-14,120,22,-67,-16,3,-23,-12,-31,-31,-109,-7,-20,-71,-25,19,89,-12,-37,-8,18,78,93,102,-3,32,-49,-29,13,38, -74,83,2,-21,87,-114,-3,-26,53,24,-123,-44,-47,20,-3,27,-64,-28,-76,58,96,-29,-56,-91,18,-18,-86,-27,-85,100,-127,48, 
  /* [25][0][][] */ -77,36,90,-50,-4,23,30,15,-44,35,55,110,-16,-81,-40,91,-53,36,-91,-101,33,116,-77,57,-87,67,106,104,18,30,62,-72, 100,-46,-103,-78,112,66,36,2,-27,-80,-1,-69,-104,-26,-60,-67,-5,23,97,68,-88,-15,-97,122,6,7,105,-48,119,-73,60,61, -9,56,45,127,-11,48,-10,106,55,118,-83,-2,-107,-24,57,117,-34,-19,64,66,-64,-84,-57,-56,57,22,53,16,-99,-87,-19,106, 
  /* [26][0][][] */ 34,-119,-53,114,78,-12,-30,-52,-98,-85,10,91,-2,-86,-121,116,87,6,-52,-17,-117,-74,-51,-37,1,-46,-4,-92,110,-70,-94,73, -26,75,43,-45,-81,-47,0,119,-75,67,104,38,-30,-100,98,-113,-52,-34,8,52,45,-127,-61,-102,13,-9,-14,53,-32,-48,106,94, 39,101,47,45,-78,3,31,40,-19,17,-55,-118,-65,111,21,-66,-108,2,64,-45,-92,93,59,-67,-74,62,45,17,-79,-71,56,-9, 
  /* [27][0][][] */ 48,-44,-32,-3,80,60,-51,-46,-36,-2,95,-14,-121,-32,54,-66,-12,6,-91,-66,29,-7,8,-83,12,70,17,13,57,-92,42,92, 123,70,41,61,6,83,28,88,-68,73,47,-55,63,45,-73,88,-95,61,-9,66,-79,-46,-30,61,101,-32,106,88,-17,18,89,-103, 67,95,65,-98,50,-15,-42,67,53,-86,28,51,70,27,-127,-60,50,61,0,-41,61,-96,15,37,-72,-1,-4,42,-106,-117,44,-119, 
  /* [28][0][][] */ 80,63,-88,-58,81,-86,-60,33,-35,33,-17,-88,-123,80,-45,68,69,-32,-79,-39,65,13,43,-68,48,99,-69,-93,34,-127,38,-81, -20,2,-27,-1,-82,-86,18,17,77,9,39,3,-93,97,94,-98,-117,-26,-74,92,35,19,-110,54,96,41,-49,99,-18,34,-85,24, 100,8,-16,-52,87,67,-2,61,62,97,-9,-112,66,85,74,-35,-116,111,56,45,-97,-38,16,39,30,24,113,-34,54,-83,18,88, 
  /* [29][0][][] */ -74,44,0,-119,37,6,3,-71,-55,-35,47,72,-45,36,-127,2,-98,-6,-32,53,-68,56,32,106,97,37,86,-14,64,-6,-46,22, 108,-91,69,106,36,39,37,-74,21,19,-4,12,-112,-33,17,51,-81,-90,59,-66,-50,47,106,-65,-2,-31,10,13,-13,33,36,25, 82,89,-26,-6,-3,45,-93,108,-101,-41,0,-101,18,-38,-99,-68,-51,-69,64,-60,46,0,-66,10,36,76,-77,16,-68,42,-75,-54, 
  /* [30][0][][] */ -57,-59,27,-113,56,78,-55,-57,-56,-13,105,49,-71,31,-69,37,73,61,31,107,-108,-76,37,-51,36,-47,47,-25,0,89,19,-111, -46,-1,-117,-126,44,72,-67,-16,-110,10,-40,-76,-127,-103,-4,64,-11,102,-71,43,23,-89,81,47,90,18,-40,68,-31,-42,74,-58, 71,59,82,-31,-8,6,-63,62,32,36,108,-26,15,105,-31,97,-6,7,82,102,-93,112,114,103,-26,111,92,-56,-40,-88,106,-27, 
  /* [31][0][][] */ 45,72,47,38,87,61,-91,-88,67,-20,44,14,-41,-85,123,114,101,-105,116,-62,62,21,48,-49,-39,2,126,97,57,109,-50,-55, 71,-38,-65,-37,-90,-43,100,-37,30,-60,41,-54,107,102,-61,39,33,-1,-105,-76,19,-63,-3,-5,-24,74,-11,-94,-61,127,92,-57, 58,-63,22,1,74,-99,94,-5,69,120,-4,-29,-45,-79,-45,24,76,-66,-51,38,-98,-10,77,22,-95,3,25,-106,-43,-18,-107,14, 
  /* [32][0][][] */ -54,47,-51,-77,126,-93,-17,89,-70,-87,58,3,91,-103,91,96,115,-54,-110,13,5,-68,-42,53,-106,25,-27,-26,-110,44,11,-11, 64,37,10,-6,127,-37,60,-92,52,99,32,-43,38,41,-4,-62,-67,-33,18,-22,83,56,14,12,75,2,-52,-70,-4,29,-41,54, 42,-74,68,-54,6,-39,-27,68,-81,11,76,0,82,89,-64,-34,2,66,78,-19,2,54,61,-90,15,58,92,-16,0,29,-1,-11, 
  /* [33][0][][] */ 40,-75,-42,127,95,-60,12,-10,63,9,-35,-45,-29,-66,-14,100,-9,29,69,-3,78,-76,39,-71,30,58,105,8,-25,77,-23,-12, 4,-1,-23,-50,5,49,37,-36,-23,70,-70,53,-50,39,-4,13,-26,72,-88,30,-94,-82,8,-20,2,-61,-45,77,49,-55,-99,95, 28,-54,-61,56,-8,-8,-47,43,93,28,-47,56,70,10,-10,92,87,-56,46,88,-3,-22,-56,-75,53,53,58,33,-70,70,-29,-23, 
  /* [34][0][][] */ -9,62,-4,-27,88,-58,-38,91,-31,-33,61,52,-67,23,-117,-98,-114,-28,-80,-74,6,8,-28,21,54,-33,26,-54,94,78,-58,-1, 99,51,-42,127,34,72,95,14,14,55,97,74,42,73,119,110,46,-15,-30,57,-52,110,-49,-18,70,-70,106,52,-31,-53,11,65, -98,19,26,34,-45,56,45,-89,-103,80,106,90,-10,-63,-61,36,-1,-62,-44,-59,40,-55,30,-60,-85,-72,-57,-4,-12,-19,74,-6, 
  /* [35][0][][] */ 58,-56,97,55,55,28,60,17,90,14,-19,-1,51,35,75,127,117,56,-91,84,-54,32,-48,-35,-52,-24,46,14,-44,-2,59,6, -5,28,19,52,113,-79,-43,-68,-22,-58,-65,20,-13,-83,71,3,84,2,38,-45,-85,74,-64,-22,-83,-97,-1,-69,-4,-75,52,109, -21,43,65,-45,76,44,73,57,58,-36,-90,-32,-33,-47,-64,47,54,66,-98,-60,-20,73,37,50,63,38,-3,1,68,79,-77,-71, 
  /* [36][0][][] */ 93,120,-56,101,-79,115,19,55,83,38,-26,87,102,71,-60,116,109,-25,53,-47,-61,-95,-66,-95,92,117,-2,-92,94,126,81,87, 30,49,115,8,124,68,45,17,126,104,-108,-98,-69,-31,-66,-115,-37,15,-44,-89,-26,-37,-90,87,113,-40,-108,27,27,-63,-123,114, 68,120,56,84,67,-100,-8,47,25,70,42,56,85,-44,36,8,102,-96,-51,57,127,-86,27,-33,66,-33,-64,-77,-115,126,61,-76, 
  /* [37][0][][] */ 25,86,-29,-25,-95,101,-65,75,98,34,99,-85,46,40,88,16,-36,-112,23,-77,-34,17,62,-79,5,-86,31,58,-59,-65,70,-49, -84,-68,-77,76,60,59,-107,44,-91,-100,91,-80,-32,81,53,64,-12,39,-119,-18,-107,31,-21,-44,-26,-14,-9,-84,-109,13,-67,53, -10,-54,-13,-61,99,-127,-53,-85,85,73,-75,39,-29,-78,-45,111,-10,29,-75,92,-110,-10,-31,72,62,-115,-85,-22,62,-44,66,30, 
  /* [38][0][][] */ -63,-30,39,50,-114,-42,99,-8,-109,33,-49,-80,36,110,69,-59,21,18,-43,-82,46,-86,3,-1,-98,-80,114,-42,80,-11,18,45, 108,-83,6,-66,-40,54,104,-45,-8,-62,-19,53,43,33,104,36,4,-70,123,-42,-12,43,22,110,87,-83,-100,15,34,-8,-77,29, -95,-110,-43,73,65,103,-3,-21,-127,-44,-40,46,32,58,87,28,55,61,57,111,49,-28,-72,-95,-99,36,-57,-23,-32,5,-11,111, 
  /* [39][0][][] */ 104,-6,69,78,22,-20,20,59,96,102,-18,70,46,-35,2,93,121,22,-73,17,17,39,3,92,-7,74,57,-42,-54,-30,-14,103, -20,-12,57,-59,70,53,14,-20,-28,-68,24,20,117,-72,43,11,127,-66,-109,-5,-25,-2,-48,-87,-31,-75,60,1,-23,113,-33,107, -51,-2,54,40,55,-45,43,-79,25,-53,-37,44,4,-66,-11,-62,101,-82,-34,-66,-45,37,64,50,88,30,-59,59,24,108,93,51, 
  /* [40][0][][] */ 119,55,-32,30,-79,-71,60,-94,88,54,-61,44,-75,89,3,7,60,-93,-61,103,-109,-33,19,-100,49,-50,31,-29,-53,9,-63,-47, -68,-61,-100,-41,37,4,-104,83,-4,11,-46,-110,-8,77,89,59,36,-112,70,25,-110,44,-117,-122,27,-49,-28,30,50,-102,-35,27, -106,1,-42,34,24,-73,-75,-89,30,-43,-88,101,53,-95,-30,-37,52,-84,81,-30,17,70,-52,87,91,28,19,-96,28,-100,-127,2, 
  /* [41][0][][] */ 33,81,-28,-46,119,23,109,67,108,-100,-5,12,76,-47,-22,-127,6,16,18,98,64,-4,65,99,126,75,65,-26,42,-51,-44,-64, -88,42,114,112,-19,14,101,-44,52,95,77,-33,-60,43,-109,25,86,57,-72,35,67,-75,58,69,-110,-71,-60,-4,96,92,105,-82, -32,-44,-52,73,54,-50,19,42,-81,80,-41,-53,-21,59,-114,-125,17,-10,54,72,93,-87,16,-102,-124,-107,95,-21,-62,31,9,-106, 
  /* [42][0][][] */ 43,-70,109,16,-56,-58,28,32,-57,56,6,35,61,64,-42,127,101,3,8,-31,-60,-31,-25,24,-52,-60,103,85,-84,-33,-82,99, 11,-50,66,47,-58,28,-10,38,13,42,-11,-77,81,-104,107,7,22,43,26,34,36,-50,-50,-52,-47,-16,-66,-79,-62,64,-75,-3, -85,-3,-47,51,7,-10,63,82,-66,48,-20,-20,14,-14,23,-68,112,-23,59,-54,77,-65,-16,52,-58,-80,65,-60,-54,45,21,9, 
  /* [43][0][][] */ -14,81,49,-74,-46,-90,42,103,67,36,-89,52,-69,84,-118,-77,-67,-67,48,40,111,50,1,-62,-34,-39,-61,34,103,86,-37,8, -74,40,-51,68,57,36,22,22,-17,99,63,-2,-127,29,-91,-62,41,15,-84,58,-103,99,-63,113,81,76,104,-15,-80,1,-55,-58, -32,81,-45,-49,-78,-43,114,75,-108,-67,-74,-28,-5,-99,-90,5,-2,-45,17,11,-34,-3,-89,114,28,83,-105,-45,74,-86,41,8, 
  /* [44][0][][] */ 77,92,25,-79,-7,-37,-32,9,24,58,-94,-85,64,-82,6,-25,127,-96,22,-83,4,-15,48,-65,-49,26,-77,79,59,17,-110,-69, -16,4,-9,30,-41,-78,11,-81,-69,38,-83,15,36,78,42,21,16,81,32,83,-23,31,15,-39,41,69,-60,-79,31,-9,81,-55, -90,55,83,86,107,82,95,95,74,-70,70,81,119,19,18,82,82,78,-85,-113,29,-30,73,77,-52,-88,6,51,-87,21,80,19, 
  /* [45][0][][] */ 18,-113,-29,-45,-102,94,89,107,5,-50,-105,-84,-80,-64,-60,-52,-99,-53,-109,-48,84,-105,109,26,-32,-4,51,15,111,94,30,104, 55,-12,65,-51,94,-79,-119,61,83,-59,-90,75,-48,55,19,-31,-67,-30,68,-17,-24,-8,50,-49,-66,78,-112,-104,59,-73,27,32, -44,7,-113,12,-95,49,76,5,110,91,2,47,-31,3,5,42,-118,52,-114,57,2,50,-92,-27,42,94,7,108,-21,36,-127,-115, 
  /* [46][0][][] */ 50,-42,-89,-13,-68,71,20,-36,11,-80,-2,-10,65,53,-18,-29,83,40,-72,-51,-1,-108,-70,-64,34,-62,53,-76,-23,-2,51,21, -112,1,38,99,-11,36,86,-94,-26,74,86,70,-35,-113,-5,17,109,45,47,69,-8,-47,77,-14,-39,-48,-82,14,-105,-48,-80,23, 35,83,77,87,36,68,22,78,68,-93,96,-32,117,4,41,78,127,-48,52,-28,96,90,-52,-58,24,84,60,48,-20,-9,-35,-52, 
  /* [47][0][][] */ 43,-80,91,-15,-27,-38,86,-89,113,55,-15,48,7,-67,63,-14,56,-33,-60,-7,33,-21,63,33,-68,-90,24,-23,-29,39,-13,58, 41,77,-74,34,25,-14,-18,88,127,95,-16,44,46,-58,-11,119,-33,-78,13,-25,-55,-43,2,-62,-28,48,16,43,-18,110,-59,63, 75,46,83,-32,56,-84,26,11,-18,-40,72,21,-39,-66,-13,69,16,-43,33,-52,74,53,7,87,-93,6,10,-63,-68,-12,-47,-86, 
  /* [48][0][][] */ -71,109,-76,-38,-63,-37,-66,-7,78,-118,47,-12,32,-103,-75,75,-36,-25,-24,-59,-22,-86,-16,-26,2,-30,80,-11,85,32,-46,12, 38,-126,0,-41,-49,0,25,-38,7,-44,-104,-83,-61,-77,22,46,-103,47,-22,25,104,74,57,-56,-4,25,-125,-41,-76,-44,-127,47, 31,125,55,78,123,-3,-102,-101,-91,107,-100,65,-100,33,-85,-12,108,-43,96,9,71,31,-83,-88,16,57,24,114,-95,123,22,-104, 
  /* [49][0][][] */ 78,117,41,-53,46,-28,-88,-124,-52,-77,61,62,28,29,-88,-42,123,87,3,-35,-98,-74,-6,-39,-11,90,-30,103,102,-88,12,20, -99,111,75,-37,-127,-67,41,-120,84,-116,-81,-16,-64,-46,-32,92,-42,9,78,-50,-73,-37,9,53,-104,-100,68,21,101,-97,-53,-20, -37,-114,108,-35,61,-32,-123,-67,110,-45,-68,-18,-70,68,22,19,-100,87,-112,126,106,91,97,-3,-51,105,17,40,-95,47,43,16, 
  /* [50][0][][] */ 46,-52,4,20,90,-37,-76,18,86,-41,98,-85,-25,-111,86,14,47,-11,-72,80,-22,33,-83,-28,65,-79,-47,-87,-106,-92,-49,-1, -12,112,-12,-68,12,38,16,-41,51,-26,105,96,51,-2,71,17,1,96,-93,-66,-45,31,-70,31,101,-79,106,99,-18,-11,-2,30, -81,78,79,6,-41,-69,-87,-37,-8,108,-76,5,-127,46,-65,52,36,-11,7,-20,-82,75,-78,-27,92,71,-39,70,80,-19,44,-65, 
  /* [51][0][][] */ 47,-86,53,91,-34,-41,-57,76,53,-48,-2,-9,7,-113,117,-26,-26,-28,71,83,-29,-6,-38,-42,-24,39,96,50,-39,81,65,-18, 8,3,70,-25,-79,-76,6,108,-66,-44,-77,-73,-69,-43,85,-53,15,-79,-17,20,-83,102,29,-88,-59,1,37,-12,-21,67,-49,70, 22,53,-56,40,82,41,26,23,113,88,69,-65,127,52,60,102,-2,-16,-103,-112,60,-59,38,92,50,-39,-32,68,34,-1,42,18, 
  /* [52][0][][] */ -83,-107,-96,6,-113,-8,-92,100,72,-56,77,-45,-89,82,83,71,40,105,-17,38,102,-22,-38,64,-112,25,-62,111,-1,39,-10,4, 26,24,-126,91,80,17,-83,85,-47,-105,-63,-71,-43,-127,44,25,-22,101,45,-58,-124,50,53,28,0,100,72,12,59,70,-85,5, 26,101,-47,69,-64,-51,90,49,-106,-18,106,-14,85,-41,1,-72,-63,-6,-81,-60,54,38,39,-39,-54,43,56,-78,36,-49,102,45, 
  /* [53][0][][] */ 76,14,54,-43,-100,-107,75,-62,21,-118,10,91,-66,-41,-25,-22,-66,59,-31,109,73,-119,83,-86,2,17,-1,-73,67,-29,43,-70, 1,71,-58,-49,-91,33,110,-33,44,84,53,71,23,13,-7,-125,118,-84,-23,-68,74,31,47,-72,106,18,51,18,15,69,69,39, -55,-67,61,-37,-37,-18,115,64,17,-89,10,35,-93,-40,-69,26,-2,-30,-102,-34,-19,-94,-57,52,127,97,93,-27,80,12,46,43, 
  /* [54][0][][] */ 79,-13,-84,29,-63,-75,85,-66,62,24,-62,-29,-25,83,2,-69,47,95,-10,-34,-60,-9,80,-10,43,-19,-66,-55,-40,-31,-81,-116, 80,19,-72,64,-12,0,8,24,-71,-40,103,90,-22,94,8,-127,-61,-76,-20,-4,-70,38,-78,43,-33,8,-79,-55,-21,102,-10,78, 67,74,33,-15,-37,-8,43,-81,-22,79,101,11,-90,16,47,18,-93,-65,47,115,53,1,-49,89,-22,-34,-68,-67,87,68,89,51, 
  /* [55][0][][] */ -70,-20,-42,-87,65,65,24,72,65,-126,16,-14,-49,69,119,-52,99,107,7,86,-18,-111,-72,14,-119,28,-34,46,35,109,46,70, -98,79,-93,-35,45,43,-23,-9,-83,-22,64,74,-74,2,49,37,7,-78,43,-36,-90,-26,-123,-94,-73,8,52,-23,113,79,75,89, -94,-22,-117,84,79,25,16,82,50,-63,67,-127,80,-114,-44,-118,-62,-4,25,-23,-95,-30,-89,-65,-71,67,-101,2,-45,-112,-94,-13, 
  /* [56][0][][] */ -75,-112,13,-14,-74,-65,72,64,37,-56,-1,108,56,-77,4,-18,-84,-89,-86,25,-94,-12,-25,36,-70,-77,76,86,9,-38,-65,-52, 99,-9,-93,-60,-19,-34,-67,-53,-27,49,-25,-9,28,89,-109,-68,21,22,68,12,0,29,34,93,-83,87,52,-55,-33,94,30,-62, 102,28,30,3,8,77,-70,20,-107,50,45,19,-110,-82,-87,-27,-114,4,-32,30,-10,90,56,52,118,63,108,-56,127,-82,-50,-6, 
  /* [57][0][][] */ -44,73,37,87,8,-33,73,39,-74,9,126,-46,-38,-90,42,-50,56,-102,-86,79,54,92,-45,-43,79,126,111,23,37,77,-102,109, -79,55,37,-62,-64,64,73,-67,-37,102,69,72,39,-112,-58,38,9,-47,-72,65,-65,-37,34,-7,90,-64,79,120,-43,5,74,12, -10,11,-73,127,-67,77,3,-67,-67,15,5,-67,70,-104,-65,34,73,18,30,1,49,-7,-68,-7,76,38,-98,-64,8,55,-16,2, 
  /* [58][0][][] */ -92,90,80,-78,83,127,58,104,-32,30,-16,-42,22,-45,-105,-117,81,61,62,71,58,85,-34,27,-24,-76,-40,-47,-60,-37,23,-15, -41,67,-10,75,84,58,-4,-76,12,100,63,-1,-89,-6,88,77,61,83,110,117,-72,83,61,9,-28,76,35,111,10,51,6,-22, 17,115,64,89,-95,-47,-38,47,93,0,-93,-103,-73,70,84,21,3,-83,-119,25,9,-70,96,-38,-16,-27,-18,101,-83,12,51,-30, 
  /* [59][0][][] */ -14,-44,57,-32,93,13,-53,4,59,-63,-3,51,-3,8,61,36,28,-90,84,51,74,88,27,114,-2,-30,93,-6,82,81,-66,-2, -4,-92,-13,-102,102,79,-76,-79,82,-50,88,40,26,-58,54,44,-32,5,-45,-42,-41,-127,-13,-39,-66,-105,102,-52,32,-26,55,36, -28,-99,-89,-32,-103,-42,27,-14,9,-39,9,89,64,-66,-55,91,96,81,8,-29,78,89,-49,-73,-87,-73,-23,58,7,86,46,5, 
  /* [60][0][][] */ -83,-17,-37,-2,-10,71,77,19,1,-8,59,-8,-15,-69,30,34,-43,98,23,-102,90,-77,-42,-90,83,28,70,93,-76,13,-82,-8, 18,-75,16,-53,64,-3,72,42,19,-48,-88,-34,-18,50,-64,-20,-111,64,10,-100,-15,86,-2,88,-35,6,47,-36,21,-105,26,-9, 66,-53,-110,-4,-75,63,-16,50,-67,33,70,112,-112,-43,-85,-127,-1,1,6,19,15,-3,19,88,-52,41,-14,92,3,10,-88,12, 
  /* [61][0][][] */ -63,-114,27,17,-3,-52,65,-41,41,-72,-94,26,45,106,23,92,-108,-85,10,86,-56,-5,12,-52,44,13,-62,-15,56,-110,-72,59, -56,98,95,-53,-67,106,-33,-25,-45,-24,1,92,-127,-33,-93,-39,41,47,20,-84,33,-61,34,40,-102,80,-92,75,-42,-60,-82,-28, -115,68,33,7,101,-8,83,0,-77,78,-54,6,-54,6,5,-63,-116,86,44,41,-58,-10,108,-59,-47,-100,-19,-12,-5,97,-84,23, 
  /* [62][0][][] */ 47,-67,-103,15,38,10,64,-64,63,-31,-99,-52,32,23,-45,-59,65,-75,58,39,13,-37,-49,-109,17,-39,-107,81,-105,-8,-71,55, -27,60,24,-25,-53,-20,17,-22,43,62,-41,-42,127,41,-36,72,88,-84,-77,-42,-64,-68,-10,73,90,-1,-65,-61,35,-11,31,6, 45,-86,66,-60,-33,-70,45,58,-14,73,23,70,106,58,37,89,92,-9,62,-14,-52,-81,-50,38,-24,-88,39,4,-94,8,-59,-66, 
  /* [63][0][][] */ 65,44,-57,-82,82,21,-47,64,-68,22,19,-27,-1,124,53,-122,43,72,59,70,-54,-41,-5,41,-40,101,27,-35,18,-75,-3,-54, -51,56,-22,37,68,-25,-87,81,-37,92,65,67,-99,-21,-41,127,-89,90,121,62,-78,85,-67,-59,76,108,68,-16,15,-101,-85,43, 94,10,-62,85,-116,-99,-2,10,24,-93,-85,79,-76,-74,62,77,-3,-85,-45,111,30,97,-59,-73,-27,-81,-4,-108,-38,-17,-83,27, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant13_scale = { 64, { 0.0012021987931802869, 0.0012979942839592695, 0.001276562106795609, 0.0015514340484514832, 0.0013513232115656137, 0.0012400960549712181, 0.0017005003755912185, 0.0013840657193213701, 0.0011625264305621386, 0.0012086251517757773, 0.0015194956213235855, 0.0014485145220533013, 0.001377882668748498, 0.0015874619130045176, 0.0016210124595090747, 0.0012774461647495627, 0.0012423705775290728, 0.0012356301303952932, 0.0013703795848414302, 0.0013201190158724785, 0.001321568270213902, 0.0014579908456653357, 0.0011041349498555064, 0.0013075278839096427, 0.0013835484860464931, 0.0013234945945441723, 0.0011638809228315949, 0.0013425180222839117, 0.001298421761021018, 0.001407288946211338, 0.0013482877984642982, 0.0012913121609017253, 0.0014684891793876886, 0.001654414925724268, 0.0014406299451366067, 0.0016008769161999226, 0.0011929925531148911, 0.0013469854602590203, 0.0012687991838902235, 0.0016620249953120947, 0.0012591229751706123, 0.0012069689109921455, 0.0016622313996776938, 0.0012718574143946171, 0.0014891405589878559, 0.0012468498898670077, 0.0013954192399978638, 0.0015965858474373817, 0.0011197112035006285, 0.0011619438882917166, 0.0013088302221149206, 0.0013542907545343041, 0.0012026053154841065, 0.0012760043609887362, 0.0014881002716720104, 0.0011205099290236831, 0.0013812180841341615, 0.0011637827847152948, 0.0012974651763215661, 0.001349002355709672, 0.0013565330300480127, 0.0012653802987188101, 0.0015136031433939934, 0.0012994143180549145, } };
const TfArray<64, int> quant13_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[32] = { 219, -135, -47, 544, -260, -303, -80, -209, 636, 427, -22, 37, 618, -456, 383, 486, 666, -158, -223, -214, -236, -108, -21, -372, -196, 70, 17, 0, -286, 573, -229, 9, };
const TfArray<1, int> tensor_dimension14 = { 1, { 32 } };
const TfArray<32, float> quant14_scale = { 32, { 5.4801439546281472e-05, 4.8345289542339742e-05, 5.0518086936790496e-05, 5.7481338444631547e-05, 4.2734074668260291e-05, 4.4527816498884931e-05, 4.8816098569659516e-05, 4.8991169023793191e-05, 6.1476523114833981e-05, 5.4309592087520286e-05, 5.2976265578763559e-05, 4.7844627260928974e-05, 6.1379752878565341e-05, 5.1473492931108922e-05, 5.2800034609390423e-05, 5.8742360124597326e-05, 5.3654897783417255e-05, 5.0949685828527436e-05, 5.0446084060240537e-05, 5.3074789320817217e-05, 5.1546954637160525e-05, 5.1796829211525619e-05, 5.1947983592981473e-05, 5.1485945732565597e-05, 5.0353966798866168e-05, 4.9654383474262431e-05, 5.0760096200974658e-05, 4.8483310820301995e-05, 4.9245467380387709e-05, 5.1923259889008477e-05, 4.9114139983430505e-05, 5.2949042583350092e-05, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[32*1*3*16] = { 
  /* [0][0][][] */ 77,124,-16,17,-5,25,50,-82,66,-1,-85,49,88,-105,38,113, -24,126,95,23,-79,-127,124,-17,3,-103,-104,-106,17,-68,83,-57, -49,-101,45,-72,-72,-19,-109,78,79,-58,-89,-125,89,62,-39,-20, 
  /* [1][0][][] */ 66,-52,71,95,24,-87,75,78,-125,-96,0,111,-105,21,-10,7, 31,-71,-24,-23,115,-78,2,38,92,62,66,58,-36,64,29,-126, -23,-19,23,57,-22,-63,-15,-94,-27,-4,-33,33,-30,-16,127,28, 
  /* [2][0][][] */ -96,74,118,-77,-66,14,87,107,75,-72,21,-71,49,29,109,57, 66,-45,102,69,-127,-39,75,-74,-86,82,65,-29,-71,14,-25,-73, 80,36,-87,-47,-112,-108,-104,-20,-27,-22,-116,-120,4,94,-13,88, 
  /* [3][0][][] */ 30,-69,33,26,101,-24,56,21,4,-13,-14,79,-34,33,17,-52, 24,104,119,15,-72,29,127,82,-7,44,-52,34,-91,-30,-96,-57, -1,-58,-23,-106,17,-3,73,-12,-88,-77,4,-59,-46,102,-33,3, 
  /* [4][0][][] */ 71,55,56,46,118,-118,71,-105,-123,-42,4,124,74,-22,125,87, 75,72,-76,127,74,75,-35,29,-93,88,-49,-64,10,45,124,106, -70,61,-18,7,108,-14,-96,-123,-85,-97,85,-67,103,-102,-67,-106, 
  /* [5][0][][] */ -25,13,26,-5,-101,33,102,37,-6,-41,-59,51,22,103,-68,36, 72,-8,-47,-54,9,-3,127,93,57,-118,-111,96,-9,76,106,-101, 56,40,97,64,16,89,61,116,9,84,17,28,-47,51,23,65, 
  /* [6][0][][] */ 100,-84,-60,-126,73,-39,-46,83,76,52,-51,58,-83,111,-70,-127, -59,-44,-63,-26,-36,4,-81,82,76,-55,-125,74,-87,-115,81,40, 83,-103,41,-60,22,86,-26,-32,-74,114,-17,-2,20,-55,-1,-85, 
  /* [7][0][][] */ -29,-124,-104,-77,-57,38,21,27,-10,67,101,13,-67,62,-121,-34, 3,97,-53,-99,-92,-6,82,-116,-127,-2,-105,68,121,97,-111,13, 92,117,-103,63,-67,-46,2,-81,-46,37,-46,27,-91,40,118,56, 
  /* [8][0][][] */ 117,70,-68,97,-45,38,41,62,-59,10,-14,93,30,-86,-13,36, -76,6,39,-8,127,59,-71,-28,21,-82,-71,-66,-65,-37,-12,-92, 64,70,12,4,-1,-67,-9,0,-18,39,101,-49,-38,78,-22,-75, 
  /* [9][0][][] */ -80,93,39,-37,45,-24,116,90,111,66,-50,-23,111,-16,-25,106, -64,23,71,39,-21,83,4,-69,124,-105,71,-65,105,26,42,-52, -20,-71,90,83,38,-59,92,-7,-76,31,29,104,127,-36,16,-9, 
  /* [10][0][][] */ -62,47,-107,-95,80,33,27,70,6,117,-31,88,3,16,-47,32, 112,-62,-35,80,36,108,-99,118,-35,13,-72,-65,86,99,125,6, -75,31,-3,27,-37,-31,-19,31,127,-14,48,-18,-12,-88,-72,-38, 
  /* [11][0][][] */ 6,-22,-103,92,-55,-123,6,-103,112,59,-64,-77,-51,71,-101,33, 68,79,-22,32,9,-80,86,-43,30,40,-118,-66,-69,110,-76,6, -56,-48,25,68,14,127,21,19,16,32,46,-23,-28,84,24,-76, 
  /* [12][0][][] */ -27,4,6,54,4,2,-51,-76,7,-46,79,60,117,-12,39,-4, -95,39,68,-36,127,59,-34,-75,-62,-19,120,-82,-56,31,86,13, -15,76,-41,8,-53,64,119,-63,-41,-57,91,68,84,-85,87,-57, 
  /* [13][0][][] */ -118,8,114,93,-83,99,78,87,108,-94,26,-105,-98,-78,121,62, 10,-67,123,85,-58,11,8,114,-114,69,-27,-86,19,-67,60,-35, -82,120,127,18,-22,84,76,-68,97,37,-60,85,42,-76,-10,117, 
  /* [14][0][][] */ -74,85,91,37,81,114,22,-86,-1,7,108,71,82,11,17,-43, -6,15,121,-39,39,-103,-59,-59,93,55,-83,-49,92,-63,-27,20, -56,44,87,-92,-1,-68,-110,-5,-71,-63,-8,-80,127,101,30,85, 
  /* [15][0][][] */ 71,63,127,-77,-55,-57,93,-75,-24,124,108,-55,-85,-40,-34,60, 74,64,42,-17,-20,22,57,104,-58,-75,16,-56,62,-16,88,122, 21,-42,-105,-79,-21,15,-38,78,-104,-81,-37,68,-75,-86,52,19, 
  /* [16][0][][] */ 52,-7,78,-64,68,127,66,4,-55,-34,82,60,30,-18,108,-18, -69,-5,-46,-10,-10,6,22,75,-90,-62,95,-19,-55,-76,60,-94, 48,106,-36,-3,-29,85,-7,-85,7,-10,-10,116,124,-40,-38,30, 
  /* [17][0][][] */ -95,69,-91,48,13,-127,-95,-74,-27,109,-106,-90,-38,-81,-24,45, 73,-5,74,96,-10,-6,-17,97,91,-15,-108,-125,12,-95,-96,16, 44,70,-71,93,-108,-118,-121,111,-59,-114,-8,23,-82,-26,-69,-75, 
  /* [18][0][][] */ 80,6,107,-124,-10,-49,4,-76,48,-42,-106,-125,-37,-38,8,19, 65,-122,29,-80,16,38,-10,124,21,-15,2,9,67,82,-50,87, 64,-3,92,5,-44,-108,79,127,112,-6,30,75,-20,-38,27,65, 
  /* [19][0][][] */ 43,-109,84,-72,9,68,99,-100,-16,-87,124,-80,-39,88,-19,105, -30,85,-19,-99,-6,92,97,78,4,-75,-44,-59,-100,-51,46,85, -32,-31,29,103,-39,-18,-127,20,-42,-48,-115,-50,-90,-38,-34,39, 
  /* [20][0][][] */ -103,100,-104,69,6,-7,-53,6,20,14,-40,-85,75,32,115,4, -76,-104,96,-110,-6,-72,38,110,-96,109,40,-50,76,39,-47,-80, 83,107,-67,-127,-45,-75,33,-39,68,8,-74,23,30,79,-31,41, 
  /* [21][0][][] */ -89,-20,-13,98,-112,62,-82,7,-35,73,-100,32,-14,-68,-105,-8, -88,-76,107,-16,-26,-28,112,95,10,10,3,71,-36,-95,124,-36, -112,87,127,-65,-69,53,56,91,109,39,-52,-103,-8,-29,-86,15, 
  /* [22][0][][] */ -84,23,73,28,-99,21,48,96,21,-53,1,-91,-112,-79,-90,-65, 99,97,117,-49,103,-70,-103,-10,80,36,-63,-2,55,-81,4,-88, 64,-15,53,-31,-127,-118,-63,72,-120,26,-51,21,-68,-8,-115,-31, 
  /* [23][0][][] */ -55,-70,-69,75,-38,41,40,-19,91,16,89,-1,-37,127,-106,-8, 20,11,107,-96,-41,-63,89,118,73,-26,81,101,-91,67,56,113, -24,-41,90,50,-75,95,38,-62,48,-13,-50,42,53,18,-41,85, 
  /* [24][0][][] */ -127,1,-88,-75,-1,92,-107,119,110,46,121,9,97,102,-7,11, 74,36,-29,125,36,101,-116,-5,-114,30,27,27,-69,-121,-5,-22, -118,-17,87,72,-40,-83,85,-125,114,-48,-114,121,119,-108,-124,-70, 
  /* [25][0][][] */ 13,33,23,28,-108,-123,-16,-5,29,-29,-105,-48,-88,48,2,-98, 75,29,-40,127,53,123,-7,-104,47,-2,-101,12,25,35,57,110, 37,-64,57,101,-38,-77,86,48,-62,-4,-78,-13,-18,-24,73,-25, 
  /* [26][0][][] */ 116,47,53,6,-21,-20,-84,-31,96,125,94,108,-78,35,92,76, 78,82,74,3,40,103,127,-17,-19,-9,-99,-26,-112,-13,41,-103, 62,-53,98,-35,-64,-105,46,-76,-42,-42,42,117,108,-102,-72,69, 
  /* [27][0][][] */ 91,104,80,-91,-9,-55,33,-103,-76,-89,-126,-64,-109,98,-39,8, 5,-53,102,-76,-46,88,-38,-83,53,-85,-47,-87,11,-114,-106,1, 47,-63,-101,85,6,104,-7,100,-50,-127,84,-121,14,-75,-62,106, 
  /* [28][0][][] */ -19,-109,16,-46,0,-93,60,114,-34,-67,45,-98,-81,110,-42,48, 116,71,-83,121,1,21,112,-47,29,-32,-43,-107,-115,89,122,-100, 43,6,122,-28,-33,17,118,103,127,-24,-19,18,90,27,123,36, 
  /* [29][0][][] */ 39,65,-105,-95,41,-68,-61,70,-70,-37,80,-76,23,-71,-29,-104, -48,-55,71,-8,74,-94,2,39,113,83,71,-84,98,-33,104,-76, -80,-45,-48,-11,106,127,68,-103,53,-78,22,65,90,-55,122,-55, 
  /* [30][0][][] */ 66,102,-66,67,51,22,-105,-89,11,9,-64,-116,94,23,123,-25, -75,125,76,-51,117,-37,28,-120,80,-53,-102,-55,-114,127,6,81, -19,6,-13,47,-51,43,-12,117,123,-38,-2,97,78,82,-103,18, 
  /* [31][0][][] */ -20,127,38,-88,-87,19,22,-28,57,-105,22,-85,-72,-21,-54,-98, -89,44,22,-93,-59,31,-83,52,-76,-113,76,60,78,41,-78,-6, 117,-106,109,70,-19,-112,114,76,-73,-31,77,12,112,-62,-45,-6, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant15_scale = { 32, { 0.0017932034097611904, 0.001581946387887001, 0.0016530443681403995, 0.001880894647911191, 0.0013983371900394559, 0.0014570316998288035, 0.0015973520930856466, 0.0016030807746574283, 0.0020116243977099657, 0.0017771093407645822, 0.0017334803706035018, 0.0015655638417229056, 0.0020084579009562731, 0.00168430688790977, 0.0017277138540521264, 0.0019221575930714607, 0.0017556864768266678, 0.0016671670600771904, 0.0016506882384419441, 0.0017367042601108551, 0.0016867107478901744, 0.0016948870616033673, 0.0016998331993818283, 0.0016847144579514861, 0.0016476740129292011, 0.0016247823368757963, 0.001660963287577033, 0.001586462720297277, 0.0016114019090309739, 0.0016990241128951311, 0.0016071045538410544, 0.0017325896769762039, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[16] = { -254, -1, -2, -136, 475, 169, 92, -199, -271, -168, 579, 27, 375, -105, 522, -218, };
const TfArray<1, int> tensor_dimension16 = { 1, { 16 } };
const TfArray<16, float> quant16_scale = { 16, { 7.0077076088637114e-05, 7.2657421696931124e-05, 7.4048351962119341e-05, 6.0618167481152341e-05, 6.4387932070530951e-05, 7.1753696829546243e-05, 6.3663937908131629e-05, 6.8806977651547641e-05, 6.7546192440204322e-05, 6.2048318795859814e-05, 7.16104477760382e-05, 6.8788336648140103e-05, 6.5953507146332413e-05, 6.7385488364379853e-05, 7.222298881970346e-05, 6.7482418671716005e-05, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[16*1*3*8] = { 
  /* [0][0][][] */ 40,49,108,87,-37,-11,2,48, -6,26,-6,-29,-89,19,92,-127, 35,60,21,30,-107,-61,71,9, 
  /* [1][0][][] */ -61,92,17,94,-5,-99,-25,61, -81,-28,-36,19,86,113,76,127, 97,20,39,-114,-59,-80,-5,-2, 
  /* [2][0][][] */ -24,43,-33,26,11,-40,19,69, 115,8,97,84,57,-96,8,127, -89,54,60,-63,-35,11,91,4, 
  /* [3][0][][] */ 69,-91,66,-50,106,-38,-113,72, 25,-127,-29,112,9,-77,-71,41, -98,3,-51,-52,69,-38,91,66, 
  /* [4][0][][] */ -51,-78,-95,-68,-127,-109,37,49, -98,-38,-58,-81,-41,80,43,-27, 72,92,88,-59,-113,124,-34,29, 
  /* [5][0][][] */ -90,74,72,90,-24,-119,-51,127, -97,62,-27,-33,86,95,-90,-22, -72,120,76,71,4,20,-68,93, 
  /* [6][0][][] */ 107,-1,58,93,-126,-27,46,35, 55,-100,83,-107,-39,-6,38,91, -47,-127,-83,99,-22,29,-98,-98, 
  /* [7][0][][] */ -19,105,-1,-127,-109,122,114,51, 66,97,95,115,87,92,64,70, 16,3,-80,-22,115,38,125,34, 
  /* [8][0][][] */ 68,-106,114,91,23,-33,107,73, -48,-81,-90,87,98,-35,-119,127, -28,-66,100,77,17,66,-23,-15, 
  /* [9][0][][] */ 52,-83,69,103,-53,90,105,74, -36,-55,-19,-81,2,68,-32,51, -14,-86,-50,127,-35,59,-41,126, 
  /* [10][0][][] */ -79,-62,-45,42,25,-51,72,-13, -107,-98,-19,-8,-53,-101,-78,45, -61,-5,-38,74,-84,58,-30,127, 
  /* [11][0][][] */ -127,52,-67,118,85,17,-62,-72, -61,-74,46,23,124,-124,-4,56, -34,-11,-93,93,-109,-111,-95,-27, 
  /* [12][0][][] */ -108,60,-104,126,-37,-13,108,-29, 64,-18,-121,-62,-112,73,-116,-52, 74,71,74,22,60,-127,-77,60, 
  /* [13][0][][] */ 13,-18,-31,-57,-124,82,-67,-55, 78,56,-63,-1,-127,-110,-69,-104, -59,21,113,-12,91,-100,-93,73, 
  /* [14][0][][] */ 66,13,90,-31,-25,68,23,-69, -13,97,107,29,-10,-3,65,-78, 96,-115,19,127,22,-102,8,-93, 
  /* [15][0][][] */ 76,75,-10,-64,12,-54,-50,76, -8,-21,70,-35,9,-82,15,46, -76,-99,84,-81,-127,-21,31,54, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant17_scale = { 16, { 0.0022920460905879736, 0.0023764427751302719, 0.0024219367187470198, 0.0019826688803732395, 0.0021059683058410883, 0.0023468842264264822, 0.0020822882652282715, 0.0022505044471472502, 0.0022092671133577824, 0.0020294454880058765, 0.0023421989753842354, 0.0022498946636915207, 0.0021571745164692402, 0.0022040109615772963, 0.0023622335866093636, 0.002207181416451931, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int32_t tensor_data18[8] = { -1577, -1260, -2385, -1244, -1175, -1623, -1856, -427, };
const TfArray<1, int> tensor_dimension18 = { 1, { 8 } };
const TfArray<8, float> quant18_scale = { 8, { 3.9051897147146519e-06, 3.883872977894498e-06, 4.6199202188290656e-06, 4.6648306124552619e-06, 3.9833407754485961e-06, 3.9548745007778052e-06, 3.9659435060457326e-06, 4.266849828127306e-06, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[8*1*3*129] = { 
  /* [0][0][][] */ -7,60,-5,18,-121,-33,66,-54,-82,-44,28,-109,92,-96,-110,28,-20,-47,-35,-123,34,-16,38,64,52,-10,2,-111,16,-117,-112,64,22,-59,58,-32,14,-48,59,83,24,43,-101,73,-47,-64,113,46,-34,-39,97,104,-107,104,62,93,101,39,-25,69,-116,68,44,-1,-44,-64,80,-27,75,-64,-89,93,-90,-101,-38,22,61,38,-84,22,66,-24,88,-92,102,-118,-104,-42,-65,68,-80,-111,30,-116,-85,-17,-85,-60,63,-81,47,-67,-6,30,12,-95,-115,15,-49,-65,-109,-111,-20,-81,-53,-48,-48,88,66,62,-84,-69,-15,75,114,-27,-117,3,81, -112,41,113,-28,-37,16,-107,55,-23,109,-124,107,10,-24,86,30,112,-18,72,64,47,39,71,-84,-103,-93,7,96,-76,104,74,-24,1,-91,61,24,-4,97,-4,112,39,95,68,-9,-35,76,22,-57,-105,26,-63,-80,14,-68,35,72,-31,-43,84,49,-124,76,-93,-62,-39,85,-22,-73,-78,-54,-110,27,-65,20,-121,46,-26,-100,-127,-91,71,-30,95,-14,-75,85,-127,-12,0,-92,-76,-96,63,107,-49,67,35,-6,8,-2,102,-67,-114,106,72,14,-19,86,13,-3,-115,107,103,5,-33,6,-96,47,99,-100,-34,-15,-90,-24,-112,64,17,-61,-27, -41,32,-38,7,100,-69,-106,-52,-36,51,-35,90,-72,25,-26,32,13,88,-60,61,-12,-46,-2,15,78,-11,-65,-66,88,-116,-17,13,-60,34,-40,-88,-46,-125,94,-75,-21,57,49,78,53,-39,-18,20,0,-79,-21,-70,-125,57,107,1,42,68,16,-19,-99,60,89,-114,102,43,96,-109,-115,-28,-27,58,104,-127,-24,-28,-14,90,-90,-89,-34,104,-1,-93,75,56,-12,-35,24,107,79,115,52,95,93,12,19,-86,77,63,6,-37,-52,-103,-68,-121,-40,-33,44,107,15,78,-77,-114,-11,-112,-126,-58,101,-72,50,-94,-38,-70,79,-86,32,30,-64, 
  /* [1][0][][] */ -124,-106,-27,87,-127,93,-108,103,-11,-12,-41,-76,83,-101,112,32,-116,-53,115,108,46,-72,37,21,23,-83,-109,-46,-48,26,10,-127,-49,50,26,68,-82,-91,-6,-90,89,-18,-90,30,-25,117,81,107,6,-50,-24,-29,59,-105,-101,95,19,-94,-66,-44,56,117,-69,-37,-126,-27,2,-67,-22,98,-35,-9,-13,115,4,-24,-58,-20,-18,-121,99,-93,-1,-78,-122,78,82,7,-117,26,-100,78,110,-76,-14,26,-22,80,101,-42,-54,21,-120,40,54,111,-70,115,-39,-92,63,-57,31,-125,-66,83,72,5,-88,62,3,98,-97,70,67,-116,57,-61,-25, 50,-2,-122,106,-55,-65,-22,-78,29,66,-54,-120,62,85,-20,77,94,-116,-33,2,-27,-28,-114,30,-121,-47,-54,-90,52,-101,-99,-36,-4,-31,-7,87,85,-120,-19,91,91,60,-88,33,48,108,103,-82,88,-60,-29,67,100,72,-93,-29,12,-27,52,-83,-93,-43,107,-104,-24,-61,-13,-126,84,-5,-76,-22,55,-104,40,49,-67,-108,-112,90,-46,50,-91,57,-97,13,-29,-88,-52,-12,98,18,53,22,-26,-124,32,91,-7,2,19,102,-40,-117,87,60,0,8,81,-16,-93,-63,-10,45,33,107,14,-100,101,67,-68,20,68,98,29,99,-7,-111,3, -74,-94,-88,12,-74,15,47,84,-126,-102,-85,-17,-27,44,28,61,46,-40,52,-114,-15,-113,114,-56,89,65,31,-39,99,-87,18,60,26,91,79,-98,-74,-94,76,-65,-80,-110,25,91,-78,62,-50,-43,-63,26,13,-45,51,-71,-2,107,17,-8,81,51,-50,89,-104,-65,109,-114,98,-47,-61,58,36,-100,71,-49,-79,-47,-8,108,-107,4,101,-116,-81,101,110,-98,-49,-23,15,22,107,93,-119,88,-125,-7,-22,-17,40,-107,-73,-122,0,8,57,-73,78,69,106,30,106,-70,-51,-124,98,-62,107,-61,-124,54,26,-95,-60,-65,-123,-114,-98,-50,99, 
  /* [2][0][][] */ 74,104,-82,-24,-81,-81,54,57,-51,27,46,-76,57,-90,-54,70,68,-57,80,43,101,0,3,11,42,-65,-70,-85,2,-89,-66,36,-75,66,110,-50,59,-65,-9,-31,39,8,18,-42,25,15,48,-47,89,-72,114,-78,-39,32,106,69,-83,-45,74,83,22,96,-37,2,-51,104,-42,5,-75,-76,-46,80,-85,31,-21,-46,-89,56,-85,-46,60,-73,-57,-3,74,-8,117,115,75,-51,-70,-12,43,58,33,72,-64,-65,113,-84,64,53,-60,34,96,-84,19,-50,15,80,50,-20,15,-72,74,-43,18,115,-45,-56,45,67,-66,-15,-33,63,-21,17,105, 54,-11,-13,51,68,-11,62,77,73,-6,-63,16,-58,-60,92,-14,23,33,-21,-27,-50,103,36,-23,17,49,-6,77,-57,-49,102,-18,38,57,38,106,37,-77,98,74,69,-22,55,19,-41,69,7,92,73,103,-52,19,-9,91,57,-30,-4,12,-81,71,58,-76,39,100,90,40,-38,58,-18,-33,18,50,-38,40,70,21,45,41,101,39,-37,17,-35,59,-19,-67,-11,-20,104,46,29,-62,-19,12,-24,37,-54,14,-84,77,48,37,65,77,108,67,112,0,-63,-83,10,51,-38,70,-46,93,52,-75,108,0,112,-87,99,-91,-42,111,-33,62,34, -13,85,57,59,-41,-7,-24,97,13,-44,-63,-82,19,87,21,6,-45,-35,-10,-60,63,8,16,43,-88,-89,68,-51,-79,-46,-7,75,62,-16,62,-27,-70,-6,-26,-77,-23,98,-36,-38,104,40,3,116,-45,-10,13,-43,105,95,39,-68,-62,41,-62,-11,56,107,-72,63,23,-71,-58,72,77,-85,-88,-51,29,-68,14,58,5,64,43,0,92,62,-39,-4,37,61,61,78,110,-24,127,105,6,-22,87,79,57,112,-29,1,-83,-39,-66,1,104,26,86,-67,4,42,-75,-46,-20,62,-2,77,90,57,16,13,101,-61,-19,63,100,105,85,55,-39, 
  /* [3][0][][] */ -68,5,13,-86,101,-38,107,21,104,-80,6,-59,4,47,45,10,116,49,56,35,66,90,88,100,50,99,105,-62,115,54,67,84,88,55,65,63,-17,17,-80,94,-64,-25,13,-36,61,49,108,-38,108,75,-50,-6,-19,-48,96,-47,113,95,13,61,78,46,12,114,17,-56,79,-51,42,-22,97,119,51,3,-42,-32,4,-57,108,-16,97,17,101,-74,66,78,43,27,-73,44,121,-52,-70,47,-73,42,46,28,-18,107,-62,66,-48,43,-33,18,102,46,111,-52,114,-37,20,9,-45,9,40,-80,-66,-7,79,-66,4,66,85,-48,-53,46,-7, 10,-2,49,-63,32,105,40,109,65,-44,-40,-67,71,74,92,66,-14,32,-47,-81,102,112,96,-57,-12,-42,118,20,-50,-49,-24,-47,93,-59,46,61,78,85,2,-20,-42,-42,-2,-48,122,83,79,-62,-75,34,106,-32,-34,-8,60,109,45,104,-3,37,92,-6,60,-67,76,41,54,63,-71,64,53,38,65,97,-82,-42,88,-61,20,15,112,-4,-75,-3,-78,95,10,-43,108,65,75,81,9,51,-15,123,62,72,-74,-65,121,-62,-77,-50,-37,83,103,40,48,-23,95,-38,66,-45,-68,71,100,4,122,111,65,-14,9,-15,76,105,100,91,88, -63,-7,-26,85,7,-13,-37,34,34,-72,-67,63,46,25,19,-11,-31,-60,6,124,-57,-60,22,66,-63,69,45,31,-63,68,-15,-40,-67,-69,15,8,-62,101,88,-20,59,11,-69,124,127,56,46,32,29,68,-58,-13,-59,19,51,61,1,25,-27,-71,-62,-21,49,126,-30,5,-51,-16,-36,-50,16,-7,-6,62,105,41,110,4,-60,34,83,-20,-48,-59,64,-3,-2,36,-23,-30,23,45,90,18,62,82,57,51,12,64,109,22,45,93,28,87,44,-16,28,-46,-47,37,-7,-43,5,46,-56,-1,96,-71,-15,-14,103,10,-1,82,102,-41,16, 
  /* [4][0][][] */ 95,-58,-21,106,-81,12,-6,90,-25,-15,-98,67,50,66,-33,91,-75,-80,-77,-93,-62,-102,-100,-24,-111,-39,-35,37,65,-43,-82,25,-83,-48,52,-85,-40,100,-58,36,60,10,79,-62,-60,-15,95,-62,17,-46,-21,50,-37,72,-76,-29,-80,16,43,-55,-42,51,69,70,-47,80,4,-60,-15,87,-112,92,-109,-107,81,51,-52,33,-113,-4,101,-116,-100,-4,-74,-39,71,54,-31,-62,-36,98,85,99,-102,23,-101,-73,12,2,14,-14,-11,-63,-21,-107,-98,-36,-50,80,59,-117,95,35,-94,86,108,97,-22,-111,-25,-22,-87,32,-53,73,74,-113,-120, -16,-99,-126,-34,-82,-94,-41,-86,67,47,-120,67,-89,79,47,-32,95,-31,60,-52,-92,-109,-48,-56,-36,93,98,-99,-92,-56,-2,-2,10,-91,-120,44,-52,69,29,76,-53,-125,1,-24,-68,104,-111,-10,-108,-45,-32,73,45,-40,-103,93,39,23,-73,-114,53,-48,-55,45,-62,23,-66,-111,90,91,14,78,12,-10,-74,100,54,93,33,-60,-47,32,101,8,19,70,20,-113,-16,34,-75,74,0,-110,61,-33,-48,-89,-36,-114,105,24,14,88,-34,16,33,-90,-116,-14,-61,19,35,58,23,-41,-96,69,-53,-73,-58,-32,-85,-127,-79,-23,20,50,57, 51,-24,97,-11,-57,76,75,-121,-16,-4,6,103,-87,51,-64,-19,-77,-85,-15,25,69,21,-78,-4,66,45,-119,35,-88,99,101,32,-54,-65,30,-83,95,-72,95,28,-38,-108,96,59,-6,86,-26,-77,32,99,-43,-22,-109,30,-30,-117,14,101,-126,-3,107,-113,-62,-73,-26,81,96,-46,-16,-77,84,86,39,87,25,-41,20,-33,31,-68,-10,-4,51,57,108,98,-88,-118,85,1,99,-111,32,65,-8,-12,-32,67,84,-80,-73,-57,69,-55,-33,7,29,81,-120,47,-88,64,-105,-44,-67,-76,10,-22,22,60,59,-27,-47,-10,60,-88,46,45,-14, 
  /* [5][0][][] */ -42,21,-15,47,52,14,-72,8,-15,77,-48,99,13,63,-44,4,-107,28,-9,92,-53,-23,101,-127,-22,-117,15,42,-89,108,-124,98,14,-38,77,13,-30,-71,86,-47,-114,-126,51,62,24,-43,-104,-78,-83,-71,-100,-98,-18,68,-57,-19,-14,-30,104,110,80,-58,50,73,-99,25,-87,78,28,31,-63,-27,-94,47,-76,-29,30,104,-40,-96,86,-95,108,-10,23,20,-24,-44,30,110,74,47,-18,83,-70,42,89,-60,11,-106,75,104,-71,43,-42,-89,91,76,23,-42,14,93,-38,-124,-85,-94,-12,-89,42,106,-11,113,-5,-98,51,99,33,-20,107, -76,32,-96,-52,-119,56,45,101,-126,15,-95,33,13,87,5,-111,60,53,-101,29,-64,24,-6,74,-72,-100,71,-27,-27,83,105,-40,71,-6,-35,56,-50,89,-124,-40,-4,96,16,-38,43,-40,104,-106,-74,72,-50,74,68,-14,-4,101,-125,49,90,-96,23,-21,-71,-73,-41,-95,69,49,99,75,-98,-99,-55,-125,108,-115,-65,-42,-7,-73,14,-16,58,3,85,104,28,79,-93,-71,21,111,-13,-35,16,46,8,2,31,39,108,-79,-87,21,-21,-67,-2,-120,60,101,56,-21,-59,-105,-117,-49,-9,-5,-111,-59,-115,-23,15,106,-98,42,89,23,-23, -50,-79,19,-79,48,-13,-126,109,-6,-82,-61,105,34,-40,-28,36,-125,-19,68,-111,-71,-62,28,-79,28,-59,-3,76,-85,96,71,29,51,58,18,60,110,25,61,-89,51,-24,-124,-11,-117,-123,102,-98,-61,-68,95,98,-2,100,-17,47,44,-26,-102,39,-45,94,-64,37,104,41,97,2,-104,-41,-75,46,-82,25,-42,-40,87,18,-105,66,48,-31,46,46,-44,-9,64,85,-62,68,-124,-32,59,94,10,-88,-115,-6,59,-59,-12,76,12,-40,67,36,-8,98,47,49,-17,43,96,59,-76,-18,-14,83,-53,-48,-115,93,35,-99,-51,-98,-91,77,-23, 
  /* [6][0][][] */ 61,105,-19,22,-34,-49,-68,-90,-120,-121,-81,-4,-64,-50,11,-41,-57,103,16,-14,-53,58,-10,36,-48,-5,112,14,36,-45,0,-109,59,-94,-85,46,-117,76,-81,-69,-52,-99,65,-11,-75,120,66,59,28,44,-49,99,-108,60,97,-52,-64,-88,87,90,-43,-105,-23,-18,-102,124,-18,59,-34,-30,97,87,-93,85,-81,80,116,78,-93,-47,5,-54,-82,-18,-106,-88,-12,-28,111,100,-95,-88,-7,-85,-70,-87,100,-92,33,-41,-17,-118,66,-3,24,-8,-108,-18,-29,75,-48,-11,-22,90,-12,118,-44,-92,-116,26,-14,-118,-33,44,-101,-77,-30,-26,-57, -101,-103,37,2,-8,-62,39,-89,-94,100,-80,15,107,17,-49,-77,66,100,-35,-16,88,-74,8,-40,39,-66,88,-70,25,80,92,63,14,69,-113,-62,-97,108,-62,57,-98,-90,-17,-41,41,114,18,15,-106,20,68,-27,116,103,-48,-54,38,101,-96,109,39,56,-48,63,-67,35,59,-4,-60,121,44,91,56,-59,-82,46,9,-76,-4,-77,0,-62,28,25,82,29,82,96,4,42,25,-39,-81,12,-44,-90,-80,-54,107,115,100,-44,-8,-32,-48,-24,-33,-87,88,11,-81,-51,97,67,45,30,-97,113,32,61,-66,-64,-105,-95,78,126,15,-68,-82, 50,12,120,-94,-47,-51,6,-15,77,88,-106,-80,-65,-40,-11,16,78,0,-43,68,5,17,80,119,-90,57,-59,33,-98,-90,22,-83,79,127,125,112,54,-98,94,64,-53,-100,-53,-63,106,-82,-53,-88,-7,-110,-83,30,-35,-77,104,66,124,-5,-5,90,33,-45,-25,117,7,-96,19,60,-37,-68,-42,-44,-2,-1,58,-111,-1,89,86,65,39,-59,-95,111,89,-100,117,83,-97,46,83,46,55,-37,105,-77,-28,-44,-30,110,42,-40,-79,91,9,-107,94,94,49,17,-38,47,98,84,27,-32,-17,-77,-30,-45,75,55,1,97,21,109,58,-45,67, 
  /* [7][0][][] */ 94,14,68,49,94,44,-70,76,-21,-41,106,-91,79,-86,-23,43,2,119,-29,-1,-23,54,-79,-13,89,-10,6,102,117,101,-26,-50,82,111,14,-58,66,-10,62,-31,-28,28,-40,-23,-75,-60,56,82,20,42,106,-87,57,-8,-89,-45,-75,-25,18,-74,-13,39,68,55,15,-17,-39,76,66,-36,-94,-9,83,51,98,35,41,56,-10,30,35,-27,-39,-37,-57,-30,5,29,-8,55,-2,15,-88,44,41,91,46,91,74,1,-4,79,81,95,-61,125,47,99,-3,77,52,92,-69,-19,-72,37,-84,-55,67,46,-51,-68,66,3,18,-61,64,10,90, 67,-7,92,-96,52,52,-20,57,-70,77,-45,-80,114,-91,-2,-75,89,-63,4,-73,108,-59,19,52,75,89,73,39,95,-14,56,74,35,-85,82,5,43,34,-81,-13,-61,-36,27,-82,-8,-47,-50,-79,-39,20,89,-7,110,-60,-51,1,14,62,55,45,52,-24,-31,127,104,-93,-41,110,123,33,-36,124,-65,86,115,6,77,30,-18,-44,-80,41,124,-77,-86,54,64,27,-25,71,9,91,80,-25,89,21,-8,16,52,-70,37,32,42,30,-66,-9,-71,122,-26,49,-72,-18,-73,-3,89,-61,23,75,-10,-15,-48,-19,97,4,7,105,13,120,-47, 92,-70,0,89,9,57,83,-37,31,-17,122,-63,119,123,49,-76,83,-47,48,31,39,98,34,-90,96,53,-50,109,83,116,-54,29,100,-25,22,25,-45,-24,13,9,53,8,-19,-43,105,116,32,4,2,51,-6,-38,58,58,20,-12,90,-59,-47,-50,-68,15,-4,-15,52,97,15,81,-5,-86,78,17,-9,37,107,-8,77,-61,-60,-37,37,120,-9,-48,36,99,103,24,32,93,84,-25,4,-41,88,32,-52,83,-28,-24,65,47,59,107,45,-84,102,14,120,-56,-26,105,90,11,-63,-41,58,72,74,-51,-44,71,28,-29,114,25,-26,84,81, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,3,129 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00099582329858094454, 0.00099038751795887947, 0.0011780796339735389, 0.0011895317584276199, 0.0010157518554478884, 0.0010084928944706917, 0.0010113155003637075, 0.0010880465852096677, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,62,129 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,62,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.030574025586247444, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,62,1,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.030574025586247444, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,31,1,8 } };
const TfArray<1, float> quant23_scale = { 1, { 0.030574025586247444, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,31,8 } };
const TfArray<1, float> quant24_scale = { 1, { 0.030574025586247444, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,31,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.030560636892914772, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,31,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.030560636892914772, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,16,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.030560636892914772, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,16,16 } };
const TfArray<1, float> quant28_scale = { 1, { 0.030560636892914772, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,16,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.027694365009665489, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,16,1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.027694365009665489, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,8,1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.027694365009665489, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,1,8,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.027694365009665489, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,1,8,64 } };
const TfArray<1, float> quant33_scale = { 1, { 0.018354151397943497, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,8,1,64 } };
const TfArray<1, float> quant34_scale = { 1, { 0.018354151397943497, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,4,1,64 } };
const TfArray<1, float> quant35_scale = { 1, { 0.018354151397943497, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<2, int> tensor_dimension36 = { 2, { 1,256 } };
const TfArray<1, float> quant36_scale = { 1, { 0.018354151397943497, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<2, int> tensor_dimension37 = { 2, { 1,2 } };
const TfArray<1, float> quant37_scale = { 1, { 0.058355227112770081, } };
const TfArray<1, int> quant37_zero = { 1, { 37 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<2, int> tensor_dimension38 = { 2, { 1,2 } };
const TfArray<1, float> quant38_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 20 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 20,19,18 } };
const TfArray<1, int> outputs1 = { 1, { 21 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 21,2 } };
const TfArray<1, int> outputs2 = { 1, { 22 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 22 } };
const TfArray<1, int> outputs3 = { 1, { 23 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 23,3 } };
const TfArray<1, int> outputs4 = { 1, { 24 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 24,17,16 } };
const TfArray<1, int> outputs5 = { 1, { 25 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 25,4 } };
const TfArray<1, int> outputs6 = { 1, { 26 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 26 } };
const TfArray<1, int> outputs7 = { 1, { 27 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 27,5 } };
const TfArray<1, int> outputs8 = { 1, { 28 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 28,15,14 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 29,6 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 30 } };
const TfArray<1, int> outputs11 = { 1, { 31 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 31,7 } };
const TfArray<1, int> outputs12 = { 1, { 32 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 32,13,12 } };
const TfArray<1, int> outputs13 = { 1, { 33 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 33,8 } };
const TfArray<1, int> outputs14 = { 1, { 34 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 34 } };
const TfArray<1, int> outputs15 = { 1, { 35 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 35,9 } };
const TfArray<1, int> outputs16 = { 1, { 36 } };
const TfLiteFullyConnectedParams opdata17 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs17 = { 3, { 36,11,10 } };
const TfArray<1, int> outputs17 = { 1, { 37 } };
const TfLiteSoftmaxParams opdata18 = { 1 };
const TfArray<1, int> inputs18 = { 1, { 37 } };
const TfArray<1, int> outputs18 = { 1, { 38 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8000, (TfLiteIntArray*)&tensor_dimension0, 7998, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 3096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 7998, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9552, (TfLiteIntArray*)&tensor_dimension21, 496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 496, (TfLiteIntArray*)&tensor_dimension23, 248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 496, (TfLiteIntArray*)&tensor_dimension25, 496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 496, (TfLiteIntArray*)&tensor_dimension27, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension29, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension31, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension32, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension33, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension34, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension35, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension37, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension38, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_107_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 39;
  for (size_t i = 0; i < 39; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 19; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 19; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_107_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  38, 
};
TfLiteStatus tflite_learn_107_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_107_invoke() {
  for (size_t i = 0; i < 19; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_107_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
