/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.10.2023 15:09:52

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 38640;
#else
constexpr int kTensorArenaSize = 37616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[19];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,16899 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 131, 129, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 131, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 66, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 66, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 33, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 33, 1, 32, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data7[4] = { 1, 1, 17, 32, };
const TfArray<1, int> tensor_dimension7 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 17, 1, 64, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[2] = { -1, 576, };
const TfArray<1, int> tensor_dimension9 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data10[2] = { -203, 203, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const TfArray<1, float> quant10_scale = { 1, { 9.2218993813730776e-05, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[2*576] = { 
  -21, -60, 41, -48, 7, -25, -58, -44, -41, -56, 28, -3, 24, -25, -11, -12, 19, -20, 10, 10, 19, 19, -7, -23, -37, -39, 39, 32, 17, -55, 14, -33, -46, -38, -61, 44, -46, 44, -15, 35, 28, 32, 1, 44, -18, 5, -73, 40, -42, 23, -42, -44, 31, 12, 11, 5, -30, -42, -42, 25, 1, 31, -39, 92, -47, -26, -40, -39, -12, -22, 44, -25, -26, -46, 23, -19, -38, 29, -89, -23, -54, 31, -28, 26, 1, -36, -53, -14, -34, -45, 52, -62, -31, -23, 21, -48, -24, 15, -63, -33, -21, -36, -68, -67, -52, -15, -66, -4, 0, 30, -9, -127, -3, -14, 41, -60, 22, 28, 32, 37, 8, 4, -68, -54, 38, 41, -59, 11, -63, -29, 46, -22, -43, -45, -9, -45, -6, 19, -42, 25, -10, 20, -49, -1, -13, 33, -4, -6, 18, -22, 30, -13, 6, 24, 21, -50, -40, -37, -36, -70, -46, -46, 26, -27, -64, -63, 35, -10, 18, 5, -57, 20, -34, -50, -27, -78, 32, 5, 29, -18, -26, -33, 5, 35, 46, -39, -55, 5, -22, -80, -20, -1, -37, -30, -32, 45, 50, -23, 25, -4, 12, 23, 9, 5, -11, -17, -77, 32, 26, -5, 47, -12, 4, -16, -41, -31, 39, 46, 45, 31, 41, 32, -3, 6, 39, -9, -1, -43, -33, -33, 35, -36, -70, 30, -45, 15, -35, 12, -26, -57, 16, 39, 10, 6, 27, -9, -24, 10, 41, -41, -14, -33, -8, -55, 15, 7, -17, 18, 23, 35, 28, -9, -25, -59, 22, 8, 4, 43, 53, 48, 37, -15, 29, -35, 24, 21, -8, 31, -18, -43, -20, -7, 15, -3, -18, -4, 21, -12, -21, 47, -25, -24, 30, 20, 4, 36, 41, 52, 40, 19, -43, 39, 58, -40, 6, -7, 33, 49, -26, 1, 30, -38, 30, -8, 6, 32, -36, 11, -26, 26, -39, -19, -1, 31, -8, 33, 1, -58, -14, 36, 48, 13, -2, -2, 37, 32, 11, -43, 65, 54, 27, 24, -56, 53, 22, 10, -44, 60, 24, -6, 17, -53, -18, 28, 47, -18, 56, -34, -14, -3, 17, 50, 52, -16, -35, 7, 41, -40, 10, 17, -4, 4, 43, -9, 13, -37, 58, -6, -34, 17, 51, -37, -9, -47, 37, -16, -38, 44, 44, 9, -9, -31, 17, -26, -22, 39, 21, -28, -30, 40, -21, -18, 11, -35, -15, 47, -9, -15, 8, 28, -33, 14, 51, -28, 43, 3, 35, 11, -22, -15, -43, 20, 17, -4, -44, 57, 53, 8, 15, -32, 1, -13, -14, 78, 35, 55, 45, -40, 4, 6, 1, -14, 52, -36, -26, -18, 57, -40, -10, 45, -9, 42, 70, -21, 34, 20, -6, -9, -10, 59, -5, 15, -53, -29, 42, -35, 29, 29, 64, 41, -17, 37, 34, -40, 43, 35, 74, 11, 36, 9, 13, 72, -20, -25, 65, 6, 19, 38, -34, -28, 32, 38, -44, 28, -2, -4, -46, -25, -5, 38, 65, 51, 71, -8, 51, 7, 31, -35, 59, -36, 4, -59, 81, 0, -40, -11, 27, 8, 4, -75, 32, -1, -6, 70, -5, -13, 48, 5, 59, -18, 55, 59, -14, 33, 20, -24, 63, 24, 39, 74, 16, -13, -54, -39, 39, -19, 61, -63, -8, 88, 3, 28, 30, 36, 33, -39, -72, -38, 45, -40, -3, -98, 3, -36, -18, 2, 42, 27, 10, -7, 35, 17, 41, 67, 58, 3, 
  -37, 4, 22, -14, -8, 28, 36, 26, -7, -29, 16, 39, -34, 43, -18, 67, -4, -37, -39, -19, 34, -13, 43, -11, -17, -27, -26, 25, 41, 32, 16, -32, 5, -36, -30, -54, 35, -11, 27, 20, -27, 7, 53, 38, 64, -45, 1, -22, 1, -31, 25, 61, 39, 37, 59, 11, 19, 57, 48, 1, 32, -38, 55, -16, -6, 19, 12, -6, 42, 63, -68, 32, -35, 24, 15, 55, -14, -29, -7, 64, 16, -48, -32, 41, -25, 30, -16, -34, 31, -1, -20, -28, 35, -4, 29, 63, 24, 46, -26, -10, -2, -27, 24, -4, -7, 51, 12, -23, 51, -39, 14, 67, 38, -20, -16, -10, -9, -14, 4, 56, 59, 43, -10, 30, -3, -42, -6, -14, 40, 31, -38, 63, 61, -27, 73, -17, 39, 25, 62, -5, -30, 10, 48, 32, 60, -19, -12, 11, -27, 30, 9, 0, 67, 49, 22, 5, 49, 7, -13, 56, 55, 67, 20, 12, 34, 58, -28, 62, -12, -5, -14, -24, 13, -3, 32, 50, 32, -40, -10, 44, 39, -6, 14, 7, -44, 15, -44, 17, -18, 86, 13, 38, -18, -46, -26, 13, -2, -21, 10, -12, -48, 36, -22, 34, 31, -51, 61, -24, -27, -20, 29, -35, -52, -1, 62, 19, -7, -39, 9, -43, -33, -28, -29, 62, -18, 22, -17, 28, 51, -9, 19, 51, 65, 45, 44, -43, 30, 44, 29, -10, -41, -31, 44, 28, 20, 4, -63, 29, -14, 31, 3, 47, 30, 8, 50, 51, -40, -65, -48, 21, -56, 31, 56, 32, 10, 13, -53, -32, 33, -18, -31, -6, -59, -4, 29, 31, -48, -3, 60, -32, 7, 35, -52, 4, 19, -56, -61, -3, -5, -35, 4, 8, 2, -11, -9, -8, 14, 13, 4, 54, -26, -39, -14, -12, -39, 25, -28, -41, -49, -22, 43, 23, 43, -40, 33, 47, -8, 50, -52, -6, -56, 19, -7, -59, 33, -58, 26, 55, 27, 13, -23, -57, 2, 18, 4, -36, 5, 11, -14, -34, -49, 31, 3, 30, 18, -4, -6, 4, -40, -24, -57, 70, -5, -25, -34, -44, 15, 25, 24, 2, -7, -49, -26, -8, -3, 44, -43, 10, 6, 18, -22, -35, -18, -46, -43, -46, -39, -19, -4, 45, -55, -46, 36, -38, 6, -18, -61, -55, 33, 42, 61, -2, 13, -53, -59, 20, 37, -71, 24, -36, -29, 18, 21, -21, 17, 20, -1, -71, -37, 18, 27, -59, 16, -37, -8, -18, -39, 22, -29, -58, -17, -62, -47, -31, -50, 9, -25, -24, 53, 32, 1, 34, -43, -62, -19, -60, -21, 5, 32, -42, -1, 4, 42, -37, -2, 9, 28, -2, 19, -10, -58, -52, 2, 22, 43, 47, -48, 10, -24, -60, -69, -38, 4, -39, -20, -8, -36, -46, -55, 8, 77, -9, -14, 22, 42, -43, 17, -71, -25, 10, 19, -37, -43, 17, -6, 18, -19, -7, -68, 16, -59, -21, 39, -20, -76, 74, -51, -23, -14, -57, -58, 48, -72, 2, -5, -68, -55, -23, -48, 27, -9, -4, -85, -40, -19, 0, -62, 68, 23, 50, 0, -73, -40, -1, 9, 39, -15, -24, -63, 27, -44, -27, -22, -20, 62, -31, -50, 34, 27, -14, -26, -17, 11, 54, -11, 10, -64, 19, 6, -93, -57, -50, -76, 0, -16, -13, 20, -9, -9, 6, -31, 75, -4, 11, -18, 10, -23, 13, 43, -17, -4, -64, 36, -42, -70, -54, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 2,576 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0019269766053184867, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[64] = { -487, 137, -335, 0, -114, 664, 369, 573, -248, -179, 194, -115, -653, 424, -121, 96, -352, -438, 188, -70, 235, 121, 641, -481, -410, -302, -363, -134, 246, -22, 123, 698, 370, -188, 199, 425, 437, 352, -27, -259, 20, -1, -202, -683, 530, -391, -165, 514, -139, -32, -62, 36, 503, -260, 333, -371, 316, 408, 431, -419, -50, -149, 155, -421, };
const TfArray<1, int> tensor_dimension12 = { 1, { 64 } };
const TfArray<64, float> quant12_scale = { 64, { 4.4523836550069973e-05, 4.9571321142138913e-05, 4.2192492401227355e-05, 5.4011314205126837e-05, 4.6644607209600508e-05, 3.4264696296304464e-05, 7.0311063609551638e-05, 4.3204749090364203e-05, 3.2052932510850951e-05, 5.3939278586767614e-05, 3.1650692108087242e-05, 3.5567507438827306e-05, 3.7468882510438561e-05, 4.4793127017328516e-05, 4.6718640078324825e-05, 3.8322257751133293e-05, 3.8861417124280706e-05, 3.3190055546583608e-05, 3.5252931411378086e-05, 3.7286725273588672e-05, 4.3512045522220433e-05, 4.3466672650538385e-05, 4.565411654766649e-05, 3.3360007364535704e-05, 4.5113825763110071e-05, 3.4473923733457923e-05, 3.3292304578935727e-05, 3.7970421544741839e-05, 3.561104676919058e-05, 3.6346984416013584e-05, 3.9639919123146683e-05, 4.9980568292085081e-05, 4.5609380322275683e-05, 4.1359893657499924e-05, 3.9716549508739263e-05, 5.6158129154937342e-05, 3.6095185350859538e-05, 4.0807077311910689e-05, 4.1956202039727941e-05, 5.613945540972054e-05, 4.1357154259458184e-05, 3.1670504540670663e-05, 4.1937266360037029e-05, 3.42504536092747e-05, 4.8673646233510226e-05, 4.1636751120677218e-05, 4.3518983147805557e-05, 7.0762915129307657e-05, 3.0923460144549608e-05, 4.9522543122293428e-05, 3.807490793406032e-05, 3.9120241126511246e-05, 3.8942453102208674e-05, 3.2564494176767766e-05, 3.7101712223375216e-05, 3.1409854273078963e-05, 7.1271082560997456e-05, 3.6530389479594305e-05, 3.7498924939427525e-05, 5.1536277169361711e-05, 3.8146852602949366e-05, 4.7307825298048556e-05, 4.9389502237318084e-05, 4.2394134652568027e-05, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[64*1*3*32] = { 
  /* [0][0][][] */ -9,-45,75,127,31,71,87,-19,-26,2,84,37,-57,-22,-94,55,72,-18,-13,95,-17,-59,39,-41,117,-38,8,88,54,81,1,107, 63,47,-18,23,17,79,12,-79,13,-35,84,-93,-66,-41,-17,113,9,64,74,15,62,27,48,-2,117,16,67,-75,-107,-26,-48,65, 71,-53,-72,-88,24,38,-86,22,-67,56,53,65,31,-82,4,21,41,-63,38,-71,43,-4,-73,32,42,-34,56,34,-65,-7,9,25, 
  /* [1][0][][] */ -48,-127,-9,17,74,-38,-65,-46,-85,-40,6,-25,89,23,-4,-42,-41,-42,5,33,-54,64,73,3,18,65,-25,39,46,38,26,40, 72,-68,79,-13,2,87,71,-17,38,10,20,-53,12,-20,43,55,-44,0,-18,25,-14,-35,2,68,56,-48,20,-46,-3,-29,-27,80, -29,69,-26,4,2,86,87,54,81,-1,-2,63,29,-47,-17,-4,107,-56,70,85,1,45,-30,13,77,-48,30,90,-5,53,68,-36, 
  /* [2][0][][] */ -32,36,-8,-71,-37,-44,-23,56,-63,90,-83,58,47,-5,29,-23,-60,-15,-73,-53,19,50,-63,-53,-12,81,50,-10,59,91,59,-45, 18,-101,-77,-86,28,31,-21,-26,-94,97,34,30,-76,2,-55,-88,-1,-21,-51,-70,0,-49,-59,-8,100,-7,13,36,-19,-13,15,9, 99,-49,-9,41,49,-21,40,-4,-50,-45,-90,44,68,12,82,-47,-108,5,-41,-32,31,41,75,74,66,127,-27,-59,79,-96,44,-98, 
  /* [3][0][][] */ -58,-71,50,-49,22,-40,21,1,-61,28,-2,-29,-56,8,60,3,-29,6,-23,70,25,-42,27,15,-39,-33,51,-6,40,16,41,-50, -45,-57,87,-16,7,-18,-17,-25,-11,90,41,-66,-9,14,-5,-47,59,-23,89,-20,-75,87,-13,66,-51,4,68,56,49,-1,72,-37, 84,64,84,104,127,-44,35,46,24,9,30,40,44,-42,21,96,39,63,-27,51,25,59,89,-4,86,14,96,-27,-25,-45,0,48, 
  /* [4][0][][] */ -37,21,35,24,-57,-50,-54,71,45,-5,24,-15,19,69,55,-24,55,74,-7,18,57,67,-15,-42,10,53,15,-11,-5,-57,99,104, -23,18,99,-51,127,89,-42,-29,-25,74,45,11,-91,-40,58,-3,78,9,56,60,98,13,16,51,98,1,40,-69,-70,53,-84,25, -77,-3,65,39,104,-41,69,-9,20,-62,30,-30,-20,41,79,92,-77,63,69,77,97,14,32,-67,92,42,-49,-96,23,-19,80,2, 
  /* [5][0][][] */ -116,92,3,-92,-102,-70,44,61,78,-121,-3,-18,-33,-81,-44,-113,25,51,4,-65,10,-46,82,-68,61,-37,25,25,58,-76,50,-83, -119,7,53,127,-28,7,61,-53,108,-61,-26,-106,-25,78,32,74,87,-81,90,119,-2,-45,18,53,7,-32,10,72,17,19,89,111, -111,91,-75,44,-92,-37,23,17,96,-115,84,-29,31,68,-56,-29,6,40,50,58,-91,-49,111,79,-21,96,103,102,-69,75,64,27, 
  /* [6][0][][] */ -22,31,-11,-14,32,-32,45,57,22,15,-41,12,73,-32,49,26,53,-39,-52,-26,60,-4,40,-16,-47,41,10,-27,-51,47,-49,-17, -13,127,-12,38,-52,-3,3,-46,21,22,-17,41,45,15,-28,58,-28,-47,3,4,34,35,-56,63,-32,-49,-46,-49,-15,31,6,23, 38,90,46,41,-42,24,4,-12,34,-28,-46,-33,32,23,12,-21,-16,-16,16,15,-33,63,65,26,-6,-8,8,-43,44,43,-29,-24, 
  /* [7][0][][] */ -75,127,55,-5,94,-83,62,-82,84,4,-2,-34,-51,-95,9,23,76,-2,-66,-19,-56,-48,-21,15,78,115,0,6,-25,-21,-67,-2, -75,108,33,-52,-44,-5,-87,53,-59,-88,57,81,18,-30,-21,-37,61,11,73,24,13,44,-16,-18,-4,-41,-42,-48,82,63,83,-4, -58,46,71,76,7,3,79,-57,-41,50,-82,-85,76,54,-30,19,-2,50,68,-59,32,13,6,-3,72,70,-88,70,23,82,20,42, 
  /* [8][0][][] */ -116,-102,121,70,57,64,-8,13,-8,-127,-117,-99,87,0,19,-109,35,-14,110,70,54,-114,-96,-62,35,27,-102,-59,119,110,-21,34, -119,-13,80,2,-78,-39,92,-96,-27,-31,-74,-99,51,-28,91,0,-116,-37,79,-99,-8,-104,-13,-62,-10,-91,59,-50,-33,-72,-29,-61, -49,109,-48,-79,82,-119,-45,20,-11,-9,83,-41,-20,-19,-60,-18,86,39,-66,9,7,-25,72,-88,91,43,-60,-120,-101,96,79,-26, 
  /* [9][0][][] */ -34,48,-21,88,46,53,32,-51,2,-39,59,-13,20,46,-45,92,91,23,35,28,12,42,2,-7,-32,34,-13,41,3,-31,54,63, -6,67,27,-12,99,-60,6,70,-57,44,-19,50,-80,10,14,37,-48,-22,30,77,71,-54,-39,42,-19,-1,74,-32,2,32,58,-31, 39,61,-53,-13,29,39,31,46,23,-34,-21,70,25,52,-5,62,-1,25,-56,36,-55,39,52,-81,-12,-127,69,-58,42,22,31,-52, 
  /* [10][0][][] */ 98,-18,-36,73,89,81,43,-35,67,-53,-78,21,-41,92,20,-124,89,8,15,-71,55,63,-49,-71,50,-54,122,-102,38,-34,78,-17, 9,86,59,-97,32,-72,78,66,31,-111,61,72,-47,44,43,51,67,95,73,-49,-30,-104,0,-37,61,105,47,25,82,-38,-20,-110, -64,-127,90,113,74,-85,-25,-95,-70,97,-112,-19,-95,18,113,68,25,70,85,38,-87,37,57,90,-101,-16,109,20,-46,-77,49,41, 
  /* [11][0][][] */ 82,-125,-93,-18,28,99,25,-58,22,50,-95,-32,-78,63,-53,115,-12,-89,107,-78,-82,71,-11,116,-6,29,-10,90,-41,-19,28,71, 31,-95,42,118,98,114,-10,8,37,67,78,-88,87,-39,-57,39,-70,-98,-60,78,58,107,60,125,45,54,112,51,97,-82,-28,-94, 67,-29,24,-67,7,29,91,-54,65,-85,-76,16,-52,78,-37,-72,-88,105,79,-55,-83,53,-71,127,-55,9,102,94,102,19,116,125, 
  /* [12][0][][] */ 56,56,92,-91,-1,6,55,-89,-17,83,43,62,-101,72,48,-8,-60,-2,-33,-87,-70,67,37,-104,-105,-74,75,83,53,-21,22,19, 2,-5,-59,45,-67,-16,-100,-44,-113,-11,70,82,49,59,34,48,-114,65,-69,18,90,4,-58,-61,-89,57,-127,76,7,-58,-57,69, -59,-2,45,33,69,-15,36,-43,-38,-1,46,-29,-61,20,-14,-101,-63,-31,6,32,-109,49,-125,98,89,-11,-119,42,-51,37,53,-111, 
  /* [13][0][][] */ -27,-127,5,-61,4,-18,-59,71,-71,-52,-81,77,-125,-69,15,-48,58,-5,53,-54,82,-45,64,-5,-67,90,-86,25,65,33,-3,39, 7,-97,55,36,40,76,-84,0,63,32,18,-53,-23,23,-79,75,-36,69,42,58,-44,95,-104,76,68,73,-70,-62,82,7,109,-69, -11,-1,-41,2,40,44,-20,70,38,44,-19,11,-85,50,-45,9,-15,9,-77,63,-31,93,-92,-74,90,87,85,95,77,-44,59,-76, 
  /* [14][0][][] */ -40,12,31,50,-7,-10,-34,-25,121,94,-38,71,12,-54,28,60,70,-57,30,65,-22,58,57,-30,120,55,46,8,12,10,-38,122, 19,-16,-11,20,96,-62,16,-54,70,49,3,41,127,74,75,-54,8,-120,-73,29,-57,3,-6,-2,-12,-38,-27,-84,-9,32,-37,-14, -21,57,9,-22,-51,-51,12,74,19,-103,-1,-70,36,35,0,22,11,11,-68,-90,25,21,-89,-107,39,37,20,20,-15,6,-1,-80, 
  /* [15][0][][] */ -26,7,-79,-12,-96,-92,-41,-84,10,105,78,-2,21,73,-12,47,-68,-101,9,102,-46,113,-71,31,-93,-101,102,101,-82,11,-69,-76, 34,-93,-36,68,-36,75,90,65,-63,47,-5,90,-18,113,54,121,85,45,0,25,41,85,102,-17,101,29,-24,-45,127,42,51,41, 76,48,-24,45,18,-47,101,11,41,-13,25,-51,-83,-54,26,123,34,-110,-62,110,-36,-53,-9,79,-14,-14,50,107,95,5,-35,62, 
  /* [16][0][][] */ 99,-96,-15,93,-53,-61,-29,-91,103,40,58,-74,-6,5,19,-55,-15,66,-51,56,-86,22,5,30,85,21,-35,30,-40,103,48,111, -54,-48,6,-34,26,31,7,62,57,122,-37,-18,-97,45,-2,-35,86,-47,-11,-5,2,-81,112,103,127,53,16,-16,67,10,-41,75, 101,-28,105,55,22,22,63,13,88,3,10,-37,28,70,9,-57,61,6,-62,37,99,-90,41,47,28,-1,-21,-21,116,66,74,-82, 
  /* [17][0][][] */ -59,-5,5,8,59,-35,-28,-16,18,-103,43,64,-55,10,-92,-91,86,87,111,-70,76,-96,-47,-2,-70,-34,25,62,-16,38,90,-101, 4,109,47,-107,29,41,81,-97,94,39,5,-37,-80,-38,-44,-26,18,64,-38,45,11,7,103,22,-42,56,26,-127,45,-8,-47,29, 82,6,-68,-113,105,79,-38,81,45,-73,-117,57,13,-33,93,83,-24,-48,97,38,84,-43,-44,52,-85,-29,8,-70,93,28,-15,-101, 
  /* [18][0][][] */ -94,-103,93,-27,-118,107,79,99,-68,-87,43,48,-5,93,24,101,-84,-44,-28,-90,-3,70,-127,74,8,24,39,54,-104,81,66,-36, -14,-17,-1,82,89,-67,-33,-8,67,23,53,71,-94,110,-22,110,-97,-102,19,-50,-104,3,27,-62,89,-47,126,-75,-2,-113,98,-55, -2,-51,-78,-74,74,-5,-61,-2,-86,-56,-15,14,4,-18,-117,-72,-123,-94,-55,85,87,-105,6,23,108,125,65,-97,61,75,40,-10, 
  /* [19][0][][] */ -52,65,81,71,11,74,12,0,-58,97,-37,-33,-86,7,90,15,-101,7,-102,72,-58,43,-4,43,-58,-103,38,98,-103,-102,-60,57, 99,82,104,39,-67,85,61,21,-52,70,-12,65,-127,-75,33,-62,74,43,-50,-17,42,92,73,20,75,-16,-78,22,-62,-82,7,-35, 45,51,98,3,23,-93,-13,15,-71,-5,38,65,-49,-25,-59,13,-83,42,62,41,-32,-49,-2,-47,24,7,-24,74,-3,-7,76,49, 
  /* [20][0][][] */ 55,-1,-37,59,-85,-25,-89,15,56,-1,-49,-63,33,-33,-37,-13,-81,111,-9,31,6,12,-57,25,-17,99,86,39,-67,13,7,-73, 18,-98,53,-56,9,80,-43,42,-87,6,-36,-77,-26,20,-11,-2,65,60,29,41,-43,85,-76,88,-36,49,21,1,39,25,23,-76, 66,51,-41,36,-4,-23,-81,19,-32,63,-44,-27,-104,-25,-35,40,-38,127,26,-71,88,-61,0,61,22,-17,65,36,-84,63,-51,14, 
  /* [21][0][][] */ 3,-19,-18,31,60,84,59,-58,25,70,104,0,-15,-53,17,127,78,-63,37,-34,20,27,-29,47,70,-37,-55,-30,-32,-54,52,108, 61,-59,94,95,-22,-58,23,-49,105,-23,-78,79,-79,-20,57,-21,8,28,96,89,-41,89,26,92,-2,-41,3,-60,-16,-62,12,76, -53,26,88,45,67,42,23,67,-44,28,62,85,-16,-40,5,-56,102,-36,111,88,-36,77,29,-44,-30,-103,-37,22,29,-17,94,-9, 
  /* [22][0][][] */ 17,50,97,21,56,1,-51,-38,88,4,-46,-63,-4,53,28,19,52,49,-39,-60,103,5,-8,-57,103,55,-44,47,-104,21,68,41, 45,127,15,-34,-69,-65,-60,43,31,11,21,-85,100,-82,-43,-8,-12,-108,-67,-46,-84,69,21,78,-72,122,-24,74,-64,-53,-54,47, -56,82,-73,-44,-102,34,36,61,-69,5,-50,-40,102,24,-47,-34,80,-19,-33,-53,-108,-31,51,-74,42,57,-58,-85,11,-19,49,-35, 
  /* [23][0][][] */ 27,-42,-78,14,119,17,-5,-96,59,31,23,-90,69,6,10,97,-32,-30,110,42,24,27,105,108,-86,-21,-14,-53,-12,61,-103,99, 42,-73,-51,50,-36,-37,41,126,1,-13,11,27,87,8,76,-88,-81,22,-70,-18,9,86,-15,99,80,102,-127,-54,-92,21,109,-92, -51,59,-66,-23,-61,103,-8,100,93,4,-76,-78,97,96,-55,34,-27,111,-1,10,47,-55,34,-92,-42,-4,-15,55,93,50,73,-8, 
  /* [24][0][][] */ 74,-49,-1,-36,-10,33,2,-84,19,97,101,-1,39,-1,57,-42,48,-96,7,104,53,74,-19,90,68,76,22,-46,87,73,-19,-51, 84,0,-8,127,44,-32,26,1,13,8,-4,-12,-110,12,-26,-38,22,11,103,-6,-19,12,26,89,93,55,18,53,13,7,23,50, -23,77,42,3,118,-46,47,-12,73,71,-51,-11,-40,65,-1,64,-26,-48,4,68,108,15,-1,-33,69,-13,-18,-3,1,78,-58,49, 
  /* [25][0][][] */ -100,27,80,-72,-21,2,15,16,-42,15,45,106,19,-108,-45,101,-34,28,-118,-118,26,104,-83,39,-111,54,93,100,2,21,43,-82, 96,-57,-127,-70,109,49,25,-6,-36,-104,-11,-94,-83,-47,-63,-54,24,29,77,95,-104,-33,-100,113,-4,0,99,-50,109,-69,42,57, -30,57,16,102,-19,36,-8,115,78,105,-108,11,-78,-46,23,117,16,-5,41,40,-61,-104,-87,-81,27,15,34,25,-80,-69,-29,84, 
  /* [26][0][][] */ 28,-115,-48,107,70,-15,-28,-50,-93,-85,6,88,1,-87,-122,112,85,6,-53,-22,-115,-74,-48,-38,-4,-45,-8,-93,106,-70,-95,66, -36,75,38,-55,-88,-51,-4,118,-76,57,96,34,-37,-102,87,-116,-57,-37,3,40,41,-127,-62,-106,5,-15,-19,42,-36,-48,97,83, 28,98,42,42,-79,-3,26,42,-25,9,-58,-114,-63,101,13,-73,-112,-1,57,-50,-92,86,53,-71,-77,64,36,7,-80,-70,49,-19, 
  /* [27][0][][] */ 50,-60,-23,-3,47,59,-55,-50,-20,1,93,-16,-127,-28,75,-55,3,38,-88,-42,38,-4,14,-74,16,63,18,18,65,-52,56,102, 110,57,33,41,41,88,39,84,-37,83,53,-46,57,54,-88,68,-74,86,-6,50,-75,-37,-44,76,108,-45,114,88,4,31,89,-82, 105,77,106,-68,58,24,-19,63,89,-32,60,74,73,73,-102,-14,79,75,38,-10,76,-59,45,87,-27,13,48,48,-39,-89,86,-81, 
  /* [28][0][][] */ 82,61,-93,-50,70,-80,-52,42,-19,32,-14,-96,-127,85,-33,108,115,-39,-66,-27,74,17,53,-65,46,84,-70,-77,56,-104,44,-72, -2,10,-6,30,-57,-80,34,24,118,11,48,-9,-88,102,107,-34,-57,-24,-57,127,40,25,-70,58,100,29,-39,119,13,28,-87,30, 80,14,-25,-80,105,89,46,70,94,97,-3,-87,76,97,38,-18,-43,92,88,20,-69,-40,3,33,10,-14,115,-15,93,-62,19,102, 
  /* [29][0][][] */ -74,9,-21,-105,49,-5,-27,-79,-61,-53,37,77,-21,32,-87,26,-89,-5,-44,63,-84,59,9,107,81,41,79,-11,80,-17,-34,12, 122,-117,37,91,-13,48,49,-92,48,20,-2,18,-110,-31,21,68,-33,-92,72,-76,-70,59,101,-62,-12,-56,-2,33,27,46,62,38, 125,85,9,35,7,89,-57,103,-67,-8,39,-98,8,-3,-80,-9,23,-64,127,-25,61,43,-27,48,70,71,-43,47,-2,52,-35,-53, 
  /* [30][0][][] */ -64,-89,13,-104,32,66,-66,-60,-44,-18,93,41,-78,23,-33,58,88,55,22,93,-102,-76,28,-49,31,-49,34,-25,-16,83,17,-97, -45,-2,-98,-107,20,67,-68,-19,-104,15,-36,-71,-118,-94,25,78,14,97,-65,57,23,-80,85,54,97,37,-34,64,-31,-19,73,-55, 70,27,80,-49,-6,4,-64,54,47,39,98,-35,-7,100,-23,74,41,4,70,76,-85,100,87,105,-20,127,90,-52,-50,-75,103,-1, 
  /* [31][0][][] */ 40,78,36,0,89,54,-70,-58,61,-6,40,2,-27,-49,84,34,66,-91,69,-67,49,-2,34,-46,-21,71,103,86,15,73,-28,-61, 28,90,-85,-49,-89,-41,73,-16,-9,-49,15,-42,75,57,-76,-23,3,-30,-75,-61,12,-56,-18,-4,-8,127,-15,-72,-49,65,53,-74, 33,93,-1,-23,14,-71,71,-8,20,87,-9,-16,-40,-56,-39,-5,35,-57,-39,16,-71,-20,48,27,-51,92,20,-78,-52,-37,-78,-15, 
  /* [32][0][][] */ -33,19,-30,-58,70,-59,9,83,-50,-58,74,21,72,-72,60,51,97,-40,-72,16,14,-40,-9,63,-70,47,-6,-15,-42,24,25,-3, 76,26,31,18,127,-23,71,-79,63,94,42,-44,24,45,-3,-34,-58,-23,22,4,85,57,48,16,76,10,-35,-48,12,16,-33,63, 44,-59,63,-46,32,-24,-2,68,-57,12,82,7,67,85,-78,-33,8,41,90,-34,13,53,87,-88,17,29,84,-1,32,12,-10,-1, 
  /* [33][0][][] */ 37,-61,-74,115,127,-57,42,-11,59,-5,-50,-54,-66,-69,-38,83,-29,46,103,-18,119,-72,28,-74,30,80,108,31,20,59,-27,-27, 13,76,-15,-82,-91,93,92,-43,-45,104,-47,65,-103,73,-74,-24,-26,57,-47,42,-117,-57,26,8,33,-75,-26,109,82,-50,-84,125, 67,-49,-7,92,12,35,-6,62,107,74,-10,67,23,54,-3,87,112,-96,99,125,5,9,-23,-36,106,32,116,56,-66,56,-1,4, 
  /* [34][0][][] */ 11,14,16,25,68,-59,-44,89,-10,-29,62,36,-85,24,-86,-68,-94,-45,-83,-45,-7,8,-28,31,58,-51,32,-43,78,63,-44,9, 79,34,-54,127,79,62,90,-4,33,48,96,74,24,71,107,110,56,-6,-48,49,-37,105,-57,-22,63,-92,106,63,-49,-35,-9,83, -94,8,31,54,-62,58,44,-107,-87,79,109,83,-14,-61,-48,80,32,-65,-31,-30,45,-53,47,-61,-88,-61,-66,8,53,-8,89,11, 
  /* [35][0][][] */ 31,-22,65,20,67,28,59,21,62,5,-13,0,31,25,48,76,63,48,-61,46,-11,24,-48,-38,-47,-26,29,19,-30,-9,40,-4, -8,106,16,21,65,-54,-29,-45,-31,-38,-49,22,-15,-59,46,-18,43,-4,41,-29,-71,66,-55,-10,-55,-29,8,-48,5,-52,49,68, 5,127,65,-15,65,44,63,53,48,-16,-65,-21,-40,-26,-33,48,18,48,-66,-27,-18,66,41,50,61,99,8,4,58,38,-52,-54, 
  /* [36][0][][] */ 84,118,-72,64,-39,109,36,60,74,27,-24,72,80,63,-74,82,86,-36,58,-64,-47,-93,-65,-95,72,91,-4,-75,87,109,65,63, 51,59,108,24,80,82,63,24,101,98,-81,-85,-73,-19,-42,-78,-55,-20,-1,-49,-29,-17,-61,84,106,-36,-96,39,49,-88,-96,83, 35,127,32,68,94,-65,19,54,11,66,59,76,58,-25,9,-21,69,-107,-10,13,123,-58,27,-23,66,-91,-56,-63,-93,85,37,-88, 
  /* [37][0][][] */ 40,87,-3,11,-94,127,-22,75,115,53,123,-78,5,65,63,57,-37,-105,74,-44,-18,49,89,-42,32,-97,50,89,-15,-58,73,-25, -96,-55,-23,103,116,71,-81,58,-50,-53,125,-69,-83,105,29,84,-34,29,-77,-19,-65,31,33,-24,27,-24,36,-83,-117,-5,-78,58, -9,-36,-18,-89,54,-108,-45,-72,70,63,-73,53,-46,-71,-46,80,-42,-1,-61,77,-121,-7,-32,64,51,-109,-82,-26,27,-82,70,13, 
  /* [38][0][][] */ -47,-31,23,59,-114,-40,67,-18,-73,21,-44,-76,44,89,86,-25,38,32,-41,-56,25,-70,5,1,-88,-51,86,-25,91,-5,25,55, 80,-74,-6,-68,-58,44,84,-52,-7,-58,-16,37,28,26,75,18,29,-80,95,-52,-18,38,17,90,62,-127,-92,21,13,18,-71,30, -62,-91,-29,86,56,96,15,-12,-72,-29,-21,32,38,58,96,65,108,61,67,116,56,-11,-30,-66,-72,23,-43,0,46,37,13,109, 
  /* [39][0][][] */ 90,2,63,77,29,10,54,50,93,100,13,60,-5,-9,-18,93,103,0,-11,15,33,56,12,93,13,31,65,-2,-4,-30,7,99, 4,-4,91,-2,82,83,34,-13,-7,-29,59,22,51,-23,46,46,88,-79,-33,33,-18,36,18,-40,13,-103,90,17,-4,60,-15,94, -45,-3,58,37,39,-25,43,-69,20,-50,-21,34,-48,-43,-28,-41,57,-127,-13,-33,-37,38,78,43,79,-42,-42,60,13,47,73,53, 
  /* [40][0][][] */ 127,32,23,29,-54,-23,92,-81,103,78,-13,37,-83,105,-21,30,71,-93,4,95,-96,-1,49,-63,78,-70,58,2,-53,-5,-48,-23, -42,-50,-31,14,77,29,-58,67,21,46,-1,-86,-55,93,78,84,21,-100,90,61,-67,52,-58,-78,65,-28,18,26,38,-75,-25,29, -87,11,-30,66,46,-58,-55,-63,31,-31,-68,86,18,-74,-21,-42,30,-108,56,-19,-4,65,-41,84,83,-9,20,-86,-2,-89,-114,-4, 
  /* [41][0][][] */ 29,71,-33,-76,117,23,104,55,127,-112,-1,14,85,-50,-4,-117,46,4,31,106,60,-4,66,92,127,64,57,-11,36,-41,-57,-57, -116,28,126,88,9,25,111,-55,51,113,90,-34,-83,58,-103,11,112,50,-68,36,86,-72,62,76,-96,-90,-69,-6,84,107,100,-106, -12,-55,-44,77,33,-32,29,55,-60,105,-39,-56,-9,87,-79,-106,64,-13,73,83,82,-69,6,-82,-115,-70,113,-15,-34,48,45,-97, 
  /* [42][0][][] */ 27,-70,90,-9,-41,-42,60,40,-73,59,21,51,15,85,-70,119,83,4,45,-61,-51,-15,-49,40,-65,-81,107,108,-59,-67,-63,95, 23,-50,86,59,-48,74,28,45,7,79,24,-64,35,-75,106,13,-14,44,79,64,47,-12,-25,-14,-16,19,-42,-71,-27,57,-43,-20, -59,4,-21,117,18,40,113,95,-53,96,22,5,-44,31,56,-25,127,-28,119,-28,96,-26,20,109,-20,-101,115,-43,-13,25,70,21, 
  /* [43][0][][] */ -38,80,46,-70,-48,-113,21,101,50,23,-104,53,-75,68,-103,-72,-65,-72,30,23,106,35,7,-80,-37,-41,-73,15,95,98,-56,-7, -99,27,-71,29,48,6,2,15,-16,77,39,-8,-127,-1,-114,-89,58,2,-121,29,-120,75,-82,90,56,59,88,-37,-105,15,-69,-58, -31,95,-23,-1,-84,-67,94,74,-88,-85,-90,-45,22,-112,-65,53,44,-45,-6,32,-42,-20,-77,109,13,77,-116,-60,54,-51,28,29, 
  /* [44][0][][] */ 66,127,32,-77,12,-24,-26,19,11,57,-74,-60,48,-64,5,-44,86,-78,27,-76,3,-10,47,-51,-27,105,-55,63,67,-9,-89,-84, -7,102,-17,32,-46,-67,13,-59,-62,28,-70,10,19,66,36,11,-8,78,22,78,-23,26,14,-34,28,71,-56,-62,35,-14,69,-47, -73,64,65,84,83,73,87,85,65,-60,64,70,93,19,17,88,54,63,-64,-73,28,-21,84,61,-44,-77,-4,53,-44,-3,67,14, 
  /* [45][0][][] */ 25,-97,-13,-37,-70,76,70,97,9,-32,-87,-68,-58,-50,-38,-46,-75,-50,-94,-28,68,-92,91,30,-21,-2,53,13,91,76,31,88, 40,8,58,-57,74,-66,-97,57,66,-49,-75,66,-48,46,8,-33,-54,-29,59,-28,-18,-5,38,-40,-55,61,-91,-97,52,-44,24,19, -33,6,-93,9,-77,39,65,7,81,76,1,41,-23,2,6,26,-104,43,-94,46,2,43,-79,-18,35,127,11,77,-15,33,-99,-105, 
  /* [46][0][][] */ 67,-46,-49,-3,-25,96,52,-21,7,-38,27,5,27,79,-12,-11,59,43,-25,-33,19,-64,-41,-21,63,-35,85,-52,14,-11,72,26, -64,-5,62,98,25,63,116,-71,-10,96,104,64,-78,-71,-2,18,87,36,71,75,-4,-15,95,20,-5,-17,-37,29,-62,-55,-48,39, 66,79,108,127,47,93,51,75,76,-55,116,-31,52,35,59,121,120,-39,87,9,84,110,-17,-20,50,67,85,69,-9,-39,-8,-22, 
  /* [47][0][][] */ 28,-26,72,-13,18,-17,62,-45,77,41,-4,28,3,-32,48,-29,29,-19,-45,2,52,-20,58,25,-28,56,29,-8,-56,10,-27,41, 21,127,-53,-10,12,-12,-17,62,55,43,-24,30,28,-57,4,25,-27,-47,-9,-32,-57,-55,-18,-51,-13,127,1,27,-22,53,-28,16, 61,125,64,-26,28,-56,19,13,-15,-31,32,13,-23,-36,-17,24,1,-33,14,-27,42,32,-1,58,-44,97,26,-40,-57,-21,-34,-56, 
  /* [48][0][][] */ -71,108,-76,-38,-63,-37,-66,-7,78,-118,47,-12,32,-103,-75,75,-36,-25,-24,-59,-22,-86,-16,-27,2,-31,80,-11,85,32,-46,12, 38,-126,0,-41,-49,0,25,-38,7,-44,-104,-83,-62,-77,22,46,-103,47,-22,25,104,74,57,-56,-4,24,-126,-41,-76,-44,-127,47, 31,125,55,78,122,-3,-102,-101,-91,107,-100,65,-100,33,-85,-12,108,-43,96,9,71,31,-83,-88,15,56,24,114,-95,123,22,-104, 
  /* [49][0][][] */ 49,72,28,-37,22,-13,-58,-81,-39,-45,45,46,14,27,-62,-40,66,69,3,-22,-61,-36,-7,-13,-2,76,-14,65,72,-56,22,4, -49,76,62,-24,-85,-37,25,-80,53,-62,-48,-5,-46,-20,-22,48,-40,14,50,-31,-47,-15,3,50,-57,-12,59,10,70,-58,-22,-20, -11,-95,77,-16,38,-16,-85,-42,70,-21,-42,-10,-68,52,20,-3,-80,70,-80,83,69,66,57,13,-28,127,23,25,-58,30,47,0, 
  /* [50][0][][] */ 40,-66,-9,6,86,-44,-79,13,74,-42,88,-84,-35,-113,72,11,49,-4,-80,73,-23,26,-99,-26,59,-11,-48,-94,-112,-66,-40,-6, 7,72,-20,-58,11,25,-1,-43,47,-34,91,80,62,-10,81,10,6,89,-110,-49,-52,23,-83,27,86,-67,91,100,-29,-25,1,24, -76,44,52,-1,-80,-71,-92,-46,-14,92,-79,-1,-127,41,-73,27,48,89,4,-12,-98,77,-90,-23,74,99,-48,77,99,-15,49,-73, 
  /* [51][0][][] */ 47,-75,47,58,-8,-12,-27,75,34,-26,21,13,-36,-81,97,-62,-60,-30,102,80,-14,24,-71,-15,-6,42,111,56,-1,62,94,-54, 45,-3,90,-12,-97,-51,36,101,-57,-24,-55,-66,-112,-21,85,-43,-1,-91,7,37,-86,118,48,-62,-46,7,56,6,10,60,-20,69, 51,43,-32,68,94,71,64,27,121,108,99,-48,77,80,55,127,8,-33,-54,-74,63,-23,65,119,68,-40,-4,87,74,-18,74,25, 
  /* [52][0][][] */ -52,-103,-73,6,-80,3,-78,96,66,-31,70,-35,-105,82,92,57,37,92,-5,39,89,-9,-42,75,-85,35,-36,95,11,48,14,6, 50,-18,-102,85,42,35,-57,78,-30,-65,-45,-51,-54,-87,54,27,3,86,60,-41,-120,63,31,57,14,127,87,18,84,71,-30,22, 58,74,-15,101,-50,-20,90,34,-74,17,108,-13,33,-6,21,-31,-36,-3,-50,-29,42,53,25,8,-19,44,81,-55,47,-36,127,50, 
  /* [53][0][][] */ 89,21,62,-35,-107,-113,82,-55,16,-127,11,109,-67,-41,-32,-27,-79,64,-29,116,79,-125,90,-86,0,35,7,-87,81,-19,66,-85, 26,72,-56,-47,-95,19,107,-32,59,83,49,64,11,3,25,-124,111,-90,-45,-73,76,14,56,-90,107,30,49,23,-4,52,75,29, -75,-78,42,-68,-53,-40,108,61,15,-122,-5,27,-115,-64,-93,-8,-32,-44,-124,-57,-33,-119,-88,32,111,89,79,-27,71,8,42,26, 
  /* [54][0][][] */ 102,-74,-83,64,-86,-97,76,-77,87,32,-79,-48,-36,82,28,-38,75,107,-30,-23,-81,-19,89,-11,54,-8,-62,-57,-37,-14,-74,-104, 105,-78,-80,127,1,3,8,8,-72,-43,114,90,-1,109,37,-81,-28,-105,-20,37,-97,49,-86,57,-36,2,-85,-44,-34,110,-3,105, 79,53,39,-11,-72,-10,62,-106,8,92,112,-14,-102,18,36,27,-39,-60,47,122,44,-6,-66,102,-24,-46,-70,-44,101,84,95,93, 
  /* [55][0][][] */ -68,-20,-43,-92,59,62,22,69,62,-127,12,-14,-47,65,112,-57,94,103,6,79,-22,-110,-71,13,-122,28,-33,39,36,102,45,64, -96,76,-90,-28,42,46,-20,-17,-86,-21,62,70,-76,3,53,36,4,-75,47,-38,-93,-20,-124,-88,-73,7,52,-22,114,80,75,86, -96,-24,-116,85,76,23,11,79,46,-66,64,-125,79,-113,-44,-118,-65,-3,22,-25,-95,-31,-93,-62,-74,67,-104,7,-51,-114,-97,-13, 
  /* [56][0][][] */ -44,-127,-2,8,-41,-41,23,34,32,-35,-6,54,23,-45,14,-19,-44,-19,-57,13,-55,-9,-16,19,-41,-34,36,43,-5,-16,-35,-31, 63,-54,-42,-6,-8,-16,-41,-33,1,30,-9,-8,22,53,-32,-17,17,15,33,27,-18,21,30,56,-39,50,31,-24,-19,47,20,-32, 56,0,12,2,-11,42,-38,4,-38,28,24,2,-61,-42,-41,-4,-37,20,-21,16,-2,50,30,32,64,24,56,-20,115,-36,-18,7, 
  /* [57][0][][] */ -20,67,27,56,36,-16,80,39,-59,16,125,-36,-50,-69,11,-65,47,-108,-59,64,58,89,-43,-33,72,107,108,36,42,64,-83,99, -46,48,36,-21,-81,78,82,-49,-53,103,84,72,21,-84,-28,79,-10,-41,-28,100,-67,-12,71,8,91,-46,81,127,-8,-10,82,1, -11,27,-59,120,-59,95,27,-51,-62,29,29,-43,35,-71,-71,11,60,4,66,10,44,18,-61,13,79,-47,-71,-34,27,14,-11,-4, 
  /* [58][0][][] */ -87,78,60,-70,87,120,55,99,-15,20,-16,-47,65,-47,-88,-87,127,45,59,75,55,79,-26,17,-32,-78,-49,-32,-55,-41,17,-3, -38,62,-27,64,62,63,9,-81,24,98,66,2,-66,-3,78,87,84,76,119,98,-82,84,63,9,-29,71,34,126,30,55,9,-16, 21,121,65,93,-96,-17,-4,47,103,12,-64,-85,-64,85,74,50,34,-84,-61,9,18,-39,98,-23,-6,-85,-4,118,-10,4,55,-39, 
  /* [59][0][][] */ 11,-30,41,-11,55,22,-28,-5,76,-36,14,41,20,14,49,55,57,-86,83,53,47,72,36,87,8,-35,75,20,70,65,-47,23, 3,-57,11,-21,104,80,-44,-62,66,-22,86,30,3,-23,59,80,-6,-9,-2,12,-20,-73,32,-11,-19,-127,89,-23,38,-11,38,40, -6,-56,-44,7,-58,-30,20,-8,26,-22,7,55,75,-49,-10,87,81,41,4,-17,57,56,-7,-56,-53,-113,-3,49,-6,59,21,11, 
  /* [60][0][][] */ -73,-12,-33,2,-20,74,74,29,-8,1,62,-3,-16,-63,43,-10,-56,95,20,-117,82,-66,-58,-73,92,54,81,76,-83,14,-45,-31, 34,-87,9,-36,40,3,72,39,15,-38,-82,-32,-22,58,-55,-3,-107,62,13,-94,-22,93,-13,108,-21,10,62,-37,5,-102,37,-10, 81,-60,-85,37,-87,51,-36,50,-60,38,68,93,-127,-48,-49,-100,-1,6,-20,59,5,-7,15,94,-35,64,-6,89,-12,16,-83,3, 
  /* [61][0][][] */ -1,-66,64,84,18,-12,68,-20,71,-17,-49,20,41,102,39,127,-21,-71,30,113,-36,10,33,-9,67,10,4,22,56,-88,-39,98, -25,85,106,-13,14,84,-18,-14,2,-1,11,67,-66,-17,-31,8,71,24,22,-66,26,-47,47,25,-52,42,-35,48,-47,-38,-85,-5, -95,45,19,-12,53,-9,61,5,-64,51,-43,4,-1,-1,-11,-57,-60,56,28,14,-45,-11,73,-55,-43,-104,-26,-21,-21,75,-99,-2, 
  /* [62][0][][] */ 65,-116,-58,28,-3,38,81,-54,60,1,-54,-39,8,47,-55,-53,57,-74,78,49,11,-5,-21,-64,46,-24,-59,88,-63,-27,-32,66, -3,42,51,9,10,-9,25,-18,56,65,-21,-40,81,44,-24,86,64,-113,-59,-19,-17,-55,32,66,93,0,-36,-40,39,-11,19,25, 44,-62,56,-44,-14,-54,48,54,-3,62,27,56,83,51,36,93,75,-58,68,3,-35,-68,-29,25,-19,-127,32,15,-75,-10,-56,-54, 
  /* [63][0][][] */ 72,41,-20,-18,60,27,-34,55,-15,28,24,-43,13,112,46,-44,85,84,61,86,-29,-29,24,44,-19,113,34,14,39,-70,13,-12, -53,40,-10,23,111,-33,-84,73,26,78,47,43,-79,-29,-29,92,-36,69,76,28,-39,34,-37,-74,65,67,57,2,-72,-76,-127,55, 83,-27,-68,51,-109,-86,-16,12,35,-79,-83,67,-18,-75,73,24,35,-102,-59,47,17,68,-89,-78,-31,-86,-8,-97,-81,-11,-87,-27, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant13_scale = { 64, { 0.0016122455708682537, 0.0017950192559510469, 0.00152782560326159, 0.0019557951018214226, 0.001689040451310575, 0.0012407534522935748, 0.002546022878959775, 0.0015644802479073405, 0.0011606636689975858, 0.0019531867001205683, 0.0011460981331765652, 0.0012879293644800782, 0.001356779714114964, 0.0016219967510551214, 0.0016917212633416057, 0.0013876812299713492, 0.0014072045451030135, 0.0012018397683277726, 0.0012765383580699563, 0.0013501837383955717, 0.0015756078064441681, 0.0015739648370072246, 0.0016531739383935928, 0.0012079939479008317, 0.0016336095286533237, 0.0012483297614380717, 0.0012055423576384783, 0.0013749408535659313, 0.0012895059771835804, 0.0013161548413336277, 0.0014353948645293713, 0.0018098384607583284, 0.001651554019190371, 0.0014976765960454941, 0.0014381696237251163, 0.0020335330627858639, 0.0013070370769128203, 0.0014776586322113872, 0.0015192693099379539, 0.002032856922596693, 0.0014975774101912975, 0.0011468156008049846, 0.0015185837401077151, 0.0012402377324178815, 0.0017625136533752084, 0.0015077018178999424, 0.0015758590307086706, 0.0025623845867812634, 0.0011197645217180252, 0.0017932530026882887, 0.0013787244679406285, 0.0014165767934173346, 0.0014101390261203051, 0.0011791876750066876, 0.0013434842694550753, 0.0011373772285878658, 0.0025807858910411596, 0.0013227961026132107, 0.0013578676152974367, 0.001866171951405704, 0.0013813296100124717, 0.0017130561172962189, 0.0017884353874251246, 0.0015351272886618972, } };
const TfArray<64, int> quant13_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[32] = { 107, 1037, -224, 0, -280, -317, -32, -60, -225, -344, -211, -267, 818, -470, 20, 13, 391, -31, -672, -257, -58, 110, -358, -59, 224, 563, -86, -14, -209, -153, -29, -527, };
const TfArray<1, int> tensor_dimension14 = { 1, { 32 } };
const TfArray<32, float> quant14_scale = { 32, { 4.568755321088247e-05, 5.58770916541107e-05, 4.4976244680583477e-05, 5.2389303164090961e-05, 4.5305576350074261e-05, 3.8553702324861661e-05, 5.2043262257939205e-05, 3.9569440559716895e-05, 4.8624955525156111e-05, 4.8120775318238884e-05, 4.8827871069079265e-05, 3.9174003177322447e-05, 4.1619201510911807e-05, 4.3554100557230413e-05, 4.051385258208029e-05, 4.9485042836749926e-05, 5.1581915613496676e-05, 4.3829022615682334e-05, 4.3977790483040735e-05, 4.1616967791924253e-05, 4.2871357436524704e-05, 4.256365355104208e-05, 4.3269385059829801e-05, 4.120705125387758e-05, 4.8071509809233248e-05, 4.4894120946992189e-05, 4.3508051021490246e-05, 3.953892519348301e-05, 3.9445440052077174e-05, 3.9220118196681142e-05, 4.2575476982165128e-05, 5.7474302593618631e-05, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[32*1*3*16] = { 
  /* [0][0][][] */ 73,119,-14,32,2,24,31,-77,69,6,-84,45,86,-97,30,113, 9,108,95,21,-52,-91,111,-18,11,-70,-62,-98,46,-55,82,-29, -2,-54,82,-34,-66,23,-75,113,127,-17,-72,-69,115,71,-8,22, 
  /* [1][0][][] */ 43,-34,50,81,30,-57,53,54,-87,-63,24,73,-70,13,2,9, 22,-49,-18,-5,89,-49,6,28,64,45,63,38,-26,39,35,-75, -21,-21,-1,82,-6,-36,-15,-74,-25,-5,18,9,-29,-9,127,55, 
  /* [2][0][][] */ -59,69,115,-116,-61,22,69,112,59,-79,0,-36,66,23,106,41, 98,-42,104,12,-112,-10,56,-56,-81,72,84,11,-39,12,-17,-54, 127,59,-43,-54,-106,-63,-72,11,-9,-14,-84,-51,16,87,19,92, 
  /* [3][0][][] */ 39,-65,26,10,85,-20,34,17,-6,-21,-21,89,-18,29,9,-60, 43,91,109,-13,-76,35,99,78,-8,18,-61,56,-64,-19,-83,-43, 32,-35,-4,-127,-4,10,56,9,-72,-94,8,-30,-37,98,-16,18, 
  /* [4][0][][] */ 92,64,68,43,68,-62,61,-54,-74,-41,-5,127,90,-17,95,67, 94,76,-35,52,41,80,-26,39,-52,61,-31,-8,36,30,91,100, -52,35,-29,-36,68,-21,-71,-107,-76,-77,62,-45,66,-83,-56,-109, 
  /* [5][0][][] */ -5,19,33,-14,-91,42,89,45,13,-38,-66,66,31,114,-57,42, 103,4,-29,-44,6,11,127,97,52,-107,-81,117,15,91,115,-95, 85,49,105,58,16,97,57,122,21,65,19,77,3,44,29,49, 
  /* [6][0][][] */ 103,-49,-32,-127,58,-13,-25,75,37,27,-29,63,-52,88,-39,-88, -15,-20,-30,-58,-25,18,-57,79,46,-60,-99,79,-48,-77,72,38, 92,-64,49,-77,17,83,-11,-7,-64,80,-5,26,24,-34,15,-51, 
  /* [7][0][][] */ -21,-119,-97,-72,-51,45,27,30,-8,72,109,14,-59,59,-112,-26, 8,104,-41,-86,-91,1,84,-105,-117,2,-99,73,127,104,-98,16, 95,126,-93,71,-59,-39,11,-76,-35,44,-39,36,-88,36,118,61, 
  /* [8][0][][] */ 127,60,-73,27,-77,33,32,67,-104,-25,-29,108,37,-80,-9,30, -50,15,52,-67,93,69,-62,-11,0,-103,-73,-42,-79,-30,-21,-87, 100,88,25,-59,-32,-56,5,16,-36,31,90,-25,-49,85,-11,-62, 
  /* [9][0][][] */ -55,89,41,-73,37,-15,99,89,99,48,-63,1,108,-16,-28,105, -35,25,70,11,-22,82,-2,-55,99,-100,69,-48,106,29,30,-35, 11,-57,100,54,29,-27,76,14,-58,29,37,113,127,-26,32,9, 
  /* [10][0][][] */ -38,46,-85,-74,77,40,8,70,9,107,-25,74,18,15,-48,28, 127,-35,-11,63,35,110,-82,121,-27,1,-76,-40,96,93,112,19, -40,44,9,-5,-16,-20,-20,37,109,-23,9,16,3,-79,-80,-30, 
  /* [11][0][][] */ -5,-28,-109,86,-61,-127,1,-104,102,52,-66,-73,-56,62,-112,19, 55,72,-30,25,7,-85,79,-46,23,34,-120,-68,-73,108,-87,-2, -65,-52,13,59,9,113,15,10,7,23,34,-27,-33,81,7,-91, 
  /* [12][0][][] */ -46,-8,-12,73,-34,-16,-67,-94,1,-64,76,65,113,-15,75,-19, -118,46,66,-37,123,58,-62,-93,-73,-13,127,-87,-93,47,103,-8, -15,95,-58,12,-89,68,120,-62,-66,-74,105,71,78,-89,72,-70, 
  /* [13][0][][] */ -103,22,116,108,-70,102,63,91,106,-87,32,-98,-77,-82,90,64, 36,-48,127,69,-48,25,3,120,-114,62,-21,-65,54,-54,50,-29, -48,122,126,9,-16,90,66,-61,101,31,-78,120,73,-68,-27,120, 
  /* [14][0][][] */ -91,57,69,2,54,93,16,-104,-25,-2,94,52,80,14,15,-57, -27,-4,113,-48,1,-127,-73,-72,95,60,-86,-63,71,-70,-17,9, -69,37,83,-87,-44,-81,-112,-5,-64,-55,-1,-81,102,96,39,92, 
  /* [15][0][][] */ 71,52,116,-100,-62,-64,68,-72,-43,92,68,-58,-69,-31,-54,35, 86,51,32,-100,-27,21,21,91,-91,-97,-10,-57,75,-10,70,105, 41,-31,-93,-127,-52,23,-38,91,-126,-113,-42,49,-77,-75,51,12, 
  /* [16][0][][] */ 37,-26,43,-127,33,84,32,2,-109,-69,46,47,11,-15,74,-30, -33,4,-42,-63,-35,1,10,70,-110,-97,60,-7,-50,-57,34,-79, 63,99,-30,-61,-56,67,-13,-61,-20,-36,-27,114,89,-27,-40,28, 
  /* [17][0][][] */ -102,74,-65,76,10,-111,-87,-66,-18,103,-91,-83,-27,-76,-32,77, 58,7,86,126,-11,6,-16,92,91,-10,-84,-106,21,-79,-94,49, 37,79,-47,127,-102,-97,-112,106,-46,-103,-4,39,-66,-26,-74,-37, 
  /* [18][0][][] */ 94,2,94,-127,-4,-44,4,-80,29,-43,-91,-98,-13,-40,1,-16, 75,-112,22,-116,23,35,-12,109,-7,-28,-10,13,76,60,-61,50, 76,-14,75,-53,-34,-96,56,108,79,-20,10,68,4,-32,12,40, 
  /* [19][0][][] */ 57,-111,86,-77,34,75,74,-100,-33,-82,122,-81,-16,92,-38,93, 6,93,-11,-120,27,117,98,85,6,-81,-36,-45,-43,-46,37,86, 15,-2,56,66,3,15,-127,44,-25,-47,-114,-14,-44,-29,-31,57, 
  /* [20][0][][] */ -85,106,-83,79,4,10,-54,21,26,16,-39,-67,95,42,123,11, -50,-85,109,-107,-8,-54,47,116,-76,108,39,-8,93,45,-27,-51, 85,99,-75,-127,-46,-81,47,-48,64,12,-63,37,27,74,-27,31, 
  /* [21][0][][] */ -95,-21,-18,112,-103,55,-86,-8,-35,73,-98,41,-28,-80,-125,-17, -79,-61,109,-10,-16,-22,98,98,2,-11,-19,56,-34,-105,103,-32, -106,86,127,-77,-53,63,25,94,109,21,-66,-104,-7,-26,-103,30, 
  /* [22][0][][] */ -80,20,60,2,-99,11,33,90,2,-66,-27,-102,-88,-65,-107,-76, 107,81,102,-100,99,-67,-118,-14,52,21,-59,-14,74,-77,-8,-93, 92,-5,60,-74,-117,-99,-58,80,-127,23,-70,29,-40,-3,-98,-33, 
  /* [23][0][][] */ -48,-60,-63,99,-26,47,40,-20,106,32,98,12,-26,123,-125,5, 20,21,113,-75,-23,-56,78,121,96,-13,69,104,-87,79,35,127, -25,-37,92,72,-53,101,6,-61,59,10,-39,35,50,20,-61,93, 
  /* [24][0][][] */ -74,23,-52,-67,11,101,-94,123,108,35,104,44,114,86,-3,14, 106,53,1,87,44,111,-87,18,-86,29,25,60,-24,-85,4,4, -60,-11,90,32,-24,-46,73,-86,93,-44,-79,127,122,-84,-88,-58, 
  /* [25][0][][] */ 8,53,38,67,-98,-86,-18,13,35,-15,-68,-36,-72,32,18,-64, 64,38,-31,127,69,117,-14,-86,46,7,-79,12,29,28,87,106, 37,-55,52,101,-8,-57,66,46,-45,6,-59,-20,-15,-16,68,-5, 
  /* [26][0][][] */ 115,56,60,21,-2,-11,-85,-23,99,127,91,120,-64,44,63,81, 85,80,74,0,56,106,106,-16,-12,-2,-94,-23,-89,-8,33,-81, 72,-38,104,-22,-40,-80,32,-60,-25,-25,58,114,110,-85,-75,81, 
  /* [27][0][][] */ 94,103,80,-89,-1,-51,20,-99,-62,-50,-124,-62,-105,106,-44,12, 20,-50,102,-80,-48,92,-43,-77,30,-83,-59,-112,26,-104,-111,-6, 64,-46,-82,88,4,116,-29,114,-33,-127,75,-96,30,-64,-55,120, 
  /* [28][0][][] */ -27,-113,11,-28,-7,-98,54,107,-37,-72,29,-123,-92,102,-56,46, 104,72,-82,127,-5,20,106,-45,25,-37,-54,-95,-123,76,107,-99, 50,8,119,-39,-37,19,106,99,115,-35,-39,25,98,21,105,26, 
  /* [29][0][][] */ 29,58,-127,-112,14,-86,-80,65,-85,-49,67,-88,1,-75,-56,-119, -66,-61,60,-21,41,-114,-10,29,104,73,54,-104,82,-53,92,-83, -99,-65,-69,-25,84,116,55,-127,39,-97,8,53,78,-52,115,-61, 
  /* [30][0][][] */ 49,82,-68,62,54,13,-119,-95,3,22,-58,-127,74,19,91,-27, -61,113,67,-44,113,-36,22,-111,78,-45,-115,-64,-105,114,-11,69, -11,1,-18,34,-41,36,-22,99,119,-40,-17,97,76,75,-109,27, 
  /* [31][0][][] */ 1,95,33,-97,-58,22,0,-12,8,-127,0,-59,-42,-14,-45,-80, -36,47,31,-115,-40,40,-56,55,-75,-127,40,69,79,34,-57,0, 114,-67,92,7,-22,-70,90,69,-61,-48,37,37,100,-40,-29,-9, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant15_scale = { 32, { 0.0018842952558770776, 0.002304543275386095, 0.0018549587111920118, 0.002160696079954505, 0.0018685413524508476, 0.0015900733415037394, 0.0021464242599904537, 0.0016319655114784837, 0.0020054427441209555, 0.001984648872166872, 0.0020138116087764502, 0.0016156564233824611, 0.0017165039898827672, 0.0017963050631806254, 0.0016709159826859832, 0.0020409154240041971, 0.0021273968741297722, 0.0018076437991112471, 0.0018137794686481357, 0.0017164117889478803, 0.0017681466415524483, 0.0017554560909047723, 0.001784562598913908, 0.0016995056066662073, 0.0019826169591397047, 0.001851571723818779, 0.0017944058636203408, 0.0016307069454342127, 0.0016268513863906264, 0.0016175584169104695, 0.0017559437546879053, 0.0023704171180725098, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[16] = { -348, 2, -324, 1013, -192, 144, -62, -430, -14, 409, 759, -127, -144, -452, 889, 3, };
const TfArray<1, int> tensor_dimension16 = { 1, { 16 } };
const TfArray<16, float> quant16_scale = { 16, { 4.2142797610722482e-05, 4.0942046325653791e-05, 4.2570154619170353e-05, 3.5664805182022974e-05, 3.9420334360329434e-05, 4.8181664169533178e-05, 4.1042239899979904e-05, 4.7418696340173483e-05, 4.2101019062101841e-05, 3.6179939343128353e-05, 3.764059511013329e-05, 4.4242602598387748e-05, 4.4472235458670184e-05, 4.2205847421428189e-05, 4.1588093154132366e-05, 4.0020331653067842e-05, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[16*1*3*8] = { 
  /* [0][0][][] */ 41,67,127,116,-69,-14,5,54, -8,44,-20,0,-83,18,95,-112, 33,84,25,74,-110,-61,77,34, 
  /* [1][0][][] */ -63,107,16,103,2,-106,-35,58, -85,-19,-27,18,93,119,68,127, 103,31,59,-106,-83,-92,-7,3, 
  /* [2][0][][] */ -26,54,-31,34,20,-45,11,67, 119,26,110,92,59,-112,-1,127, -92,70,101,-46,-46,0,98,7, 
  /* [3][0][][] */ 72,-86,96,-58,122,-39,-115,81, 27,-127,-10,101,11,-84,-82,40, -99,-5,-5,-78,96,-39,91,72, 
  /* [4][0][][] */ -49,-83,-86,-65,-127,-101,28,44, -96,-46,-52,-77,-40,81,32,-29, 70,81,89,-58,-112,124,-46,25, 
  /* [5][0][][] */ -78,77,73,89,-22,-108,-46,110, -85,69,-28,-19,94,85,-86,-22, -63,127,67,66,25,18,-69,81, 
  /* [6][0][][] */ 98,-4,45,74,-127,-32,34,19, 51,-93,64,-112,-37,-12,24,73, -45,-121,-82,82,-17,22,-92,-91, 
  /* [7][0][][] */ -16,111,-14,-74,-106,105,92,52, 57,113,76,127,92,78,51,70, 13,26,-46,26,117,33,103,41, 
  /* [8][0][][] */ 64,-112,120,71,30,-32,96,65, -47,-76,-69,71,104,-36,-127,119, -28,-56,109,61,12,49,-36,-19, 
  /* [9][0][][] */ 51,-95,60,102,-33,96,98,75, -30,-63,15,-112,42,69,-40,54, -14,-94,-55,102,-28,59,-57,127, 
  /* [10][0][][] */ -91,-88,-70,22,44,-57,78,-24, -121,-112,-27,-26,-76,-113,-92,39, -68,-16,-57,70,-108,67,-36,127, 
  /* [11][0][][] */ -114,63,-75,127,87,7,-54,-67, -50,-55,52,35,126,-112,-3,53, -25,4,-92,92,-98,-74,-88,-21, 
  /* [12][0][][] */ -95,67,-76,127,-45,-8,98,-19, 59,-8,-90,-28,-99,68,-94,-34, 65,66,89,55,63,-106,-59,60, 
  /* [13][0][][] */ 13,-22,-31,-53,-115,76,-62,-58, 77,45,-60,9,-127,-100,-63,-103, -53,10,107,-1,84,-97,-82,65, 
  /* [14][0][][] */ 63,13,86,-46,-47,65,19,-80, -14,103,105,30,-3,-8,71,-84, 99,-119,18,127,22,-108,3,-99, 
  /* [15][0][][] */ 83,80,35,-58,16,-50,-57,84, -7,-17,113,-25,23,-58,14,57, -59,-97,127,-83,-123,-44,24,64, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant17_scale = { 16, { 0.0023187380284070969, 0.0022526716347783804, 0.0023422515951097012, 0.0019623124971985817, 0.0021689455024898052, 0.0026510024908930063, 0.0022581843659281731, 0.0026090231258422136, 0.0023164392914623022, 0.0019906556699424982, 0.0020710225217044353, 0.0024342713877558708, 0.0024469059426337481, 0.0023222072049975395, 0.002288217656314373, 0.0022019578609615564, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int32_t tensor_data18[8] = { -2476, -6589, 3324, 97, 1090, -2263, -2763, 584, };
const TfArray<1, int> tensor_dimension18 = { 1, { 8 } };
const TfArray<8, float> quant18_scale = { 8, { 3.9696092244412284e-06, 6.0354195738909766e-06, 5.213142230786616e-06, 5.7755701163841877e-06, 6.6857473939307965e-06, 4.0382878978562076e-06, 3.839986675302498e-06, 4.7352823457913473e-06, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[8*1*3*129] = { 
  /* [0][0][][] */ -7,58,-5,18,-119,-32,64,-53,-81,-44,27,-108,90,-95,-109,28,-20,-46,-35,-121,32,-16,37,63,50,-10,1,-110,15,-116,-110,62,21,-59,57,-32,13,-48,57,81,23,42,-100,71,-47,-63,110,45,-34,-38,95,102,-106,102,60,92,100,39,-25,68,-114,67,43,-1,-44,-63,78,-27,74,-63,-88,91,-89,-100,-37,22,60,36,-83,22,64,-24,86,-91,100,-117,-104,-42,-65,67,-80,-110,29,-115,-84,-17,-84,-59,61,-80,46,-66,-7,29,12,-94,-113,14,-49,-64,-108,-109,-20,-80,-53,-48,-47,86,64,61,-83,-68,-15,73,112,-27,-115,3,79, -113,36,108,-32,-40,13,-108,51,-25,104,-125,102,7,-27,82,27,107,-20,68,60,43,36,66,-85,-104,-94,4,92,-77,100,70,-26,-2,-92,58,21,-6,94,-6,109,36,91,65,-11,-37,73,20,-58,-105,23,-64,-81,12,-69,32,68,-33,-45,80,47,-124,73,-94,-63,-41,82,-24,-74,-79,-55,-110,24,-67,17,-122,43,-28,-100,-127,-91,68,-32,91,-16,-76,81,-127,-13,-3,-93,-77,-97,60,104,-50,64,33,-8,7,-4,99,-68,-114,101,69,12,-21,82,10,-5,-115,103,100,2,-34,3,-97,44,96,-100,-35,-16,-90,-25,-112,61,15,-62,-28, -42,29,-39,5,96,-70,-107,-54,-37,48,-37,86,-73,22,-28,29,10,84,-61,58,-14,-47,-5,13,74,-13,-66,-67,85,-115,-19,10,-61,31,-41,-89,-47,-125,90,-75,-23,54,46,75,50,-41,-20,17,-2,-80,-22,-71,-125,54,103,-1,40,65,13,-20,-99,57,85,-114,99,40,92,-109,-114,-29,-28,55,100,-126,-26,-29,-15,87,-90,-90,-35,101,-3,-93,72,53,-13,-36,22,103,76,111,49,92,90,10,17,-86,73,60,4,-38,-52,-104,-68,-121,-41,-34,42,104,12,75,-77,-114,-12,-112,-126,-59,97,-72,48,-93,-38,-71,76,-86,30,28,-65, 
  /* [1][0][][] */ -82,-71,-33,81,-76,66,-89,73,-5,-6,-33,-46,54,-56,95,47,-84,-18,75,76,40,-29,48,33,25,-42,-72,-23,-13,23,3,-61,-19,41,19,60,-56,-57,-3,-63,46,-18,-59,25,-2,73,95,105,25,-8,28,37,70,-53,-59,98,43,-26,-3,7,58,93,-22,-20,-50,25,30,-27,0,75,-18,6,-2,88,7,-4,-36,-15,-11,-74,64,-61,16,-43,-63,51,64,11,-55,25,-62,44,100,-25,11,36,37,111,118,0,-8,60,-31,61,62,105,-2,119,3,-34,66,-4,44,-39,-29,80,73,4,-54,55,18,76,-48,46,44,-79,38,-37,-12, 34,0,-81,84,-29,-36,-26,-40,23,44,-40,-83,51,64,17,77,60,-57,-14,28,-2,-18,-40,40,-46,-22,-21,-51,59,-52,-61,-2,13,-3,-3,69,59,-73,-6,65,52,34,-50,35,25,71,101,-18,86,-19,28,101,100,65,-54,24,45,22,75,-17,-30,-4,104,-48,28,1,20,-70,70,9,-32,4,44,-52,32,42,-30,-63,-70,69,-30,40,-38,48,-48,11,-8,-46,-16,5,61,20,60,38,15,-56,72,127,52,39,57,103,25,-25,100,84,41,52,82,17,-36,0,13,62,44,111,34,-68,80,59,-33,35,56,76,38,62,-2,-56,3, -67,-78,-82,21,-47,-2,1,48,-87,-63,-56,-19,-17,12,29,64,26,-13,35,-72,-1,-64,96,-25,89,39,25,-23,59,-68,1,61,15,53,49,-61,-46,-61,43,-45,-68,-85,14,57,-46,34,-5,22,-33,33,51,33,66,-40,6,97,45,19,89,57,-7,68,-44,-41,104,-35,99,-29,-32,35,30,-59,52,-28,-45,-39,-6,68,-74,15,47,-80,-34,71,73,-59,-19,-12,27,8,65,58,-62,71,-43,29,38,46,77,-32,-8,-35,48,51,74,-17,89,85,89,45,96,-21,-7,-48,75,-9,78,-46,-80,37,20,-60,-52,-53,-72,-86,-66,-43,46, 
  /* [2][0][][] */ 114,127,-56,16,-61,-62,41,49,-45,15,36,-75,49,-84,-46,45,53,-65,57,30,90,-14,1,11,29,-79,-71,-95,-10,-101,-74,14,-83,46,74,-60,31,-80,-30,-42,11,-14,-3,-58,-3,-12,20,-52,59,-79,79,-88,-59,10,72,52,-88,-51,54,60,-3,68,-50,-17,-51,90,-51,-13,-74,-72,-44,56,-72,32,-20,-46,-80,38,-93,-56,38,-75,-54,-14,56,-20,106,99,53,-71,-90,-42,21,45,23,57,-79,-68,82,-85,57,27,-71,12,66,-93,-1,-54,0,71,45,-28,-6,-82,52,-29,23,97,-33,-43,41,67,-73,-3,-1,66,-5,25,62, 117,16,18,64,81,-7,60,70,62,-8,-54,14,-35,-46,87,-23,10,16,-24,-36,-55,89,19,-22,10,36,-21,54,-66,-73,81,-28,12,34,8,83,14,-83,70,46,46,-39,33,2,-56,45,-10,80,68,80,-57,4,-28,64,39,-39,-19,0,-74,55,34,-83,17,73,81,36,-46,42,-31,-39,6,35,-30,32,75,13,42,17,84,41,-39,32,-31,43,-16,-73,-17,-33,80,21,-8,-79,-28,5,-37,19,-70,-6,-54,82,24,17,52,59,97,65,89,8,-44,-86,-3,58,-46,63,-51,94,76,-64,120,7,113,-82,113,-58,-5,124,-19,48,48, 4,77,45,43,-47,-13,-42,70,-3,-56,-77,-89,-1,61,-5,-16,-63,-54,-35,-76,35,-14,-8,20,-101,-108,40,-67,-98,-71,-39,45,23,-44,22,-51,-91,-41,-47,-89,-49,58,-56,-57,54,-3,-28,75,-62,-34,-11,-65,62,56,9,-87,-84,13,-81,-40,20,64,-88,31,-4,-89,-76,40,45,-94,-96,-61,3,-80,-8,29,-17,24,12,-28,58,31,-59,-25,9,24,31,46,72,-46,74,65,-25,-45,58,45,27,68,-52,-18,-91,-60,-89,-23,59,-7,50,-88,-25,16,-93,-51,-41,27,-22,52,66,28,-11,-12,57,-66,-37,41,72,75,53,23,-44, 
  /* [3][0][][] */ -58,-2,-7,-52,82,-31,62,-3,53,-90,-14,-68,-16,25,29,11,79,26,32,18,37,62,66,83,36,64,83,-70,75,29,37,52,54,30,26,36,-15,10,-81,56,-78,-40,-11,-31,26,27,97,-29,106,71,-29,27,-13,-50,66,-11,95,82,7,39,72,34,14,85,16,-23,66,-54,37,-17,70,86,24,19,-30,-31,-11,-47,77,-26,51,-9,88,-76,54,31,25,3,-62,19,76,-66,-48,27,-67,27,38,54,17,94,-40,59,-26,50,-21,18,107,64,105,-31,92,-27,22,27,-54,24,38,-91,-69,-20,50,-51,8,51,67,-58,-55,33,-20, -14,-21,27,-45,31,74,-6,60,30,-64,-57,-92,31,41,55,60,-42,3,-52,-84,56,60,76,-76,-19,-56,64,-12,-65,-46,-45,-45,53,-84,16,38,36,43,-29,-45,-70,-71,-28,-76,77,44,89,-17,-78,2,97,5,-23,-28,38,104,35,80,30,29,58,-3,35,-85,65,38,34,46,-66,28,16,13,39,67,-71,-54,55,-82,-18,-14,65,-25,-73,-9,-64,62,-7,-69,71,44,42,57,-15,41,-7,96,64,96,-27,-46,89,-27,-33,-48,-15,83,71,49,41,-15,86,-1,34,-25,-56,58,77,-14,86,78,38,-28,-14,-26,54,49,54,49,64, -97,-57,-83,16,-18,-48,-91,-11,-3,-97,-101,-4,3,-34,-7,-27,-90,-92,-32,67,-73,-68,-4,42,-60,33,-16,-18,-95,-3,-50,-39,-110,-71,-8,-33,-77,10,31,-52,18,-47,-85,60,65,-8,33,54,-2,55,-49,27,-60,-1,1,51,17,14,-23,-53,-46,-25,12,58,-6,-5,-32,-59,-48,-81,9,-9,-24,24,44,-22,62,-27,-127,24,44,-40,-57,-73,3,-40,-31,2,-31,-58,-29,-13,71,7,73,59,80,79,25,70,93,44,45,104,23,56,39,2,-4,-31,-19,49,-18,-28,-7,41,-62,-42,81,-84,-56,-14,39,-44,-43,53,26,-57,-23, 
  /* [4][0][][] */ 93,-6,-5,105,-41,14,1,51,-12,6,-63,40,13,36,-19,60,-46,-60,-22,-41,-45,-58,-58,-25,-53,-18,-33,8,39,-35,-43,5,-50,-38,31,-38,2,82,-33,5,40,-10,65,-29,-47,-11,67,-51,9,-45,-17,36,-23,48,-46,-19,-41,14,41,-45,-40,47,51,38,-31,55,26,-42,4,51,-30,127,-48,-30,51,63,-4,49,-75,23,71,-71,-45,1,-6,-32,69,27,-5,-36,-30,87,41,87,-51,14,-72,-34,39,-20,12,-21,-33,-21,5,-73,-55,-17,-48,56,34,-79,52,33,-55,78,89,81,23,-45,5,-13,-50,67,-1,68,107,-14,-45, 9,-58,-72,10,-27,-71,-27,-64,21,21,-86,30,-68,45,12,-14,56,-24,25,-31,-64,-84,-32,-44,3,41,50,-61,-65,-59,-3,-8,-16,-60,-80,27,1,30,13,36,-50,-77,1,-25,-66,57,-78,-22,-81,-5,-21,27,8,-21,-71,58,27,-6,-59,-93,24,-21,-40,14,-51,7,-38,-96,60,55,15,52,15,-15,-18,65,39,67,13,-17,-29,2,56,-2,24,57,-2,-48,-30,22,-61,50,24,-54,54,-16,-50,-46,10,-61,60,21,4,45,10,-8,15,-47,-75,-11,-46,2,19,43,11,1,-50,64,-9,-24,-55,2,-65,-51,-14,28,53,87,59, 82,14,84,24,-1,65,61,-58,5,1,16,69,-34,47,-11,3,-41,-31,3,15,48,20,-31,7,56,47,-57,45,-45,63,79,41,-31,-31,33,-26,67,-43,70,24,-26,-56,69,43,6,68,6,-27,28,86,-23,-15,-56,32,0,-53,23,65,-62,5,76,-60,-27,-41,2,55,68,-10,15,-22,54,57,50,80,64,-18,24,-15,35,-25,-6,21,40,42,76,92,-46,-46,58,20,72,-52,38,52,28,11,-17,46,99,-23,-25,-18,62,-11,14,34,24,71,-28,48,-39,60,-24,-7,-26,-15,56,21,65,58,50,31,-7,25,102,5,81,63,39, 
  /* [5][0][][] */ -54,24,-14,52,52,21,-71,10,-3,83,-44,100,1,62,-48,11,-98,41,1,97,-44,-23,109,-124,-21,-108,24,54,-78,118,-117,102,28,-23,88,12,-28,-62,92,-37,-110,-114,54,62,26,-53,-96,-81,-88,-70,-95,-92,-10,77,-54,-11,-5,-25,102,110,88,-48,61,78,-96,19,-79,82,36,32,-54,-17,-93,49,-86,-25,33,110,-42,-99,85,-110,108,-6,18,22,-17,-39,30,114,79,48,-20,86,-65,47,92,-52,-7,-117,84,107,-77,42,-40,-95,92,68,7,-40,13,85,-38,-124,-84,-97,-18,-83,30,105,-10,113,-14,-103,42,83,26,-17,101, -74,29,-94,-52,-118,53,42,96,-126,12,-96,30,11,82,4,-111,56,50,-102,26,-64,21,-9,70,-73,-100,67,-28,-29,79,100,-41,68,-7,-36,53,-51,85,-124,-41,-6,92,14,-39,40,-41,100,-105,-74,69,-51,71,65,-15,-6,98,-124,47,86,-96,21,-22,-71,-74,-41,-94,66,46,95,72,-98,-99,-55,-124,103,-114,-66,-43,-8,-74,11,-18,55,1,81,100,26,76,-92,-70,19,107,-14,-37,13,43,5,-1,28,36,103,-79,-87,18,-22,-68,-4,-120,56,97,52,-23,-60,-104,-117,-50,-11,-8,-111,-60,-115,-26,12,102,-98,38,84,20,-25, -51,-80,16,-81,45,-15,-127,103,-9,-83,-63,99,29,-42,-31,33,-125,-22,63,-112,-73,-64,24,-81,24,-61,-6,72,-87,91,66,24,47,53,14,54,104,21,57,-90,48,-26,-124,-13,-118,-124,96,-99,-63,-69,90,92,-5,95,-20,42,39,-28,-103,35,-48,89,-66,32,98,36,92,-1,-105,-44,-77,40,-84,21,-45,-43,81,13,-106,61,43,-34,42,40,-46,-12,59,80,-64,63,-125,-35,54,88,6,-90,-117,-10,54,-61,-16,71,7,-43,62,33,-13,92,42,45,-20,38,90,53,-78,-21,-17,78,-55,-50,-116,87,30,-100,-54,-100,-94,71,-26, 
  /* [6][0][][] */ 62,113,-15,31,-31,-41,-65,-84,-116,-118,-73,10,-63,-47,14,-37,-56,103,23,-10,-39,56,-9,40,-40,-8,117,18,33,-47,5,-107,61,-97,-85,51,-123,88,-71,-63,-47,-108,72,3,-73,122,72,52,27,49,-58,108,-111,60,99,-51,-62,-97,96,98,-46,-115,-27,-23,-103,125,-15,61,-40,-34,103,98,-91,84,-83,85,125,85,-91,-53,2,-52,-86,-24,-108,-92,-15,-38,109,99,-111,-96,-5,-99,-78,-98,97,-89,37,-42,-16,-121,65,-18,21,-11,-120,-15,-34,63,-61,-18,-23,84,-23,116,-45,-98,-115,31,-10,-123,-30,53,-116,-80,-25,-24,-79, -104,-110,35,-6,-11,-73,36,-95,-102,105,-89,8,108,12,-55,-79,64,101,-36,-25,83,-82,3,-44,39,-66,85,-76,19,82,95,57,16,71,-120,-66,-109,103,-70,52,-103,-93,-25,-44,32,104,17,9,-121,10,62,-41,105,99,-53,-58,36,102,-105,108,35,55,-54,64,-80,20,51,-7,-76,117,39,88,60,-69,-87,45,3,-86,-7,-84,-6,-72,19,19,80,20,75,89,-4,30,8,-63,-108,-3,-68,-102,-91,-60,95,110,93,-53,-25,-48,-69,-44,-43,-110,77,4,-92,-61,91,57,40,25,-112,95,32,55,-79,-77,-118,-110,70,115,1,-86,-91, 34,-2,104,-114,-58,-68,-7,-29,65,74,-121,-99,-78,-59,-32,-2,60,-15,-66,52,-8,6,69,107,-107,47,-72,21,-121,-108,6,-100,59,111,113,93,43,-109,83,43,-80,-117,-74,-71,91,-111,-78,-109,-21,-126,-101,11,-57,-96,93,49,109,-23,-17,70,17,-61,-43,99,-15,-118,-3,40,-53,-86,-63,-64,-22,-16,50,-126,-18,71,74,51,29,-74,-107,102,80,-121,107,76,-111,31,63,25,37,-51,98,-98,-48,-60,-48,99,22,-62,-100,74,-7,-127,82,75,34,1,-56,29,84,59,5,-61,-41,-92,-49,-73,57,35,-19,83,4,94,43,-57,54, 
  /* [7][0][][] */ 111,23,57,66,93,38,-80,55,-27,-51,86,-88,56,-81,-24,46,-19,97,-32,-10,-32,37,-74,-10,78,-13,-7,88,92,78,-42,-50,57,84,-8,-68,50,-19,45,-57,-57,4,-54,-32,-87,-76,58,74,13,40,97,-76,48,-25,-98,-37,-62,-20,16,-77,-17,28,67,46,23,-10,-27,72,53,-33,-91,-6,74,68,88,28,36,39,-24,25,17,-38,-42,-34,-60,-36,2,18,-13,38,-22,5,-85,33,33,79,50,101,86,5,-13,76,75,100,-45,114,50,111,6,76,44,90,-55,4,-61,59,-55,-52,68,46,-40,-33,63,5,30,-48,71,35,88, 71,1,72,-71,51,47,-41,37,-79,48,-56,-90,88,-94,-2,-74,58,-69,-11,-84,82,-64,24,39,61,69,54,15,76,-26,32,65,12,-95,51,-13,20,9,-90,-40,-89,-64,4,-100,-30,-69,-48,-71,-42,4,79,-4,91,-71,-64,8,18,55,47,36,41,-37,-33,103,93,-83,-41,95,107,15,-38,103,-62,71,98,-3,68,7,-41,-52,-95,26,101,-74,-77,36,48,17,-32,50,-15,63,56,-30,84,13,3,31,64,-56,26,31,34,27,-47,4,-72,127,-27,49,-68,-4,-61,9,84,-31,36,66,5,-9,-44,-7,88,3,17,89,16,108,-39, 103,-54,-8,85,16,51,57,-48,18,-28,95,-71,102,104,37,-72,50,-55,22,20,21,85,32,-76,83,32,-63,91,57,82,-67,20,73,-33,2,9,-52,-41,-12,-13,20,-25,-35,-59,73,83,22,14,2,43,-12,-28,48,36,1,-7,84,-57,-37,-47,-64,4,-13,-27,52,96,15,61,-9,-78,65,11,-8,35,96,-22,58,-69,-69,-39,19,107,-9,-50,22,74,89,16,21,62,45,-49,6,-41,78,26,-35,93,-6,-6,61,52,48,102,43,-72,95,31,106,-46,-16,117,82,20,-59,-13,71,58,87,-37,-48,77,36,-22,120,41,-26,79,93, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,3,129 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0010122503153979778, 0.0015390318585559726, 0.0013293512165546417, 0.0014727702364325523, 0.0017048654844984412, 0.0010297633707523346, 0.00097919651307165623, 0.0012074969708919525, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,131,129 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,131,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.018174884840846062, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,131,1,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.018174884840846062, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,66,1,8 } };
const TfArray<1, float> quant23_scale = { 1, { 0.018174884840846062, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,66,8 } };
const TfArray<1, float> quant24_scale = { 1, { 0.018174884840846062, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,66,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.024246493354439735, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,66,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.024246493354439735, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,33,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.024246493354439735, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,33,16 } };
const TfArray<1, float> quant28_scale = { 1, { 0.024246493354439735, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,33,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.027616038918495178, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,33,1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.027616038918495178, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,17,1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.027616038918495178, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,1,17,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.027616038918495178, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,1,17,64 } };
const TfArray<1, float> quant33_scale = { 1, { 0.047856830060482025, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,17,1,64 } };
const TfArray<1, float> quant34_scale = { 1, { 0.047856830060482025, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,9,1,64 } };
const TfArray<1, float> quant35_scale = { 1, { 0.047856830060482025, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<2, int> tensor_dimension36 = { 2, { 1,576 } };
const TfArray<1, float> quant36_scale = { 1, { 0.047856830060482025, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<2, int> tensor_dimension37 = { 2, { 1,2 } };
const TfArray<1, float> quant37_scale = { 1, { 0.21102231740951538, } };
const TfArray<1, int> quant37_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<2, int> tensor_dimension38 = { 2, { 1,2 } };
const TfArray<1, float> quant38_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 20 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 20,19,18 } };
const TfArray<1, int> outputs1 = { 1, { 21 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 21,2 } };
const TfArray<1, int> outputs2 = { 1, { 22 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 22 } };
const TfArray<1, int> outputs3 = { 1, { 23 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 23,3 } };
const TfArray<1, int> outputs4 = { 1, { 24 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 24,17,16 } };
const TfArray<1, int> outputs5 = { 1, { 25 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 25,4 } };
const TfArray<1, int> outputs6 = { 1, { 26 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 26 } };
const TfArray<1, int> outputs7 = { 1, { 27 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 27,5 } };
const TfArray<1, int> outputs8 = { 1, { 28 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 28,15,14 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 29,6 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 30 } };
const TfArray<1, int> outputs11 = { 1, { 31 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 31,7 } };
const TfArray<1, int> outputs12 = { 1, { 32 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 32,13,12 } };
const TfArray<1, int> outputs13 = { 1, { 33 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 33,8 } };
const TfArray<1, int> outputs14 = { 1, { 34 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 34 } };
const TfArray<1, int> outputs15 = { 1, { 35 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 35,9 } };
const TfArray<1, int> outputs16 = { 1, { 36 } };
const TfLiteFullyConnectedParams opdata17 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs17 = { 3, { 36,11,10 } };
const TfArray<1, int> outputs17 = { 1, { 37 } };
const TfLiteSoftmaxParams opdata18 = { 1 };
const TfArray<1, int> inputs18 = { 1, { 37 } };
const TfArray<1, int> outputs18 = { 1, { 38 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16912, (TfLiteIntArray*)&tensor_dimension0, 16899, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 3096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 16899, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18464, (TfLiteIntArray*)&tensor_dimension21, 1048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 1048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1056, (TfLiteIntArray*)&tensor_dimension23, 528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1056, (TfLiteIntArray*)&tensor_dimension25, 1056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 1056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1056, (TfLiteIntArray*)&tensor_dimension27, 528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1056, (TfLiteIntArray*)&tensor_dimension29, 1056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 1056, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1056, (TfLiteIntArray*)&tensor_dimension31, 544, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension32, 544, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1088, (TfLiteIntArray*)&tensor_dimension33, 1088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension34, 1088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1088, (TfLiteIntArray*)&tensor_dimension35, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 576, (TfLiteIntArray*)&tensor_dimension37, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension38, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_51_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 39;
  for (size_t i = 0; i < 39; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 19; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 19; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_51_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  38, 
};
TfLiteStatus tflite_learn_51_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_51_invoke() {
  for (size_t i = 0; i < 19; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_51_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
