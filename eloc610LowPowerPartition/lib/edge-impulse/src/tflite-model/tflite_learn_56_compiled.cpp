/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 28.07.2025 19:59:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 23392;
#else
constexpr int kTensorArenaSize = 22368;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,2048 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 32, 64, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 1024, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[2] = { 7230, -7230, };
const TfArray<1, float> quant3_scale = { 1, { 6.4632680732756853e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[2*1024] = { 
  65, -1, 18, -15, 0, 15, -27, -30, 14, -23, 33, 11, 22, -26, 6, -10, -2, -30, 5, -4, -107, 23, 8, -2, -44, 48, 28, 49, -3, 14, 70, -3, 42, 23, 3, -30, -10, -5, 36, -5, -11, 23, 33, -2, 8, -40, -12, 32, -3, 21, 8, -23, -54, -54, 2, -18, -71, -33, 43, -19, -30, 10, -37, -9, 34, 34, 39, -36, -9, -6, 49, 18, -55, 47, -20, -30, -16, -55, -33, 1, -28, -19, -16, -32, -24, 39, 34, 62, 22, 58, 3, -57, -21, -15, 52, -56, 22, 48, 54, 8, 48, 81, -17, 50, -24, -21, 58, -26, 14, -27, -32, -2, -22, -25, 0, -37, -35, -15, 24, 13, -13, 58, -27, -7, 23, -43, 23, -27, -48, 23, 13, -1, 79, 76, -16, 4, 51, -22, 35, 36, -10, -22, 6, -32, 18, 10, 89, -15, -91, -9, -14, -41, -33, -51, -39, -3, 45, 36, -12, 39, -17, 3, 17, -3, 10, 21, 3, 8, 31, 13, 20, 54, -39, 14, -13, -8, -13, 8, 61, 27, -40, -29, 1, -12, -18, -8, 31, -8, 35, -1, 23, -51, -8, 15, 9, 20, -13, 8, 3, 25, -22, 16, 2, -26, -19, -6, -20, 16, -22, -9, -7, -1, 5, -15, 0, -29, 3, 41, 17, -3, -16, -20, 6, -18, 8, -4, 8, -2, -3, -3, 1, -1, -13, 41, -16, -2, -27, 35, -9, -8, 65, 40, 2, 8, 9, -10, -24, -30, 7, 23, 24, -18, 25, 31, -3, 14, 71, -7, 12, -3, 4, 2, -72, -12, 19, -19, 33, 15, 16, -22, 1, 25, 2, 2, 7, 6, -91, 17, 1, 2, -40, 54, 8, 21, -4, 24, 45, -1, 50, 13, -8, -14, -9, -5, 14, 4, -22, 6, 19, -2, 9, -12, -32, 23, -8, 18, 1, -23, -16, -44, -5, -26, -93, -35, 10, -16, -18, 2, -32, -17, 18, 33, 35, -30, -5, 1, 21, 17, -38, 28, -29, -28, -10, -33, -17, -5, -18, -27, -5, -31, -33, 27, 29, 47, -4, 51, -15, -46, -5, -21, 40, -38, 6, 48, 50, 46, 13, 69, -3, 43, -26, -6, 31, -16, 80, -28, -27, 3, -16, 15, 10, -52, -65, 2, 2, 46, -20, -30, -39, -19, 19, -29, 10, -12, -42, 19, 26, 11, 71, 48, -19, 23, 21, -13, 23, 27, 3, -9, 5, -29, 12, -46, 72, 2, -19, 7, -5, -48, -27, -22, -31, 0, 40, 21, 1, 4, 2, 10, 18, -21, -9, 5, 14, 4, 12, 8, -1, 10, -33, -1, -7, 0, -5, 27, 58, 21, 24, 5, -4, -29, -23, -13, 17, -5, 26, -20, 22, -36, 0, 16, 9, 9, -9, 0, 5, 22, -16, 7, 0, -33, -7, 10, -17, 21, -8, -8, 12, 35, -63, -12, -6, -16, 3, 45, 25, -13, -17, 39, -24, -28, 11, -5, -10, 0, -3, -9, -2, 15, -3, 37, -8, -8, -17, 32, -3, 44, 70, 41, -7, 25, -1, -28, -18, -24, 8, 11, 23, 8, 21, -2, 10, -12, 60, 1, 14, -10, 11, -7, -70, -13, 7, -20, 30, 0, 14, -14, 1, 45, 9, 23, 3, 9, -72, 22, 1, 11, -31, 60, 11, 31, -5, 21, 38, -10, 56, 13, 11, -35, -1, -5, 24, 1, -18, 3, 29, 1, 9, -10, -30, 36, -17, 11, -5, -36, -72, -59, -11, -21, -61, 4, 33, -8, -25, 11, -22, -14, 32, 39, 29, -24, -1, 8, 40, 20, -46, 19, -30, -22, 3, -35, -27, -6, -19, -34, -5, -32, -18, 18, 29, 67, 22, 28, -12, -31, -15, -17, 62, -27, 4, 69, 56, 37, 22, 58, -12, 54, -5, -8, 38, -18, 75, -30, -27, -7, -12, 25, -12, -67, -20, -12, 8, 41, -12, 40, -38, -21, 23, -30, 21, 5, -51, 30, 24, 40, 80, 39, -20, 6, 30, -15, 10, 36, 6, -23, 23, -24, 0, -24, 74, 11, -29, 6, -4, -24, -41, 47, -43, -8, 38, 23, 8, -10, -5, 0, 13, -33, 2, 1, 6, 19, 3, 8, -2, -6, -23, 33, -9, -1, -39, 26, 17, 36, -62, 5, -3, -15, -27, -15, 14, -36, 32, -9, 11, -48, -16, 13, 12, 6, -15, -10, -3, 13, -3, -2, 3, -35, -9, -36, 0, 19, -20, -13, 23, 24, -15, -20, 4, -22, -1, 88, 27, -9, -19, 39, -5, -5, 5, -1, 2, -2, -5, -4, -5, 23, 8, 23, -9, -16, -14, 35, -5, 12, 76, 34, -12, 16, 8, -24, 0, -15, 15, 14, 38, -1, 28, 28, 2, 9, 75, 0, 9, -14, 8, 6, -85, -16, 19, -17, 17, 19, 19, -21, 8, 57, 4, 44, 7, 5, -40, 30, -1, 11, -35, 56, 17, 22, -9, 9, 62, -6, 23, 13, 2, -27, -6, 0, 19, -5, -7, 6, 34, -4, 30, -3, -33, 37, -2, 19, 1, -47, 2, -66, -17, 7, -39, 5, 38, -26, -33, 13, -23, -8, 33, 37, 31, -36, -15, 6, 22, 2, -44, 38, -42, -36, 48, -23, -44, 2, -22, -36, -17, -12, 19, 41, 38, 127, 14, -6, -12, -24, -4, -42, 38, -40, -15, 64, 75, 48, 44, 42, -9, 59, -16, 0, 44, -15, 103, -13, -35, -8, -19, -3, -2, -63, -22, -2, 20, 65, -24, 59, -44, -12, 36, -29, 42, -17, -40, 31, 32, 33, 94, 49, -9, 15, 66, -31, 22, 17, 29, 0, 34, -33, -7, -5, 99, 40, -15, 13, 0, -55, -48, 49, -22, -4, 20, 36, 12, 16, -7, 15, 6, -28, 5, -10, 9, 20, 1, 3, -10, 10, -43, 75, -17, 18, -18, 24, 48, 27, -6, 2, 3, -3, -12, 10, 17, -45, 41, -26, -8, -42, -36, 22, 8, 23, -5, 7, 3, 10, 17, 2, 6, -26, -23, -13, -6, 14, -22, -8, 57, 41, -6, -34, -9, -26, 8, 49, 3, -48, -31, 28, 15, -17, 20, -2, 8, -5, -6, -2, 2, 20, 21, 21, -21, 1, -53, 38, -22, 31, 75, 44, -3, 51, -6, -37, -2, -27, 21, 8, 24, -29, 29, 50, 7, -7, 
  -73, -10, -30, 5, -11, -3, 30, 21, -11, 11, -29, -9, -22, 31, -6, 5, -1, 31, 0, 6, 116, -23, 0, 7, 45, -41, -27, -46, -7, -22, -78, 13, -53, -16, 1, 30, 9, -2, -36, 7, 5, -20, -30, 2, -10, 31, 20, -32, -1, -22, 6, 21, 64, 54, -2, 7, 85, 23, -48, 17, 26, -6, 29, 7, -28, -31, -35, 40, 14, -3, -42, -25, 54, -34, 15, 30, 21, 49, 27, 1, 17, 25, 7, 37, 17, -28, -33, -61, -24, -55, -4, 49, 22, 24, -52, 45, -14, -60, -59, -8, -36, -78, 7, -50, 33, 25, -49, 26, -24, 34, 21, -6, 23, 27, 1, 45, 32, 10, -34, -18, 8, -52, 25, 6, -19, 33, -19, 22, 58, -28, -21, 10, -72, -65, 16, -16, -49, 19, -37, -30, 9, 32, 3, 42, -4, 1, -103, 8, 93, 1, 5, 33, 32, 55, 24, 3, -52, -24, 11, -31, 16, -13, -28, -8, -1, -10, -2, -20, -39, 0, -16, -53, 41, -11, 6, 17, 0, -13, -47, -34, 36, 18, 4, 14, 14, 4, -37, 5, -44, 9, -20, 54, 4, -17, -14, -9, 15, -5, -3, -35, 17, -9, -6, 19, 18, -1, 14, -29, 22, 10, 3, 7, 6, 20, 4, 39, -12, -49, -16, 10, 25, 18, 6, 20, -16, 9, 4, 2, -1, -3, -1, -8, 6, -33, 13, -9, 20, -42, 6, -2, -59, -31, 7, -4, -11, 20, 32, 20, -16, -16, -20, 17, -18, -25, 2, -15, -83, -6, -3, 12, -6, 4, 65, 20, -11, 11, -27, -6, -18, 14, -6, -26, -5, 1, 3, -5, 104, -19, 1, 5, 42, -45, -1, -10, 2, -20, -41, 3, -56, -5, -3, 17, -3, 4, -11, 9, 17, -5, -15, 3, 0, 5, 30, -27, 0, -22, 1, 33, 12, 50, 8, 24, 81, 30, -21, 11, 13, -6, 28, 16, -13, -43, -34, 24, 3, -14, -23, -18, 44, -28, 32, 24, 20, 40, 18, 14, 18, 27, 10, 24, 29, -32, -42, -50, 11, -42, 22, 42, 12, 19, -41, 32, -5, -46, -52, -47, -20, -70, 16, -37, 25, 8, -36, 4, -73, 32, 24, 1, 13, -12, -12, 52, 69, 6, -13, -42, 24, 24, 44, 16, -14, 30, -8, 6, 47, -19, -27, -10, -63, -53, 5, -22, -22, 8, -16, -25, 4, 1, -14, 19, -13, 43, -66, 4, 20, -8, 2, 48, 31, 19, 20, -3, -39, -16, 1, -3, -4, -12, -19, 10, 13, 4, -13, -7, -12, -1, -8, -5, 24, -8, 14, -5, -9, -24, -52, -19, -22, 7, -5, 27, 19, -3, -13, 15, -39, 15, -18, 47, -8, -8, -5, -3, 5, -4, 1, -22, 11, 2, -1, 35, 9, -13, 7, -19, 9, 3, -14, -32, 61, -1, 2, 17, -13, -32, -21, 23, 18, -41, 30, 29, -18, 2, -1, 8, 4, 9, -2, -10, -9, -27, 17, 14, 17, -29, 11, -35, -63, -39, 11, -22, -8, 32, 11, 16, -6, -14, -20, -14, -29, -5, 0, -3, -64, -7, -9, 22, 0, 11, 72, 10, -3, 6, -32, -1, -14, 21, 1, -33, -6, -27, -5, 2, 76, -19, 0, -6, 37, -59, -12, -18, 2, -10, -47, 17, -62, -16, -4, 28, 4, -1, -23, -10, 28, -4, -27, 3, -14, 11, 27, -39, 16, -8, -5, 39, 66, 55, 0, 21, 66, -7, -21, 23, 11, -14, 24, 13, -37, -50, -32, 12, 11, -1, -36, -21, 48, -29, 30, 26, -13, 23, 18, 15, 18, 18, 10, 20, 16, -13, -33, -78, -23, -27, 10, 30, 2, 27, -58, 36, 4, -68, -60, -40, -15, -69, 2, -44, 4, 7, -39, 15, -75, 24, 29, 8, 10, -26, 0, 59, 31, 8, -18, -47, 6, -28, 49, 24, -17, 38, -22, 2, 42, -28, -19, -38, -74, -42, 23, -18, -32, 12, -8, -27, 1, 18, -25, 21, 9, 19, -81, -7, 25, -3, 11, 27, 34, -51, 56, 2, -43, -14, -5, 8, 4, -3, -12, 31, -5, 6, -3, -7, -9, 0, 3, 9, 35, -39, 13, -5, 28, -24, -22, -40, 60, -4, -4, 5, 18, 18, -22, 28, -28, 20, -15, 42, 24, -16, -9, -1, 8, 7, 12, -15, 1, -5, -11, 38, 1, 35, 7, -14, 18, 4, -25, -26, 19, 16, 9, 22, 0, -100, -23, 13, 12, -40, 3, 2, -11, -5, -12, 2, 1, 6, -1, -26, -7, -15, 14, 17, 23, -45, 7, -21, -78, -38, -2, -10, -10, 22, -2, 14, -19, -18, -38, 1, -30, -19, -11, -15, -65, -7, -6, 13, -10, -4, 73, 17, -18, 13, -14, -17, -22, 21, 2, -59, -10, -48, -3, -15, 51, -37, -3, -14, 35, -52, -23, -26, 8, -13, -50, 6, -20, -9, -3, 29, 12, -1, -20, 1, 8, -12, -28, 4, -18, 5, 43, -42, 8, -27, -2, 46, -1, 57, 20, -18, 43, -8, -34, 27, 34, -21, 27, 12, -38, -30, -29, 38, 6, 0, -22, 6, 42, -32, 44, 28, -41, 23, 45, 8, 28, 39, 16, 22, -14, -37, -40, -121, -11, 11, 10, 17, 16, 44, -34, 34, 23, -67, -76, -50, -44, -42, 19, -54, 22, 12, -44, 16, -102, 8, 27, 13, 18, -1, 0, 56, 19, 13, -13, -73, 30, -62, 46, 11, -28, 25, -36, 21, 43, -28, -32, -40, -86, -52, 21, -23, -72, 17, -31, -22, -26, 11, -28, 36, -3, 8, -98, -41, 15, -13, 14, 50, 60, -58, 29, 2, -18, -35, -13, -23, 17, -6, -18, 32, 0, 6, -7, -18, 10, -3, 5, -5, 51, -84, 8, -4, 24, -19, -46, -30, 3, -1, 2, 2, 8, -10, -15, 52, -39, 30, 1, 34, 37, -16, 3, -35, 10, -2, -1, -20, -8, -2, -2, 26, 23, 9, 4, -18, 20, 6, -48, -43, -1, 25, 4, 28, -9, -46, 1, 44, 19, -32, -25, 11, -12, -9, -6, 3, 14, 5, 5, -18, -19, -18, 23, 8, 42, -26, 18, -45, -81, -46, 0, -40, -4, 45, 1, 31, -18, -12, -28, 25, -27, -52, -2, 7, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 2,1024 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0095390472561120987, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[32] = { -100, 946, 1060, -761, -3667, 797, 322, -954, -1181, -535, 1083, -2455, 766, -367, -2736, -321, -572, -473, 78, -1263, -399, -2296, 1225, 974, 34, -163, -611, -1773, -2077, -501, -1706, -883, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<32, float> quant5_scale = { 32, { 6.7414068325888366e-05, 8.9251749159302562e-05, 8.9447508798912168e-05, 5.8874255046248436e-05, 4.8427180445287377e-05, 8.9094573922920972e-05, 8.8476124801672995e-05, 6.3863801187835634e-05, 8.6010833911132067e-05, 5.924524157308042e-05, 8.7695145339239389e-05, 6.4988460508175194e-05, 8.2249600382056087e-05, 8.0890822573564947e-05, 4.6373523218790069e-05, 6.1782840930391103e-05, 7.2940834797918797e-05, 7.8892138844821602e-05, 6.6930486354976892e-05, 7.1938367909751832e-05, 8.9240988017991185e-05, 5.4530155466636643e-05, 8.5798601503483951e-05, 8.8794105977285653e-05, 7.6489945058710873e-05, 8.5981351730879396e-05, 6.7941087763756514e-05, 5.4262600315269083e-05, 5.3459516493603587e-05, 7.071397703839466e-05, 6.1903177993372083e-05, 9.7296622698195279e-05, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[32*3*3*16] = { 
  /* [0][0][][] */ -35,-78,34,-122,52,-29,-55,11,24,-6,-3,-72,-28,12,10,-3, -6,-11,18,71,-77,-52,-32,-24,4,5,4,16,97,-13,-23,-52, 47,16,15,41,-18,-58,-28,43,-24,20,-2,-19,19,17,5,-44, 
  /* [0][1][][] */ -56,-127,27,-21,38,24,-9,2,19,40,58,-61,-42,-46,16,-3, -24,-91,37,19,-122,22,-105,-17,-15,-57,26,16,-12,-112,-40,9, 28,24,8,32,-30,-19,-23,21,-18,9,-2,40,4,-12,59,-30, 
  /* [0][2][][] */ -11,-103,64,-10,27,-26,34,28,45,19,49,-47,-75,-66,-17,24, -18,-71,31,40,-119,1,-41,1,14,-36,1,58,-78,-25,-52,0, 41,15,19,45,8,-39,-15,6,-48,-12,-52,5,37,10,45,6, 
  /* [1][0][][] */ 17,-106,-17,-76,-38,27,39,23,-35,-19,11,-22,-96,26,30,10, 5,-86,-23,-49,-85,10,-14,16,9,14,24,-3,-57,-6,-4,-3, -4,-107,-14,-82,-30,11,-58,-10,6,5,17,-10,-92,-8,-28,-15, 
  /* [1][1][][] */ -4,-54,3,-3,-40,33,-4,22,13,-9,-6,-27,22,21,43,3, -19,-37,-23,-14,-39,38,-29,-10,19,-11,-46,-20,24,2,-4,-14, -27,-87,0,-23,-64,20,-19,-9,5,-22,1,-14,-51,-8,-42,23, 
  /* [1][2][][] */ 18,10,-18,-65,-127,-1,-55,12,-29,5,13,-24,-32,-8,50,8, 13,-12,-38,3,-53,31,-47,6,3,-21,8,-1,9,7,14,-4, 1,-29,-48,-111,-80,22,-50,8,-10,20,10,11,-89,-16,-41,0, 
  /* [2][0][][] */ -10,-123,-7,-64,-63,25,-4,23,-3,-14,30,-33,-70,10,43,1, 10,-95,-22,12,-71,15,-13,-4,-19,0,2,-20,-47,1,-4,5, 2,-127,-33,-111,4,4,-48,-4,27,5,19,-14,-88,-23,-34,16, 
  /* [2][1][][] */ -6,-67,14,-27,-9,47,-30,-3,-3,-17,19,-14,-41,-9,20,4, 1,-49,-2,18,-61,25,-39,5,35,-9,-24,-4,73,10,-14,17, -2,-54,-27,-53,21,27,-31,1,13,-15,-45,-23,-72,-23,-49,-9, 
  /* [2][2][][] */ 3,-10,9,-100,-58,33,-43,6,-8,-8,14,-21,6,27,43,5, 21,-18,-74,-28,-106,32,-75,-10,5,-3,-15,12,-7,-24,-5,0, -9,-29,-48,-26,-49,-1,-52,2,14,28,6,10,3,-7,-18,8, 
  /* [3][0][][] */ -26,-87,20,32,20,-30,65,-28,38,-43,13,-69,19,33,23,-25, -13,13,27,-30,9,-4,10,-6,1,13,28,-40,-29,-39,-19,-60, -6,-54,-8,-120,-28,89,36,28,-35,-10,-52,-93,-73,45,19,27, 
  /* [3][1][][] */ 2,-54,-48,40,23,-40,-14,-43,43,-16,-50,-71,63,42,0,-28, 3,-10,29,-18,6,-2,-23,-53,12,-8,32,-24,-25,5,-14,14, -38,-93,21,-59,-39,105,64,-1,-35,18,71,-49,24,27,22,-20, 
  /* [3][2][][] */ -28,13,35,74,-31,-39,5,-22,-34,-9,19,17,14,3,16,-68, -9,-1,53,-9,22,35,-35,-44,21,2,13,-13,-32,6,-24,55, -11,-127,-37,12,-25,33,12,49,3,-11,-11,-44,26,15,12,23, 
  /* [4][0][][] */ 30,-2,31,23,28,17,-70,-48,-35,-28,-37,104,54,29,91,-14, 26,22,-86,15,109,20,7,-38,-30,-37,-47,-18,5,39,-34,-12, -62,16,31,28,11,68,-35,9,49,59,32,-57,-46,31,-51,-24, 
  /* [4][1][][] */ 20,-4,90,23,-127,-57,-21,14,-63,-108,8,86,-57,16,47,33, -3,-9,-45,57,21,53,-26,-5,16,-28,7,-21,-50,-29,-49,7, -58,-3,7,16,-38,21,-93,-11,59,59,33,-5,-29,59,-39,-17, 
  /* [4][2][][] */ 37,-6,107,-43,-3,-14,-32,-97,-59,-117,-66,66,-60,73,78,-78, 42,76,-89,42,53,69,16,42,16,-22,-38,-10,-7,44,2,-28, -66,-60,4,-18,-59,52,-63,-27,25,101,53,-23,-1,60,-60,30, 
  /* [5][0][][] */ 16,-65,-16,-26,-22,-23,15,-11,-39,-20,-20,6,-25,20,57,-20, 10,-46,-10,-11,51,16,-22,4,-15,-20,7,22,-23,12,-10,-15, -6,-17,16,-60,14,0,-20,1,38,31,27,12,-1,-30,-68,3, 
  /* [5][1][][] */ 11,-107,21,6,-47,16,-29,0,-5,-31,-36,-15,-3,-8,59,4, 10,-36,-51,22,53,25,-65,0,9,41,-26,22,-33,-4,22,8, -39,-26,25,-79,-7,25,-75,-3,13,-8,3,-15,36,-22,-66,3, 
  /* [5][2][][] */ -4,-66,18,-14,-32,-23,-68,-1,-22,-12,-5,-13,57,0,45,-11, -11,-127,-67,24,34,30,-95,7,-7,-10,10,-1,-13,-35,2,3, -32,-26,17,-62,11,40,-58,4,14,28,44,-16,-4,-21,-62,22, 
  /* [6][0][][] */ 1,-43,1,17,-30,-36,-4,-2,52,49,43,2,-32,12,-17,7, 6,15,9,11,4,27,-31,33,19,-5,13,6,0,-58,1,17, 40,2,12,-22,93,-30,-13,-22,-63,-24,10,9,21,-10,-1,-34, 
  /* [6][1][][] */ -12,-38,-3,-31,-24,5,-19,9,-7,20,41,6,-16,31,-22,-20, 1,-11,27,-3,37,-14,-32,6,33,17,-24,-22,-15,-36,-19,53, -7,0,25,13,-55,-12,-2,-23,-40,-41,13,20,-55,-32,-23,-6, 
  /* [6][2][][] */ -18,-127,-14,16,14,-33,9,-6,25,34,27,3,-70,10,23,-3, 22,42,-47,-8,38,-63,-43,11,12,-10,8,-27,-9,-51,7,16, 15,29,27,-14,56,-2,23,-12,-15,-54,1,-9,-12,-19,23,7, 
  /* [7][0][][] */ 6,-33,-15,-2,4,-7,-35,-84,-5,-17,18,46,20,7,-127,-5, -3,5,-5,-35,49,-62,9,-33,-51,7,-31,41,28,43,-82,-10, -6,37,12,28,-89,-6,-20,-77,-24,-38,27,46,-57,-23,59,-24, 
  /* [7][1][][] */ -20,35,29,7,-23,-70,-51,-91,-29,-13,-4,41,30,-29,-108,0, -11,-35,6,-10,45,-64,-5,-17,11,9,-8,-21,-2,14,-41,-2, 20,-3,-5,25,22,11,-6,-57,9,-24,-11,0,35,36,87,16, 
  /* [7][2][][] */ 8,48,4,13,79,-36,-30,-45,-23,-18,8,-5,39,47,-69,-26, -37,36,27,-20,-5,-9,-23,-75,-43,-2,-6,32,-44,5,-24,-20, -8,-17,-32,17,40,-62,24,-13,36,-14,3,-11,45,31,64,57, 
  /* [8][0][][] */ 47,-127,-94,-54,40,14,-5,16,-51,-21,-78,28,-36,-4,30,15, -44,-45,-9,11,-6,32,19,17,2,29,-14,-36,-30,-5,16,-27, 13,0,-6,-12,-44,-21,-4,-4,13,19,31,5,10,7,-11,22, 
  /* [8][1][][] */ 32,-51,-62,-37,8,2,34,17,5,-6,-46,11,-10,-17,-3,28, -60,-66,-8,-39,-12,21,34,1,3,-18,20,-27,-3,19,-5,6, 2,-30,18,-25,-9,3,11,-15,-10,19,29,18,-5,-11,26,0, 
  /* [8][2][][] */ 4,-52,36,17,-19,20,27,3,-6,-30,-8,-5,17,-5,18,27, -49,-123,-17,-55,-16,11,52,-23,-9,-15,37,-30,14,-3,-8,9, -1,-35,-9,-4,-16,30,-31,22,36,16,31,12,23,2,37,28, 
  /* [9][0][][] */ 2,14,-30,24,24,-71,-6,46,59,34,102,31,29,-69,17,45, -62,-17,25,53,1,-8,2,-34,5,-4,51,-32,-29,6,-18,-19, 47,-3,11,25,27,23,-13,-44,-21,-30,25,26,40,-127,38,53, 
  /* [9][1][][] */ -19,-2,-51,12,-87,-56,-85,28,60,-5,32,-19,-25,-100,48,-25, -41,-58,4,16,29,-49,3,35,-17,8,41,-41,-46,51,7,-1, 20,1,-17,35,-89,-18,-11,-39,18,-69,-6,20,9,-107,31,30, 
  /* [9][2][][] */ -47,18,35,-27,-10,-16,-79,20,46,17,60,2,21,-79,47,31, -22,-3,19,46,-15,-30,-5,61,-94,51,24,-2,-6,4,-4,-36, 4,-2,-15,-31,-95,-50,-15,-41,21,-52,-6,-6,-6,-69,65,57, 
  /* [10][0][][] */ -10,-44,-20,-80,11,-3,-56,-25,-13,-34,-35,28,8,40,33,-5, 16,18,-11,19,8,10,3,4,-13,18,-19,-15,-11,18,-25,9, -53,-4,30,3,8,5,-27,13,34,23,13,3,6,-22,-39,-2, 
  /* [10][1][][] */ 10,-85,8,-70,-59,15,-26,1,7,-40,-50,-2,9,-10,54,12, 11,-35,-20,-26,-12,-24,-33,-2,-26,14,1,16,16,17,-54,17, -61,-16,20,-48,-26,7,-28,-22,25,31,19,-10,14,-36,-56,-32, 
  /* [10][2][][] */ 24,-48,7,-76,-12,21,-63,-6,-34,-19,8,-6,38,28,43,-32, 16,-35,-69,47,18,-17,-55,-19,-14,11,-7,6,12,-7,-78,18, -60,-13,37,-28,-38,43,-9,26,-15,21,7,-30,-23,-3,-127,-5, 
  /* [11][0][][] */ 35,-30,-50,-14,-17,-14,48,-28,4,-25,-37,44,48,17,-1,35, 37,-15,-29,8,20,-7,34,-3,36,9,-76,-19,7,24,-32,-17, -53,-43,-33,-13,26,25,4,-18,18,56,47,-31,-15,-8,26,41, 
  /* [11][1][][] */ -2,-12,11,-10,-63,10,40,5,-36,-44,-17,31,67,9,17,9, -9,-127,-83,20,-27,16,2,8,-81,-35,-118,-12,-52,-17,7,-29, -27,10,15,47,-5,26,-15,7,18,31,17,-23,-17,25,44,37, 
  /* [11][2][][] */ 42,-42,13,-54,-67,59,46,-8,37,-49,5,-2,91,13,33,66, -4,-63,-60,-11,12,11,30,25,22,10,5,-23,6,46,16,20, -21,-62,7,31,-54,33,-9,11,29,22,45,-32,-29,-31,8,19, 
  /* [12][0][][] */ -4,-23,-83,25,-43,-62,-76,-14,-27,-19,-81,28,-27,-27,12,-42, -14,-27,-9,-90,38,22,9,25,-33,-21,-22,-24,-106,1,21,-60, 9,32,7,-58,0,23,-37,26,26,1,33,15,-44,23,-21,-41, 
  /* [12][1][][] */ 8,-88,-66,-47,-55,-62,-116,-25,-33,-15,-108,7,-86,-32,14,-48, 15,-44,-40,-85,18,-11,33,30,-106,-6,-126,-29,-88,4,2,-70, -6,11,-4,-60,-17,-16,-41,3,24,35,13,-9,-67,16,-14,-34, 
  /* [12][2][][] */ 25,-59,-111,-53,-65,-61,-65,-8,-74,21,-73,53,17,-23,18,-76, 23,13,-48,-83,21,8,22,19,-91,-22,-60,-4,-67,14,19,-119, -2,31,22,-127,2,0,-68,14,32,15,2,-32,-31,26,-17,-18, 
  /* [13][0][][] */ -23,-49,69,-77,-30,10,47,-7,22,-42,40,-82,28,14,10,18, -9,-64,14,32,-40,-7,52,3,-32,16,12,-71,50,16,10,-29, -24,-17,16,-13,-5,40,18,-1,33,13,21,-11,19,-4,-6,36, 
  /* [13][1][][] */ -8,-72,13,-98,-20,-4,5,-21,26,-16,-40,-86,38,35,7,32, -31,-62,31,37,-73,14,21,-6,24,10,-30,-63,45,10,-4,12, -32,-38,3,-9,-10,28,5,6,35,3,14,-39,-11,-4,-5,25, 
  /* [13][2][][] */ 17,-127,-42,-89,-18,-6,-82,-15,-35,-33,-5,-66,12,32,-12,-4, 11,-5,10,5,-60,13,-33,-37,-36,12,-6,3,-16,6,38,-19, -7,-20,10,1,-17,27,-6,-44,-4,0,21,11,25,-10,20,8, 
  /* [14][0][][] */ -69,3,18,-19,88,52,30,-16,-28,-47,42,111,1,-2,36,52, -48,25,-38,-40,54,2,-92,47,-10,57,-78,-69,-97,14,94,-115, -104,-11,16,-18,16,-13,-50,-22,-6,-3,24,28,2,-22,50,14, 
  /* [14][1][][] */ 14,-5,-21,-104,65,14,46,25,-4,-72,-31,37,27,10,25,95, -36,-21,-44,39,3,91,-50,7,-16,-22,-40,-93,-44,69,65,-48, -109,-46,0,-16,21,44,37,-46,-4,-2,56,9,27,0,19,14, 
  /* [14][2][][] */ 34,-86,34,-97,17,18,59,-14,-5,-52,-17,33,38,57,12,87, -6,-127,61,32,-3,96,40,36,15,-3,56,-79,-17,30,73,-83, -66,-59,-8,-5,15,-16,-14,-5,61,42,57,16,-18,-32,-46,46, 
  /* [15][0][][] */ -45,-23,30,3,-20,34,12,-28,23,22,25,-38,-30,-38,12,5, 15,-55,47,32,36,4,21,27,0,31,4,21,40,-39,-12,1, 45,-21,-24,26,32,7,-83,31,-68,-75,-29,57,-20,-81,52,29, 
  /* [15][1][][] */ -68,-64,6,7,-31,1,34,8,17,24,41,-13,9,-48,50,-33, -10,-83,40,20,59,7,-5,0,20,-8,-10,75,-4,-101,-36,-17, -22,17,40,-30,30,-50,-88,6,-50,-14,19,41,-1,-47,31,51, 
  /* [15][2][][] */ -24,-62,-9,47,-127,40,70,39,50,10,82,-55,-23,-63,41,-21, 14,-35,40,-11,6,49,12,9,52,26,2,41,-3,-56,-62,-25, 27,-21,62,17,-28,-5,-78,21,1,30,-33,12,35,-54,4,19, 
  /* [16][0][][] */ 42,38,-23,-91,57,24,4,-45,-26,-23,38,41,41,-38,51,61, -26,-3,-20,-12,-12,-15,42,35,-2,2,-8,-46,-5,9,-38,-33, -8,3,-12,-1,-23,37,4,-16,-14,-19,7,-24,15,-22,32,15, 
  /* [16][1][][] */ 31,21,-127,-61,8,-3,-23,-11,14,-21,15,45,55,-33,5,26, -77,-23,19,-101,-12,16,24,17,19,10,-17,-74,2,37,-36,21, -14,-48,0,15,-46,16,28,2,9,-11,31,-47,-8,-24,31,10, 
  /* [16][2][][] */ 47,-53,-99,-14,38,1,-54,-43,-13,-13,-8,28,53,-16,0,4, -30,-51,12,-84,-13,-11,32,14,5,-4,-4,-40,2,41,-24,-3, 5,-9,9,12,-42,40,55,16,19,2,27,-46,19,-19,7,42, 
  /* [17][0][][] */ 8,11,-61,-8,-68,-12,-91,-72,16,9,-41,33,79,-17,-10,-12, 27,8,12,-13,-11,-14,-14,10,28,1,-28,-36,17,14,-82,18, 2,30,11,-24,-127,8,-19,35,-6,4,19,-28,-68,1,44,-14, 
  /* [17][1][][] */ 4,5,-101,-32,-115,34,-8,-44,30,-2,35,0,-8,9,38,-42, 7,-29,-6,-7,-49,-24,2,6,35,8,7,-38,29,34,-42,29, -70,8,20,-5,-82,26,1,-11,18,3,14,-6,-28,-20,-9,-15, 
  /* [17][2][][] */ 11,9,-93,-6,-56,48,-84,-79,18,9,3,32,31,3,30,17, 11,0,-6,-17,-32,28,-25,29,12,-5,-14,-51,22,40,-58,26, -22,-7,-1,-33,-53,45,37,13,17,0,42,-28,-30,-12,8,-17, 
  /* [18][0][][] */ 35,-97,32,-10,10,12,74,-19,14,-8,-37,-78,21,-32,68,23, -6,-92,-8,-12,-14,32,68,3,-7,-25,61,-39,-11,-3,1,-31, -34,-58,-26,-55,-39,-21,42,9,62,65,32,-33,17,-10,-60,40, 
  /* [18][1][][] */ 17,-127,-7,-36,-19,7,44,-2,4,5,-93,-43,-38,-30,68,16, -17,-71,6,12,10,44,42,-24,-10,-33,32,-34,-21,-5,35,-29, 0,-81,-36,-101,-74,-10,9,5,17,66,-7,14,-59,-23,-63,1, 
  /* [18][2][][] */ 1,-66,-13,42,-18,29,20,-40,38,-40,11,-56,20,-32,91,49, -11,-87,-17,16,-1,30,46,-19,-3,-12,39,-46,15,-27,29,-42, -76,-9,-2,-45,-73,-30,46,-11,55,74,58,-23,-15,-10,-78,45, 
  /* [19][0][][] */ 26,-69,3,16,48,15,14,20,-64,-1,-17,18,-53,18,-8,7, -12,-5,-63,-111,-8,83,27,15,-23,-25,-23,-19,-52,2,86,-4, -21,-83,-24,12,-38,10,3,-13,8,6,46,35,2,-35,-19,11, 
  /* [19][1][][] */ -24,-41,36,0,-12,22,17,16,-32,-5,-6,-31,-26,5,-38,4, -37,-33,-26,-37,-20,49,31,4,2,-57,11,-14,-32,4,20,3, -23,-47,24,18,1,-10,2,-31,-19,-23,42,56,74,-38,2,12, 
  /* [19][2][][] */ -6,-44,39,20,-38,43,33,-21,38,16,2,-24,-25,21,1,17, -19,-127,3,38,-23,35,68,-16,3,-32,77,-42,-27,11,62,-2, -16,-67,7,-23,-22,-3,-17,-59,30,1,16,36,79,-15,12,31, 
  /* [20][0][][] */ -26,-57,50,-29,2,12,-15,-14,25,0,81,-58,-18,-13,12,11, -7,7,-50,50,-13,-58,-62,-19,32,-52,38,-33,11,-14,-4,40, 5,-14,31,20,5,39,-6,-56,-13,-46,31,18,33,-46,12,-11, 
  /* [20][1][][] */ -13,-83,-20,-95,-30,5,30,35,4,38,58,-52,-38,-16,-12,-9, 0,-8,-104,0,-26,-19,-62,-39,0,-69,66,-43,-3,-22,-3,37, -4,10,40,39,19,30,-1,-18,-5,-68,18,25,17,-17,14,29, 
  /* [20][2][][] */ 25,-99,-16,-100,20,24,37,-65,-17,-13,24,-10,-27,-24,13,-65, -1,-127,-80,-29,-59,-15,-104,-84,-98,-63,83,16,-9,-61,-6,-97, 18,-10,-7,-8,31,24,-10,-87,-31,-86,14,40,25,19,17,-12, 
  /* [21][0][][] */ -20,-28,60,9,6,34,-22,-39,-10,-26,24,36,2,-127,-86,40, 47,-18,100,-61,-34,-4,42,15,28,10,-3,-6,-106,-3,31,18, -18,20,46,-3,-47,14,-15,61,-5,69,27,-31,-3,48,-75,-95, 
  /* [21][1][][] */ 15,-30,96,-50,-4,4,23,-36,14,-67,-7,14,-20,-20,-29,16, 21,-5,11,-31,4,-52,54,-34,-42,-1,-31,-37,-5,1,24,49, -11,20,12,-1,-35,38,-39,45,-6,11,-15,-41,-13,58,33,-94, 
  /* [21][2][][] */ 0,-78,123,-98,65,19,19,-8,28,-33,23,41,17,-50,-13,43, 23,-13,12,-12,33,-30,2,-34,-58,-33,-36,12,-34,10,17,10, -4,0,29,35,4,20,-71,67,32,34,44,-61,-26,33,-45,-71, 
  /* [22][0][][] */ -8,-22,22,-15,4,17,5,14,-29,-1,0,-23,-127,-25,-45,-2, 16,15,48,-19,-16,13,-20,2,-14,2,-2,-19,26,-15,21,3, 25,-11,-74,-8,35,-10,2,36,-24,3,-3,10,-8,17,-21,-23, 
  /* [22][1][][] */ 9,-16,10,3,-57,-8,-4,18,-7,-16,23,-14,-63,-40,-54,18, -5,-30,9,17,-45,27,-45,-15,-2,-6,-43,-19,23,-32,-1,11, 20,9,-33,-8,-34,-12,18,12,-31,7,-24,-9,4,-4,-19,-14, 
  /* [22][2][][] */ -2,34,16,-4,-79,2,-15,16,-49,36,30,5,-35,-28,-3,-24, 7,-14,18,17,1,16,-48,-1,2,-15,-14,34,43,-12,13,-4, 30,-6,-43,-11,-19,26,-12,25,-21,23,-8,18,-34,-3,27,6, 
  /* [23][0][][] */ 21,78,-84,51,21,-24,43,-57,27,-51,-12,65,-62,-43,-12,10, 21,-40,-68,-41,-98,-18,9,45,-47,-51,-97,30,-83,-13,18,-72, 17,-18,-84,-42,32,6,-114,-28,-57,-55,-56,24,-51,-20,-4,-74, 
  /* [23][1][][] */ 17,61,-73,-22,-1,6,52,-61,-20,9,-127,26,-22,-31,-7,-64, 14,46,-57,-73,-101,-1,69,42,-50,15,-56,-9,11,-23,-2,-61, 3,80,-89,-8,40,-21,-48,-5,-45,-44,-119,30,-99,-50,-17,-73, 
  /* [23][2][][] */ 24,39,-86,-33,-92,-1,43,5,-7,57,-55,22,-73,-15,7,-52, 18,87,-73,-113,22,-16,15,5,-120,-23,-29,26,-13,-38,-3,-72, 1,37,-71,-88,18,-3,-68,-70,-121,-16,-47,16,-86,-32,-6,-96, 
  /* [24][0][][] */ -26,18,-42,0,-33,-12,5,60,21,32,84,1,-46,28,49,8, 14,11,-27,-9,23,17,-76,-2,-9,3,5,28,-77,-90,26,-19, -4,33,-51,-32,42,-70,-65,-47,-38,26,-43,34,66,-29,-21,-68, 
  /* [24][1][][] */ -46,12,-14,-12,-36,-26,8,43,13,-7,4,-12,-56,18,33,18, 0,16,-6,-32,-80,-6,-75,-20,20,-18,9,39,-50,-127,33,17, 18,29,-46,26,-7,-59,-25,-47,-39,-4,-8,27,13,-37,-8,-20, 
  /* [24][2][][] */ -21,6,-25,-22,-46,6,8,55,-24,7,51,-18,-43,20,42,14, -21,4,-22,-7,25,-36,-31,-17,30,-2,-7,26,-8,-54,3,24, -5,-46,-56,-2,40,-56,-35,-31,-33,57,1,-27,4,22,-21,-30, 
  /* [25][0][][] */ 0,-4,-64,-39,-97,-113,-39,-31,-53,-18,44,-72,-61,-22,-14,-87, 1,21,26,1,-16,28,24,11,33,-4,-11,10,-20,-11,20,40, 15,-108,-108,-3,-34,-9,26,-6,0,34,6,-11,5,29,-12,-44, 
  /* [25][1][][] */ 13,20,-37,44,-77,-87,-104,-44,-38,-59,-39,-43,-62,-67,-53,-78, 3,12,31,0,-23,-37,24,-1,15,-12,-25,7,-25,-21,15,6, -10,-42,-71,-12,-44,5,49,-19,6,16,-3,-1,13,20,-14,-17, 
  /* [25][2][][] */ 1,-72,-127,6,-78,-24,-96,-12,-58,-24,30,35,-75,-42,-41,-29, -11,27,4,-4,-24,-11,30,15,-1,-22,-21,31,-23,-7,6,-1, 0,-76,-70,-35,-14,-20,35,-55,-1,52,-51,16,52,30,2,-14, 
  /* [26][0][][] */ 41,-54,43,15,-38,43,-16,-46,34,61,29,9,15,-19,40,27, -42,-127,-24,-20,26,-26,23,7,45,-22,25,-35,-14,-12,-51,-6, -43,-59,11,6,-4,40,-17,-5,6,13,4,75,42,-65,39,30, 
  /* [26][1][][] */ 34,11,15,-7,-59,6,-17,-39,-31,-2,4,6,25,6,71,-18, -56,-89,39,-9,13,35,-2,6,46,-34,-56,-42,-38,-15,-34,2, -65,-85,35,-38,-117,-14,-1,24,-23,-12,-13,42,19,-10,38,-27, 
  /* [26][2][][] */ 51,30,-33,-34,-32,-8,-18,8,-30,51,66,36,35,18,81,-6, -38,-43,30,22,-40,-5,8,25,4,-32,-11,-42,-2,-23,-100,30, -24,-44,65,5,16,-11,28,32,-29,2,2,25,-23,-46,17,-6, 
  /* [27][0][][] */ 48,24,45,-51,4,39,16,-35,2,-32,42,34,90,-9,1,48, 23,32,1,-11,14,33,28,-4,39,-2,-17,-53,16,2,-24,-8, -80,-101,17,-1,-22,55,-2,43,42,-11,59,-127,23,-6,62,19, 
  /* [27][1][][] */ 26,50,5,-57,11,-26,-32,-59,-11,-56,7,75,1,-30,24,24, 18,-9,-21,3,39,-4,41,28,-6,28,-46,-2,-11,19,-27,-60, -83,-20,-19,-27,-60,19,-8,48,7,24,40,-72,22,34,-26,33, 
  /* [27][2][][] */ 29,51,-66,-91,43,-66,-21,-48,9,-8,-18,49,-8,-27,45,60, 12,77,-102,1,31,-57,-72,41,-5,16,-117,-3,-34,-6,58,12, -99,12,-16,54,-17,-20,-46,-4,27,31,-48,-29,-28,63,68,-28, 
  /* [28][0][][] */ -19,-98,84,-14,-18,70,103,-51,0,-89,78,-16,-10,77,38,35, -10,26,-25,27,-31,-22,64,-54,-12,24,-32,-33,-9,63,20,-33, -22,72,57,-63,55,0,38,54,-1,-18,-13,-126,-72,59,4,14, 
  /* [28][1][][] */ 4,-91,73,-51,3,-31,35,-76,-30,-51,13,-57,28,54,11,12, -53,15,23,-17,-57,-17,28,-60,-17,20,-41,-51,-7,-14,27,-30, -40,-25,20,-127,21,5,-30,-13,-11,-13,-5,-114,-124,9,-54,-78, 
  /* [28][2][][] */ 9,-23,72,29,28,25,49,-58,-5,-30,0,8,-21,28,53,7, 1,12,49,48,-25,15,84,-63,-4,-21,-22,-48,-15,31,30,44, 11,-78,-16,-12,44,-5,-38,48,31,-9,-9,-75,-65,99,24,-49, 
  /* [29][0][][] */ 63,38,-35,-22,0,31,-2,24,-14,18,-18,25,-34,-12,23,-15, -87,-12,-30,-35,4,-43,12,16,34,16,24,-8,-23,10,2,4, -40,-17,-9,-29,-61,-9,29,-33,20,18,49,-7,25,-60,43,-15, 
  /* [29][1][][] */ 28,-3,-14,-28,-59,74,-1,-38,17,-11,-20,-9,11,8,39,37, -84,-21,6,-12,-3,16,29,-9,-9,-34,-14,-16,-4,32,-31,19, -15,-22,56,-40,-9,-80,-14,-36,23,33,0,-13,2,-74,27,-8, 
  /* [29][2][][] */ 65,-95,-23,17,-32,-20,-4,20,1,-8,-32,46,25,4,67,13, -62,-57,-14,-24,-7,31,56,-46,9,-37,9,-38,28,25,-21,38, -7,-53,8,-20,-127,-39,26,-10,50,21,47,-30,8,-21,-35,7, 
  /* [30][0][][] */ 6,54,0,53,-18,-34,-43,-78,-32,-33,33,-22,80,-65,-48,3, -17,33,64,16,-46,-6,64,0,44,29,-6,-31,-27,15,30,32, 17,-42,-69,28,-100,25,20,64,18,-63,37,-23,26,2,-14,-65, 
  /* [30][1][][] */ -19,-7,20,3,-16,-60,-24,-33,-43,-49,67,32,29,-65,-27,26, -23,-44,43,26,-85,32,45,21,-31,-5,-10,-18,-13,-9,31,-31, 21,-30,-32,10,-127,4,36,3,-28,-20,36,-71,-27,7,24,-115, 
  /* [30][2][][] */ -9,7,22,70,-16,-56,9,5,-42,-39,42,5,45,-59,-15,-1, -9,-10,52,16,-44,17,61,-1,-8,17,2,-15,-19,-33,33,32, -9,-17,-23,30,-75,15,19,6,-17,-27,-28,-20,37,40,27,-91, 
  /* [31][0][][] */ -1,-14,25,-8,8,11,-9,14,-16,-11,-6,-48,-11,27,-22,-23, -24,-18,19,-17,3,9,-15,5,-15,-16,-20,-7,18,14,6,1, -11,-50,10,5,-13,-1,-1,15,-11,-5,35,-9,21,-32,11,4, 
  /* [31][1][][] */ 22,-127,-14,-11,11,4,-21,17,8,-7,-26,-51,13,17,-11,-22, -12,-24,10,2,-31,23,12,1,20,10,23,-11,30,22,16,5, -8,-71,23,-15,-21,74,20,-1,27,7,41,-35,42,-34,0,33, 
  /* [31][2][][] */ 21,-11,-43,9,7,13,-65,13,-32,-7,-89,-38,-3,13,-23,-11, -7,-16,25,-4,-43,15,-11,-14,-35,9,-30,-6,-2,-8,9,9, 6,-25,25,-31,-5,18,-28,-29,28,-11,16,-3,21,-19,3,30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,3,3,16 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0053320419974625111, 0.0070592691190540791, 0.0070747528225183487, 0.0046565947122871876, 0.0038302948232740164, 0.0070468378253281116, 0.0069979219697415829, 0.0050512375310063362, 0.0068029328249394894, 0.0046859374269843102, 0.006936151534318924, 0.0051401909440755844, 0.006505441851913929, 0.0063979709520936012, 0.0036678628530353308, 0.0048866458237171173, 0.0057691754773259163, 0.0062398873269557953, 0.005293793510645628, 0.0056898863986134529, 0.0070584183558821678, 0.0043130028061568737, 0.0067861462011933327, 0.0070230723358690739, 0.0060498882085084915, 0.0068006007932126522, 0.0053737261332571507, 0.0042918408289551735, 0.004228321835398674, 0.0055930446833372116, 0.0048961639404296875, 0.0076955696567893028, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[16] = { 3961, -5712, -328, -213, -5817, -207, -6047, -1891, -608, 274, -411, 2203, -2384, 2038, 4811, -207, };
const TfArray<1, int> tensor_dimension7 = { 1, { 16 } };
const TfArray<16, float> quant7_scale = { 16, { 3.2963300327537581e-05, 4.6894740080460906e-05, 4.8858106310945004e-05, 3.1672589102527127e-05, 4.0779377741273493e-05, 4.4098160287830979e-05, 2.4671251594554633e-05, 5.081115523353219e-05, 4.1933697502827272e-05, 5.0987444410566241e-05, 3.0353452530107461e-05, 3.2346619263989851e-05, 2.3764241632306948e-05, 3.6629902751883492e-05, 3.7014913687016815e-05, 3.312396802357398e-05, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[16*3*3*8] = { 
  /* [0][0][][] */ 8,43,-34,16,-17,-6,70,8, -39,21,-3,-57,-25,28,56,1, -14,1,1,65,-14,26,127,55, 
  /* [0][1][][] */ -7,95,20,47,3,-44,19,-50, -49,6,-20,-6,-51,10,74,-30, -69,24,-7,38,11,60,41,-2, 
  /* [0][2][][] */ -30,63,-38,-17,-13,2,114,5, -3,49,44,0,-37,6,-23,-10, 19,-54,12,25,7,28,36,20, 
  /* [1][0][][] */ 5,10,5,19,-3,0,-12,32, 9,-58,33,-2,28,11,45,28, 39,35,1,-43,-37,-13,36,-27, 
  /* [1][1][][] */ 28,45,43,7,-8,6,42,28, 44,1,58,-2,12,-13,39,-13, 49,79,-2,-65,-29,6,-1,-38, 
  /* [1][2][][] */ -28,0,19,-22,31,42,35,24, 40,-127,41,-10,36,-2,26,3, -8,51,13,-17,-25,-37,-6,-60, 
  /* [2][0][][] */ -38,0,33,-10,-1,25,0,24, 67,12,27,-1,38,-65,-127,8, -26,6,-12,-2,-15,-28,11,-7, 
  /* [2][1][][] */ -60,16,10,0,-38,12,16,15, 47,10,19,-9,37,-13,-46,-29, -17,-6,-13,7,1,-34,-1,-21, 
  /* [2][2][][] */ -52,19,-31,-28,-48,5,11,-18, 20,21,39,0,42,38,7,19, 26,-5,-39,-2,-20,-44,-10,-25, 
  /* [3][0][][] */ 122,-52,73,10,70,1,-19,-1, -4,-34,29,13,-36,-51,-90,-23, 13,39,-35,-6,-15,-35,73,-35, 
  /* [3][1][][] */ 109,-43,52,19,40,-2,7,-24, -12,5,25,-11,-59,-26,-7,-14, 17,52,22,-11,-39,-92,59,-39, 
  /* [3][2][][] */ 127,-28,71,29,74,3,95,-26, -47,3,11,-1,-61,-61,-34,-5, 15,48,19,-8,2,-55,-15,-31, 
  /* [4][0][][] */ -15,20,-65,-15,-30,-18,-127,3, -47,33,-80,-14,-2,40,-73,-1, 55,76,42,9,20,33,-4,29, 
  /* [4][1][][] */ -7,-8,-49,-33,9,16,28,-26, -86,68,-83,-21,-31,57,-73,8, 4,72,18,28,60,40,23,29, 
  /* [4][2][][] */ -7,-15,-36,-32,-12,-11,-7,-42, -96,52,-111,-28,-19,9,-35,18, -14,59,-16,9,57,36,-31,47, 
  /* [5][0][][] */ -73,64,56,40,-9,20,-86,39, 30,-17,15,-21,25,17,-127,-7, -88,13,-13,28,20,6,-88,41, 
  /* [5][1][][] */ -66,57,-40,15,-9,13,-62,-32, 8,-13,40,24,23,32,-24,12, -78,41,-82,28,-24,12,-91,-5, 
  /* [5][2][][] */ -19,-18,-38,-6,-39,3,15,-19, -24,23,9,8,0,17,-74,-2, 54,-18,-27,-5,18,-11,-5,-29, 
  /* [6][0][][] */ -102,-15,29,54,-80,-11,98,10, 49,32,-15,-55,-8,21,12,-6, -22,-24,41,59,11,10,1,0, 
  /* [6][1][][] */ -122,14,35,7,-91,32,41,-30, 127,8,12,-39,59,94,-20,1, -24,61,44,20,12,10,-22,49, 
  /* [6][2][][] */ 10,3,8,5,-67,31,-31,-52, 122,30,101,22,77,104,27,65, 2,19,72,64,5,4,42,-10, 
  /* [7][0][][] */ 13,47,10,-46,-9,16,-33,14, -11,34,-38,19,34,-1,-66,22, -9,7,-17,-7,23,-7,-27,11, 
  /* [7][1][][] */ 24,66,7,-42,13,-11,-49,6, -52,35,-62,9,-8,6,-110,7, -49,-24,2,-14,-5,-23,-127,22, 
  /* [7][2][][] */ -9,47,3,-30,-3,22,-14,7, -9,9,-69,-1,29,-3,-22,-4, -22,-33,14,5,-10,21,9,12, 
  /* [8][0][][] */ 70,13,-4,14,16,-5,-127,-5, -39,-14,41,22,5,4,6,42, 51,20,-41,-45,18,12,-1,-18, 
  /* [8][1][][] */ 32,10,8,6,2,-26,-12,-27, -67,37,69,3,-25,-18,10,-4, 46,-32,-79,-26,11,17,-69,-25, 
  /* [8][2][][] */ 20,20,42,-3,15,42,12,-22, -39,43,31,-17,-22,-11,-20,-4, 107,-37,-40,-4,38,17,11,-22, 
  /* [9][0][][] */ 53,35,10,48,7,27,-23,18, -72,1,-35,1,-8,0,-79,1, -2,-48,3,3,-7,28,16,15, 
  /* [9][1][][] */ 19,40,-42,-7,-4,35,-127,22, -25,-36,-9,-2,-3,-19,31,-29, -2,-38,27,-19,-18,11,77,-29, 
  /* [9][2][][] */ 42,52,-27,11,13,29,4,7, -45,-11,-38,8,-30,5,2,4, 15,-53,5,-9,22,46,12,-2, 
  /* [10][0][][] */ -18,-15,-70,-27,0,-2,56,-22, 6,-13,-12,-52,-8,-83,-81,7, -24,29,95,-48,-48,48,-89,61, 
  /* [10][1][][] */ 33,85,-90,50,32,17,-29,0, 106,-53,52,23,53,52,39,58, -37,24,29,16,-16,-5,49,-1, 
  /* [10][2][][] */ 124,-7,-127,44,46,-49,14,-37, -14,-36,39,-25,23,69,-47,2, -4,19,-44,-64,-66,-57,-39,-74, 
  /* [11][0][][] */ -20,6,23,90,54,0,69,16, -24,9,-27,-21,20,-95,-37,-6, -37,-69,-36,20,-42,-53,91,-22, 
  /* [11][1][][] */ 36,99,28,2,52,-89,66,14, -21,8,-68,-14,-22,-109,-18,-33, -31,-53,-23,-25,-38,-27,103,-48, 
  /* [11][2][][] */ 12,25,49,127,74,-14,55,51, 63,-30,13,40,15,-63,-81,-12, -35,-60,-4,46,-28,-26,-18,-9, 
  /* [12][0][][] */ 29,-25,9,46,3,-17,127,-28, -89,62,-96,6,-102,48,22,-37, 95,-100,73,6,66,65,83,54, 
  /* [12][1][][] */ 11,-100,35,10,18,10,23,-17, -38,67,-47,-1,-41,-54,-47,-54, 27,-59,98,3,47,80,61,62, 
  /* [12][2][][] */ 30,-47,46,-22,6,-17,91,-9, -23,13,-94,9,-50,-39,11,-97, -5,-58,67,7,40,56,7,17, 
  /* [13][0][][] */ 8,-51,-96,-7,-43,27,9,-33, -41,49,-26,25,-13,-19,43,-4, 19,53,33,48,59,45,7,43, 
  /* [13][1][][] */ -2,-71,-35,-68,5,-48,-22,-28, -127,39,-110,12,-36,47,-37,26, 29,-92,29,-18,48,25,30,30, 
  /* [13][2][][] */ -29,-45,-40,21,-31,-32,55,-39, -35,-53,7,-8,16,-15,-19,-8, -29,28,-20,2,26,63,-86,30, 
  /* [14][0][][] */ -28,27,59,-93,-36,-45,127,-63, 28,84,106,5,-18,26,55,-1, 32,-30,30,33,-20,-105,92,-86, 
  /* [14][1][][] */ -20,17,47,-67,-73,3,-24,-78, 15,92,40,22,-37,13,-5,8, -1,34,6,-9,-24,-38,29,-64, 
  /* [14][2][][] */ -43,26,-15,-35,-60,28,-57,-22, -28,51,43,-28,-15,-40,-30,-18, 56,17,28,-17,-7,-13,35,-57, 
  /* [15][0][][] */ 47,63,-32,-93,-9,-64,-34,-21, -45,-55,68,-24,-9,31,-88,40, 53,5,9,-90,-7,-102,-35,-21, 
  /* [15][1][][] */ 46,33,13,-61,27,-32,-28,2, -35,-32,73,8,-34,66,-73,33, 95,-4,-5,-102,48,-67,-11,-44, 
  /* [15][2][][] */ -3,-14,40,-11,-15,-65,59,21, -22,34,76,4,-16,-12,-31,-16, 127,-33,47,-47,7,-59,10,-9, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.004982546903192997, 0.0070883450098335743, 0.0073851160705089569, 0.0047874501906335354, 0.0061639808118343353, 0.0066656293347477913, 0.0037291673943400383, 0.0076803280971944332, 0.0063384613022208214, 0.0077069750986993313, 0.0045880568213760853, 0.004889332689344883, 0.0035920687951147556, 0.0055367699824273586, 0.0055949660018086433, 0.0050068325363099575, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[8] = { 327, 2548, -59, 156, 40, -226, -2447, -148, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 1.5299219739972614e-05, 2.3790074919816107e-05, 1.5099585652933456e-05, 1.1924923455808312e-05, 2.1240348360151984e-05, 1.2582888302858919e-05, 1.2469723515096121e-05, 1.5428737242473289e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[8*3*3*1] = { 
  /* [0][0][][] */ 71, -63, -31, 
  /* [0][1][][] */ 105, -56, -20, 
  /* [0][2][][] */ 127, -51, -54, 
  /* [1][0][][] */ -71, -92, 51, 
  /* [1][1][][] */ -15, -91, 127, 
  /* [1][2][][] */ -69, -35, 33, 
  /* [2][0][][] */ 118, 55, -80, 
  /* [2][1][][] */ 32, -19, -127, 
  /* [2][2][][] */ 70, 69, -89, 
  /* [3][0][][] */ -90, -20, -38, 
  /* [3][1][][] */ -96, 127, -101, 
  /* [3][2][][] */ 118, 1, 88, 
  /* [4][0][][] */ 127, -36, -38, 
  /* [4][1][][] */ 122, -30, -28, 
  /* [4][2][][] */ 52, 18, -22, 
  /* [5][0][][] */ -127, 93, 36, 
  /* [5][1][][] */ -95, 61, 43, 
  /* [5][2][][] */ -104, 58, 46, 
  /* [6][0][][] */ 98, 127, 60, 
  /* [6][1][][] */ 27, -52, 9, 
  /* [6][2][][] */ -47, -110, -113, 
  /* [7][0][][] */ 40, 30, -5, 
  /* [7][1][][] */ -7, 96, -7, 
  /* [7][2][][] */ -61, 127, -20, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant10_scale = { 8, { 0.0039166002534329891, 0.0060902591794729233, 0.0038654939271509647, 0.0030527804046869278, 0.0054375291801989079, 0.0032212194055318832, 0.0031922492198646069, 0.0039497567340731621, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant9_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,32,64,1 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,32,64,8 } };
const TfArray<1, float> quant12_scale = { 1, { 0.006615753285586834, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,16,32,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,16,32,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.012643199414014816, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,8,16,16 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,8,16,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0067755905911326408, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,4,8,32 } };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,1024 } };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,2 } };
const TfArray<1, float> quant19_scale = { 1, { 0.075142785906791687, } };
const TfArray<1, int> quant19_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 11,10,9 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 12 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 13,8,7 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,6,5 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 16 } };
const TfArray<1, int> outputs6 = { 1, { 17 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 17,2 } };
const TfArray<1, int> outputs7 = { 1, { 18 } };
const TfLiteFullyConnectedParams opdata8 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs8 = { 3, { 18,4,3 } };
const TfArray<1, int> outputs8 = { 1, { 19 } };
const TfLiteSoftmaxParams opdata9 = { 1 };
const TfArray<1, int> inputs9 = { 1, { 19 } };
const TfArray<1, int> outputs9 = { 1, { 20 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16384), (TfLiteIntArray*)&g0::tensor_dimension11, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16384), (TfLiteIntArray*)&g0::tensor_dimension13, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8192), (TfLiteIntArray*)&g0::tensor_dimension15, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4096), (TfLiteIntArray*)&g0::tensor_dimension17, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1024), (TfLiteIntArray*)&g0::tensor_dimension19, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[10] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[10] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 21, };
const size_t tflNodes_subgraph_index[] = {0, 10, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  20, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_56_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 21;
  for (size_t i = 0; i < 21; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_56_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_56_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_56_invoke() {
  for (size_t i = 0; i < 10; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_56_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
