/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.05.2024 18:19:27

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5168;
#else
constexpr int kTensorArenaSize = 4144;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,736 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037683823611587286, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 23, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 23, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 12, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 12, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 6, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 6, 1, 32, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data7[4] = { 1, 1, 3, 32, };
const TfArray<1, int> tensor_dimension7 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 3, 1, 64, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[2] = { -1, 128, };
const TfArray<1, int> tensor_dimension9 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data10[2] = { 2734, -2734, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const TfArray<1, float> quant10_scale = { 1, { 6.4697953348513693e-05, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[2*128] = { 
  -2, -65, 42, -77, 32, -52, -26, -66, -81, -63, 54, 1, 7, -40, -15, 4, 32, -3, 22, 22, -5, 35, 36, -36, 2, -88, 21, 58, 26, -94, 47, -57, -84, -31, -33, 43, -73, 33, -4, 40, 3, 36, 11, 37, -47, 5, -88, 39, -35, 17, 5, 11, 52, 2, -22, 32, -62, -66, -84, -6, -18, 30, -84, -47, -54, -7, -51, -1, -18, 5, 28, -9, -6, -27, 36, 14, -49, 41, -62, -59, -13, 59, -44, 43, 50, -44, -19, 17, -32, -9, 22, -44, 50, -38, 18, 54, 29, 14, -95, -65, -16, -28, -82, -118, -21, -5, -117, 7, 109, 12, 18, -31, -4, -30, 45, -25, 36, 54, 82, 69, 23, 10, -51, -49, 58, 69, -31, 15, 
  -60, 7, 24, 12, -33, 55, 3, 47, 29, -27, -8, 37, -17, 59, -15, 54, -16, -57, -53, -31, 61, -29, 2, 0, -58, 18, -8, 3, 35, 71, -15, -11, 42, -47, -63, -54, 62, 1, 17, 19, -1, 5, 45, 50, 96, -46, 12, -19, -7, -25, -23, 7, 21, 49, 96, -16, 50, 81, 90, 33, 53, -38, 101, 127, -2, 0, 21, -47, 50, 38, -53, 16, -58, 4, 4, 24, -7, -42, -38, 101, -26, -76, -18, 28, -75, 38, -55, -68, 29, -39, 12, -51, -46, 9, 35, -39, -29, 50, 1, 20, -8, -38, 36, 43, -42, 43, 60, -36, -55, -22, -12, -32, 40, -7, -19, -48, -22, -40, -44, 28, 47, 40, -31, 24, -21, -70, -37, -19, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 2,128 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0038515755441039801, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[64] = { 790, 647, -549, -693, 860, -1615, -623, -134, -421, -1531, -1760, -1880, -1198, -1859, -958, 613, 128, 716, 20, 529, -413, 2115, 1242, 162, 219, -1046, -2402, 1514, -578, -909, 1152, -711, 236, -88, 49, 16, 408, -186, 886, 359, -1368, -1315, 991, 955, -266, -2852, -50, -2029, -1653, -493, 1107, 587, -45, -754, 1331, 446, 504, -483, -663, -3134, 80, -522, -441, 510, };
const TfArray<1, int> tensor_dimension12 = { 1, { 64 } };
const TfArray<64, float> quant12_scale = { 64, { 6.3470761233475059e-05, 8.4375584265217185e-05, 7.7306569437496364e-05, 8.4606996097136289e-05, 6.6528446041047573e-05, 7.7952528954483569e-05, 4.6041906898608431e-05, 0.00010386079520685598, 7.4268195021431893e-05, 3.9903996366774663e-05, 5.1644747145473957e-05, 7.2774397267494351e-05, 5.9723421145463362e-05, 5.7095006923191249e-05, 7.5465701229404658e-05, 5.7810491853160784e-05, 6.6102787968702614e-05, 5.423992479336448e-05, 7.4742281867656857e-05, 6.7530185333453119e-05, 6.355504592647776e-05, 4.0093986171996221e-05, 3.4332537325099111e-05, 7.0094502007123083e-05, 4.5347194827627391e-05, 5.7603167078923434e-05, 4.590569733409211e-05, 4.1924802644643933e-05, 0.00010449139517731965, 5.9007292293244973e-05, 5.5754673667252064e-05, 8.7090775195974857e-05, 7.7099430200178176e-05, 4.406065636430867e-05, 9.1171175881754607e-05, 5.2299448725534603e-05, 5.5031086958479136e-05, 3.9259375625988469e-05, 4.9426154873799533e-05, 6.8429777456913143e-05, 7.0288697315845639e-05, 4.3742951675085351e-05, 5.6360655435128137e-05, 5.2694107580464333e-05, 9.3420305347535759e-05, 4.1070354200201109e-05, 7.7194024925120175e-05, 2.3634145691175945e-05, 2.0677674910984933e-05, 4.7078272473299876e-05, 5.8240835642209277e-05, 4.3406755139585584e-05, 4.3541938794078305e-05, 4.6556899178540334e-05, 0.0001007935861707665, 5.3242212743498385e-05, 7.2226721385959536e-05, 6.4467538322787732e-05, 5.7814340834738687e-05, 4.3039599404437467e-05, 5.4917236411711201e-05, 3.8862894143676385e-05, 7.0721296651754528e-05, 9.2518806923180819e-05, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[64*1*3*32] = { 
  /* [0][0][][] */ 15,-17,26,47,69,14,-7,-25,-27,7,23,-10,-14,-44,-15,-15,-10,25,-41,4,-26,-71,46,-41,7,-15,29,35,-13,28,-58,28, 61,9,-24,33,-37,5,-9,-9,13,-47,-14,20,-22,-73,-33,28,-3,17,-11,30,25,-18,-35,-42,-15,-25,-20,-49,-41,-45,-9,7, -14,-3,-24,-127,-15,21,-19,-3,-49,2,28,33,-2,-18,-32,-18,5,-11,20,-27,-2,43,-34,4,2,19,12,8,46,-3,46,8, 
  /* [1][0][][] */ -25,-26,-4,-127,-29,-22,-16,-61,-42,-29,-14,-85,22,19,-7,-52,-33,-37,16,-16,-10,40,-22,-13,11,21,-71,-13,23,30,47,-36, -16,-7,16,-44,4,19,19,-21,-17,-2,-1,-42,0,-16,11,-29,-43,-48,-27,-17,-19,-8,-64,23,20,-6,10,-65,10,-36,-5,-24, 22,-2,-17,55,3,6,13,31,26,0,-37,38,6,-34,16,59,62,-44,2,36,33,17,-19,-13,17,-19,19,6,-32,-8,-32,-24, 
  /* [2][0][][] */ -15,14,-5,39,30,-9,-6,26,-25,30,-20,21,18,-10,32,-27,-4,25,-12,-15,-40,9,27,-30,-7,12,25,14,-1,1,-31,10, 23,-27,-37,-24,1,-10,-8,42,-50,13,-8,86,-16,-18,-27,4,-21,-9,-29,127,-33,-27,-51,-33,20,-27,-17,-14,-40,-32,-1,25, 0,0,-7,-69,13,5,20,30,-30,-30,-46,98,24,22,19,8,-19,20,10,20,-42,27,11,17,12,30,-22,-44,52,-9,24,8, 
  /* [3][0][][] */ -22,-6,10,-127,-51,-27,-12,-71,-21,-24,-15,-102,-16,3,8,-62,-16,-47,-8,-33,-36,-36,-39,-30,-13,-8,-42,-41,-4,10,33,-19, -57,-1,31,-31,0,-14,-7,-83,-15,11,3,-49,0,6,-17,-56,-25,-58,7,-34,-36,55,-56,8,-12,-7,1,-25,14,-25,22,-59, 56,20,27,66,38,-16,9,7,18,5,-11,-15,12,-56,17,45,20,0,-27,10,-8,5,21,-8,15,-35,32,3,-53,-42,-46,14, 
  /* [4][0][][] */ 17,-5,7,-29,-27,-127,-53,-11,-11,-32,-25,-37,15,22,56,-55,-23,-75,-47,-90,-41,-32,-71,-43,-24,20,-22,-60,-44,-61,6,-19, -18,-15,42,81,24,36,-42,1,4,7,12,1,-24,-19,1,-8,29,35,5,17,47,-1,50,-5,21,-14,13,14,-43,2,-69,54, -56,-5,-10,-16,-10,-9,9,9,-1,-33,-9,-2,-8,-15,-3,21,-23,45,9,24,16,-1,7,-31,23,-37,-43,-24,-10,-14,38,25, 
  /* [5][0][][] */ -35,-7,4,-102,-127,-22,-12,-64,2,-42,-27,-87,-14,-49,-23,-109,-95,-9,-16,-16,-2,-70,11,-37,-16,-48,-71,11,7,-17,20,-56, -37,-12,12,-44,-38,-13,13,-30,1,-23,-44,-106,-10,-15,-4,-35,-3,-68,16,-26,-6,-25,-52,27,27,-15,-38,-21,10,-5,65,-2, 10,17,-7,-23,28,-24,-3,-8,18,-6,3,-39,1,-61,16,-8,-16,10,-6,22,-37,-88,-85,36,14,-2,46,-1,-19,1,5,-10, 
  /* [6][0][][] */ -37,-20,-15,-11,45,-26,-1,95,7,6,-47,62,45,-36,-4,47,65,-52,-69,23,85,28,43,-51,-43,-77,15,-31,-68,70,2,9, -19,120,-1,-17,1,49,-32,-63,18,-5,29,61,28,-21,-26,-14,-54,-19,-4,31,7,87,-89,37,11,-25,-50,-75,-31,65,24,53, 5,-29,21,8,-67,-15,-15,-30,4,-49,-67,-57,13,-18,-33,-79,-77,-51,-55,-80,-34,-64,8,-3,-37,-16,-34,-71,-4,20,-127,-74, 
  /* [7][0][][] */ -23,8,5,-13,-28,-57,-12,-27,4,-19,-39,-16,-17,-55,-12,-7,3,-58,-30,-14,-33,-18,-59,-21,10,-26,-40,-49,-52,-39,-47,-18, -25,4,9,-73,-55,-8,-10,-18,-36,-36,11,-41,-1,-16,-30,-57,1,-22,15,-25,-1,13,-37,-5,17,-17,-42,-31,21,16,42,-33, -21,-3,22,-3,29,-16,35,-6,-14,16,-33,-41,12,-23,-2,-17,-20,-2,12,-33,-1,-31,-127,26,26,-3,3,-6,0,8,5,-98, 
  /* [8][0][][] */ -38,-22,19,-74,-21,19,23,-24,-3,-20,-35,-127,20,4,-6,-111,35,-40,36,-44,2,-12,-54,-5,44,12,-36,-43,42,31,34,-48, -23,16,24,-78,2,-4,37,-15,-21,-3,-2,-68,14,-34,33,-68,-48,-18,9,-61,-18,14,-8,21,50,-21,35,-18,1,-56,-7,-23, 66,7,-5,27,20,-38,-21,0,29,8,14,-44,-1,-37,-23,41,44,-8,-27,-12,36,-26,30,-21,15,-35,7,-30,-85,-24,-21,-19, 
  /* [9][0][][] */ 10,38,-17,42,41,11,14,-74,10,-29,9,-127,12,-33,20,-24,-4,-37,12,-48,-18,-6,-112,13,-13,33,-23,-71,-1,-48,56,-95, 42,35,39,50,36,-52,-33,27,-10,35,-27,34,-53,-63,28,16,-37,-41,12,0,50,-80,-31,-9,-43,-64,51,-47,-56,-10,-26,-54, 85,30,-34,81,-27,-10,-13,-52,70,-45,-40,110,6,-30,25,95,21,-19,-59,-12,6,-55,9,-103,-26,-118,28,-65,-88,-16,-76,-111, 
  /* [10][0][][] */ 16,-3,-14,30,17,64,2,47,22,-34,-13,27,4,20,9,-46,25,39,12,-32,-5,-6,45,-42,0,22,30,-1,13,-50,21,28, -19,23,4,-84,-22,-47,20,127,-4,-71,-31,113,-6,-21,7,18,-21,-16,19,19,-38,-70,-81,-57,15,1,-19,-20,-4,-63,9,-44, -66,-23,-15,-59,24,-32,-4,-64,-84,-1,-6,1,-23,24,17,-36,-19,17,24,10,-89,47,68,5,-43,37,24,10,52,10,33,12, 
  /* [11][0][][] */ 24,-18,-27,-6,20,31,-10,-38,-5,-4,-10,-127,-13,10,2,-35,-29,-41,23,-65,-39,-26,-36,21,4,-1,-30,-6,1,28,39,-19, -3,-23,0,80,10,18,-38,19,11,0,4,-42,23,-31,-30,6,-13,-50,-11,0,14,-11,11,14,6,-11,17,3,-27,-27,-36,-51, 58,-41,-2,36,10,-30,-16,-12,36,-17,-56,5,-9,-27,5,7,20,-2,1,-31,6,-5,-40,6,-32,-40,43,16,-40,-4,-41,2, 
  /* [12][0][][] */ 59,13,31,10,12,-11,11,-42,-15,22,-5,22,-36,-14,127,-9,-40,-18,-13,-37,-40,-7,3,-47,-35,-43,40,30,-3,-25,-20,0, 8,-6,-27,35,-17,-20,-41,-11,-51,-17,7,59,18,-16,23,8,-28,-21,-27,8,3,-10,-31,-41,-28,-15,-51,11,-20,-44,-23,39, -26,-3,12,-39,30,-10,19,2,-31,-6,3,-17,-13,-10,22,-48,-22,-10,5,30,-61,31,-65,16,35,-14,-44,-8,-18,-1,-2,9, 
  /* [13][0][][] */ -9,-19,4,-9,-38,-35,-38,-32,-14,-36,-42,-75,-38,-39,15,-23,39,-41,18,-62,14,-1,-10,-38,-22,7,-75,-27,3,10,2,-7, -23,-6,13,-25,8,14,-9,-47,20,5,-8,-127,-11,-18,-23,14,-34,-28,31,20,-39,10,-96,43,66,20,-50,-73,34,19,82,57, 24,-14,-24,5,24,-19,5,18,9,33,-45,31,-31,-85,-25,-11,-22,-6,-69,-34,-16,-1,-98,-30,48,-64,44,18,-51,-70,-3,-97, 
  /* [14][0][][] */ -48,-7,-10,-20,-43,-45,-29,-17,21,14,-49,32,-5,-56,-18,-30,-2,-45,-13,-11,-59,-18,-35,-30,29,-23,-23,-44,-40,-12,-44,-7, -17,-27,-17,9,10,-19,-22,-2,-2,1,2,52,23,17,1,-10,-11,-14,-22,25,-49,-42,9,-12,-7,-8,-9,4,1,6,-28,27, -29,-5,-3,-12,-7,48,32,56,3,-3,2,20,-14,-3,-8,-11,-15,84,-11,43,3,46,-17,-33,2,-7,12,38,12,127,10,24, 
  /* [15][0][][] */ 46,7,-21,-17,19,-61,-25,-27,31,55,14,-21,4,-78,48,22,-21,-126,-15,9,-11,-39,-84,18,-31,-62,73,-43,-46,-47,-106,-74, 55,-29,-32,90,-37,-12,-7,22,13,-27,-2,10,4,-21,2,56,38,-14,-28,-11,41,-7,-22,-75,34,-15,-33,-48,23,18,17,-55, -20,15,-20,-6,17,-25,48,-13,5,-8,-26,-31,-24,-97,-31,15,-61,-94,-32,-91,-16,-41,-127,48,-18,-12,13,-13,-1,-34,-19,-48, 
  /* [16][0][][] */ 50,-30,-4,83,-16,-23,-44,100,48,-16,21,127,5,-20,28,5,-1,42,-55,40,-14,15,39,-21,15,-48,-21,36,-48,-27,-3,70, -23,-27,18,-5,33,22,-6,6,4,14,-5,1,-15,-5,-43,-29,6,5,1,-54,-48,-16,73,0,35,22,23,7,7,-16,-58,24, 21,-20,14,-8,-24,-3,12,-4,37,-29,-35,-18,14,0,-25,-34,22,23,-39,-15,16,-45,-21,-18,-17,-27,-36,-23,-1,19,18,-20, 
  /* [17][0][][] */ 20,-5,-4,12,-1,8,-47,32,20,-47,11,110,-6,-30,46,42,55,73,30,22,9,-28,10,-53,-27,-57,-14,66,-16,-28,45,31, -33,46,31,-118,17,43,17,21,4,-10,6,-21,-26,3,-8,-67,-2,50,-23,-13,-6,15,44,-21,-5,28,10,-53,46,-34,-56,14, 78,4,-31,-55,5,27,-57,62,20,-45,-37,114,14,-36,20,26,17,127,20,32,56,11,-32,-23,-39,-32,-48,-13,11,14,-7,20, 
  /* [18][0][][] */ 11,-13,35,45,-19,46,7,14,-2,-39,32,9,3,0,37,41,44,23,-11,-37,-16,-15,27,-13,4,-12,22,55,-42,-7,-26,52, -41,-4,-5,9,-2,-34,-19,28,8,-24,-3,127,-14,-13,-33,36,-27,-52,0,20,-34,-28,-22,-51,13,-57,2,-18,-16,-44,26,51, -6,6,-39,-75,8,-3,-7,-4,-32,-26,-4,1,7,8,13,7,25,11,7,37,-2,7,32,0,29,28,14,-17,53,45,17,65, 
  /* [19][0][][] */ 9,20,16,127,-33,10,-18,22,23,3,-1,10,-19,-1,66,61,57,27,-33,49,3,27,19,-9,-26,-40,-20,72,-36,-34,-5,96, -11,18,-8,-19,-9,47,8,22,-32,19,9,3,-29,-21,-27,-28,33,40,-4,-35,1,9,68,-2,72,-2,-10,30,-15,-23,-21,10, 22,30,13,-1,-17,-25,-16,18,4,-13,-14,13,-5,-11,10,3,16,37,24,-10,11,-7,-3,-24,46,2,-33,24,-6,-11,30,29, 
  /* [20][0][][] */ 11,23,-17,-127,-49,-47,-23,-70,-15,-6,-32,-74,36,2,-42,-2,-28,27,-61,-59,-25,46,-52,-17,-42,13,10,19,-34,11,18,-18, -2,14,24,-42,0,29,8,-19,-86,-16,-23,-83,6,6,1,-14,-2,-47,24,-68,-17,88,-76,27,23,27,-4,-40,41,14,61,-52, 1,43,35,83,6,-23,-24,23,-6,10,-25,-67,-27,-40,15,21,-2,16,16,-67,34,-48,46,-6,26,-45,20,48,-53,12,-67,-21, 
  /* [21][0][][] */ 49,-12,24,65,118,16,-9,-114,2,62,46,72,-1,-77,99,26,35,-25,-6,0,-3,-9,-73,-5,25,-88,34,-28,-48,-85,-103,84, 33,-62,-10,114,-26,-1,-39,19,58,-47,-13,90,-19,-34,56,47,-19,55,96,67,-14,28,49,-71,-14,-89,8,22,-19,-94,-43,79, -59,39,44,-26,34,75,14,66,-73,-14,42,127,-11,-13,29,-94,4,20,96,16,-27,47,36,-21,-25,-53,-54,27,14,-19,85,45, 
  /* [22][0][][] */ -46,51,30,10,-20,-47,-62,124,76,-40,-68,71,-20,-43,-50,20,33,127,-79,-28,44,18,-18,-44,38,-54,-51,43,-105,4,53,46, 48,28,14,-85,7,16,-57,90,15,17,35,-10,66,-61,-82,-88,9,47,-11,-83,-90,98,103,65,-54,62,44,82,-3,-32,-76,18, -46,-60,-56,-62,-23,48,23,86,-20,-12,-101,79,65,-82,-52,34,80,80,-16,120,-24,-40,2,-59,55,-81,-38,-23,-4,-80,44,9, 
  /* [23][0][][] */ 26,-15,-24,-25,-14,-14,8,-18,1,-8,-11,-38,16,18,16,33,-9,-1,16,-18,11,12,-8,-1,2,-11,-36,-5,0,26,-11,16, -31,4,0,-61,-4,-19,38,-10,-45,-25,3,-66,16,29,21,-69,-46,-62,-21,-36,-37,54,-50,17,49,36,-40,-58,29,12,78,-20, -26,17,2,39,-36,22,-8,28,15,8,-38,-127,24,-13,6,-36,-50,-11,-20,-30,29,-21,27,-13,-7,-49,-6,36,-8,1,-31,-59, 
  /* [24][0][][] */ 106,-33,7,-71,50,36,-66,-43,7,22,89,-103,36,-17,81,-60,20,44,-43,-25,-27,-46,34,-42,29,45,16,7,24,9,-82,-73, 6,-43,10,124,-39,-65,-47,43,-46,-66,-54,33,-50,-14,-33,-29,-4,-50,35,-1,3,-36,-37,-65,17,-29,-40,-8,-80,-96,22,-12, -63,32,-30,-81,53,34,4,20,-42,17,9,81,-24,62,-19,-70,-92,85,-2,127,34,56,-17,-25,21,72,-18,-46,68,40,1,64, 
  /* [25][0][][] */ -32,15,30,-94,-33,-8,34,-71,-34,-27,-2,-111,2,-52,-34,-85,-2,-60,19,-127,-24,-23,-90,5,12,28,-32,-35,17,7,88,-72, 22,-32,-43,-35,43,32,-14,-40,13,-33,16,-127,-24,-65,-27,-82,-11,10,-24,-63,-48,-6,-13,21,-10,-20,50,4,28,-33,-16,-115, 38,10,24,93,11,13,-19,-16,47,57,-20,-8,-25,-39,20,67,37,-82,-17,14,15,-56,-22,-49,7,1,46,11,-68,-53,-65,-35, 
  /* [26][0][][] */ 15,-36,-21,34,44,32,-33,-5,-34,-27,21,53,-1,-26,-59,-9,69,4,-9,-43,-55,-8,11,-32,56,17,9,-34,38,-29,-81,20, -7,2,-27,-41,-53,-34,-23,127,-61,-6,-6,113,-11,-45,52,-24,-9,-44,20,28,-43,-44,-67,-74,24,8,-42,-4,-29,-51,82,15, -2,31,-13,-51,-21,-10,25,-1,-11,-1,-18,-51,-24,67,43,-25,29,53,43,70,-67,73,-34,1,11,37,11,-32,-10,-15,23,52, 
  /* [27][0][][] */ 62,-24,-17,48,-24,46,-98,-11,-18,-27,53,-25,-49,-37,24,40,21,59,-88,-51,14,-32,79,-89,-8,-44,-25,95,-6,-78,30,97, 5,23,-20,-22,8,59,-39,92,-41,1,27,20,39,30,-127,-1,-69,80,-55,3,-62,4,49,-25,11,-13,59,86,-13,-2,-59,-47, 26,60,52,-17,-65,-1,-53,68,56,-70,-30,47,56,4,-34,-12,45,48,4,-75,69,-46,-17,-26,-38,-29,-53,-6,-39,-19,34,-57, 
  /* [28][0][][] */ -5,24,-24,-11,1,13,3,34,10,12,-12,-2,-18,7,-26,34,56,36,-27,127,7,28,27,17,2,23,-22,5,-5,-8,55,20, 11,0,1,29,9,-7,31,28,45,18,-1,-53,-10,17,11,8,5,18,-22,21,11,32,0,38,6,36,-9,30,-4,11,-15,37, -28,-6,-23,-66,-40,-10,-20,5,-24,-10,-18,-59,15,-6,-9,-32,-34,-4,6,18,-60,-38,-47,-29,-11,-26,-33,-39,-12,-29,-9,21, 
  /* [29][0][][] */ -64,15,-6,-123,7,-9,12,-81,-52,1,16,-49,-6,-1,-37,-41,-127,-51,-4,-56,-52,36,-29,51,56,13,18,-43,33,31,30,-32, 47,-26,51,80,45,5,-9,-27,27,18,-17,-52,-30,-45,48,3,-40,-101,15,-78,-2,-47,21,-30,-7,-44,12,-16,-48,-9,-22,-24, 74,14,-1,65,-21,4,-60,51,37,-16,-11,-12,24,-41,-21,41,43,-22,12,-12,50,-25,-25,-33,5,-2,-36,14,-102,8,-114,-27, 
  /* [30][0][][] */ -25,-31,9,20,28,37,-31,-29,-1,-8,42,-30,-20,-15,-55,-13,53,74,5,4,-31,-28,81,-25,18,-9,52,24,-11,23,-43,-8, -44,-12,-38,-46,-15,-1,-58,39,-35,-22,-28,43,-28,-93,19,43,-12,1,-41,87,33,-61,-8,-27,27,-34,-47,-9,-48,-40,25,8, -15,23,23,-127,0,-7,-21,58,-27,-16,35,64,19,25,13,15,24,-3,32,82,-58,66,37,25,11,50,24,-38,28,-35,18,35, 
  /* [31][0][][] */ -1,12,58,-12,-59,2,-38,-80,26,-75,-7,0,-17,1,13,-14,-12,-32,-10,-12,20,-28,-20,-47,-17,-5,-36,2,5,25,-1,-71, 77,-35,12,25,-35,7,32,-58,18,-20,-8,-65,13,13,17,-49,-21,-10,2,-9,17,12,-30,10,6,25,-32,-37,5,12,54,-93, -43,-24,2,-126,37,-59,21,1,-71,39,-76,-12,-20,-52,-64,-11,-31,-21,-49,18,-34,2,-127,7,-30,-10,27,-58,3,-59,-65,-30, 
  /* [32][0][][] */ -13,10,-21,-122,-18,-22,-7,-41,-34,-36,-16,-127,18,-20,3,-65,47,-66,-3,-123,-29,-56,-60,8,-6,22,-36,-43,-10,16,80,-13, 8,2,5,-38,24,-11,18,-60,-10,10,6,-42,3,-2,-30,-27,-59,-42,-13,-4,-2,63,-25,8,8,-3,-5,-37,5,-25,2,41, 60,-25,1,55,21,-1,-5,26,18,13,16,-28,6,-17,19,43,48,-16,2,9,22,-31,30,-23,-8,-3,36,3,-51,-45,-53,9, 
  /* [33][0][][] */ 86,-45,-26,63,84,-23,6,-21,44,-10,-10,6,-41,-41,48,34,-47,72,45,-19,21,-70,76,-79,24,27,72,63,-33,12,-127,-5, 44,8,-19,8,-50,37,51,53,-87,8,-108,83,-33,-13,-73,25,-66,22,-50,111,-69,-77,-81,-42,2,-62,-41,-9,-12,-54,-50,31, -18,-21,-45,-94,-8,22,16,38,6,2,11,-29,14,54,37,-20,6,-10,28,43,-28,13,-24,-32,36,49,28,22,7,74,-11,24, 
  /* [34][0][][] */ 21,-1,-22,6,31,-50,-18,27,2,0,-6,-61,-11,-18,16,-41,-15,-72,-45,-61,-25,-71,-64,11,11,-50,23,-58,-3,-12,-42,-44, 25,-9,-16,70,8,26,-7,6,9,-8,20,47,19,-8,2,6,19,27,-7,24,-13,-6,30,-40,25,-41,19,47,-30,-1,-18,48, -31,9,-5,-10,22,2,8,-1,-32,2,9,127,3,-43,3,8,0,10,-6,9,-3,-16,6,-46,-2,-22,-6,-20,15,12,26,13, 
  /* [35][0][][] */ 79,-19,63,51,59,20,15,8,42,6,-6,5,0,5,85,-6,37,60,-26,-14,-23,13,3,-33,-37,-15,52,14,-33,-30,-51,-2, 8,5,-5,2,-18,-52,-47,47,-32,-33,-41,127,-31,-67,-40,28,20,-9,17,9,-56,25,-70,-47,-60,-55,-39,-56,-24,-63,24,20, -19,26,20,-118,35,27,51,42,-17,-11,-45,-31,-29,9,-2,-20,-11,25,-6,-3,-40,47,-6,33,32,65,1,-52,85,36,-14,-4, 
  /* [36][0][][] */ 4,18,-43,-127,-65,47,15,-96,2,10,-23,-106,19,-20,-53,-67,15,-46,29,-93,-17,-55,-72,-18,51,22,-51,-61,46,45,96,-39, -51,20,20,-55,50,7,1,-13,2,39,-42,-86,-37,-81,-7,-80,-96,-18,-40,-12,-29,-27,-61,47,36,-28,-10,-42,-19,-81,-21,-11, 80,-9,-9,96,32,-34,-29,-13,48,36,-15,27,15,-29,41,79,83,-33,-26,39,90,-9,14,-8,8,-33,9,-41,-76,5,-7,9, 
  /* [37][0][][] */ 31,51,-6,83,-50,70,-22,78,79,-8,37,99,6,3,52,20,-28,-14,10,-16,-2,40,93,-35,1,-65,51,48,-38,-33,7,69, -43,-53,-57,34,-9,-19,-84,69,-50,-96,30,-18,-31,4,35,29,-38,35,-66,-28,-79,28,-71,-49,-26,-54,-8,-73,-100,-8,-30,54, -15,-6,6,-80,40,-41,-15,22,78,8,-39,65,-46,-19,-9,96,2,64,9,127,-29,73,18,66,51,-21,-27,28,64,-16,70,96, 
  /* [38][0][][] */ 28,-11,7,21,22,-65,16,-30,1,45,-62,-112,24,-50,98,-18,-12,-103,-32,-92,7,-65,-127,-17,-49,-90,76,-119,-50,-101,-83,-36, 60,-55,6,43,-34,0,-41,21,37,-41,-37,16,21,-5,-6,40,35,-63,25,-9,57,8,-14,-72,11,-98,-53,-25,-52,-43,-82,-4, -53,-53,-25,-24,12,20,-8,-52,-65,-22,-33,-95,27,-22,8,-23,34,-26,14,11,0,-28,-65,-42,-39,4,-31,-33,-44,5,-32,9, 
  /* [39][0][][] */ 64,-4,1,17,47,-2,-21,-47,28,47,-16,59,4,-42,45,-4,-23,31,-39,-25,-16,-15,-23,22,-17,25,46,-12,-35,-38,-46,16, 18,-20,9,34,-1,19,-35,-17,-7,-47,0,60,24,-45,-22,-6,1,-34,-47,10,38,-3,-27,-87,-20,-51,6,-30,-41,18,-17,15, -23,22,-1,-25,56,-13,20,63,-12,-8,-22,24,-9,13,38,-25,8,4,0,-33,-36,127,55,17,43,32,14,3,21,39,39,11, 
  /* [40][0][][] */ 13,14,47,24,-57,55,4,5,18,9,73,127,-22,18,10,41,4,33,-12,83,-8,120,41,-41,-15,-10,-16,24,-44,35,-29,40, -14,-4,-22,-15,39,-4,-14,26,-17,-2,6,-39,-9,6,60,5,-5,-43,3,20,-43,0,-32,-29,11,4,7,14,0,-49,-9,-2, -10,3,10,15,29,-15,12,11,28,-24,12,33,9,-30,-20,-9,41,-19,22,26,13,65,-24,51,25,7,33,-15,-7,-16,11,17, 
  /* [41][0][][] */ 75,36,-4,-12,107,11,21,60,52,-33,3,13,45,-81,79,-73,-9,12,4,35,22,-38,33,11,29,-11,58,15,-27,-48,-115,-17, -3,-15,12,69,-42,4,-1,83,-11,-4,-4,127,-11,-41,-71,70,50,-22,-35,94,11,-51,-42,-46,-65,-95,-72,-30,-23,-28,35,23, -74,6,-31,-69,22,31,14,5,-40,13,9,12,-6,57,-38,-58,-18,-6,44,-2,29,9,50,-28,-42,-15,12,5,39,30,-2,41, 
  /* [42][0][][] */ 47,-27,5,-6,34,-45,-25,11,0,48,6,-29,13,-63,8,36,-33,-99,-8,-97,-15,-111,-113,28,-11,-46,83,-44,-67,-84,-127,-28, 46,-34,-11,76,-35,12,-52,10,20,5,11,-58,31,-67,26,25,32,0,15,6,55,-12,-27,-55,-11,-3,-25,-42,-6,45,59,-49, -70,-8,-12,60,29,-12,39,35,-14,39,-35,-53,-8,-54,12,-26,42,1,42,-67,32,-125,-14,44,-19,-31,70,-15,-5,-18,-8,6, 
  /* [43][0][][] */ -35,25,17,-1,-50,-40,-23,49,37,-19,-62,42,-19,25,-35,16,40,6,5,69,57,45,17,-73,-13,-24,-28,21,16,-14,-19,101, -52,22,-21,-57,25,-3,14,-28,-22,16,34,-39,-37,23,-30,-47,38,0,-27,1,-40,67,-2,19,13,38,48,-18,10,1,-52,38, -46,34,1,7,-47,-43,-7,29,-33,-67,-51,-4,12,-72,-39,-2,62,127,-15,59,-34,3,47,-33,-32,-36,-66,45,11,-44,-26,102, 
  /* [44][0][][] */ 8,21,5,-127,-90,-28,-24,-80,1,0,-31,-89,7,-11,-41,-30,-1,-29,-1,-58,4,22,-8,-27,-16,-1,-64,7,10,-1,-19,-31, -7,-3,-4,-55,-38,-29,-4,-69,-35,0,-26,-38,0,7,-9,-50,-61,-39,8,-20,-31,3,-45,-5,27,11,-37,-59,9,-6,36,-52, -11,20,40,75,30,21,11,21,25,-20,10,-22,16,-3,6,30,-2,13,-26,-43,35,-3,36,17,-5,-38,4,21,-34,-10,-12,-17, 
  /* [45][0][][] */ -6,-40,-23,-20,-61,36,13,60,30,-32,-52,-104,-30,-80,-58,-37,44,-7,-52,-18,-9,-127,89,-35,9,-32,24,17,7,1,-56,99, -20,-24,33,-67,-19,-36,-87,89,1,-80,-45,112,-10,-15,-10,-20,-29,12,59,-13,-31,-31,-7,-87,-47,13,-97,-59,-11,-73,51,17, -62,44,-57,-119,-23,52,26,40,18,8,22,4,-11,23,10,10,-47,12,-41,-4,-36,35,-33,-10,8,95,-8,46,54,15,14,9, 
  /* [46][0][][] */ 13,-10,-22,-127,-40,11,-1,-51,-14,-36,-29,-83,9,1,-25,-107,11,-28,12,-75,-9,-45,-67,-21,38,-14,-16,-61,3,6,64,-7, -30,5,8,-28,21,12,37,-49,-13,8,27,-63,-18,-34,8,-42,11,-24,-21,3,-19,40,-15,15,-11,-4,-8,-44,3,-23,2,-24, 62,2,29,63,12,8,-6,-26,26,-7,4,-47,19,-32,16,44,49,-62,1,-47,29,7,3,-28,-16,10,23,15,-66,-35,-59,-61, 
  /* [47][0][][] */ 7,-97,65,-56,-73,-65,32,-83,59,-12,-56,42,-24,-94,35,-60,5,-33,-91,-17,30,-31,52,-10,-124,-127,-34,-32,-100,8,-55,37, -9,63,-78,-8,-24,-16,-46,92,56,29,-30,58,8,-79,-54,63,-104,-79,8,-41,-60,-70,-9,-73,-29,38,-31,38,-42,68,-70,35, 43,36,78,-67,-14,-95,19,20,-60,-67,46,27,-71,-74,-40,53,-12,-38,29,-50,70,43,18,70,-93,18,-13,-46,-75,-43,-57,-87, 
  /* [48][0][][] */ -75,86,-79,-30,-49,-48,-53,-6,62,-93,18,-10,25,-101,-59,40,-29,-39,-38,-66,-37,-68,-32,-37,2,-43,63,-28,48,6,-56,-9, 19,-127,-9,-42,-56,-21,6,-30,-8,-51,-91,-66,-48,-88,17,11,-100,24,-43,11,56,47,17,-69,-8,-12,-123,-50,-88,-58,-119,28, -1,86,19,34,73,-14,-87,-80,-99,64,-89,47,-79,13,-67,-37,66,-43,65,7,33,11,-93,-74,7,33,-2,63,-84,91,12,-90, 
  /* [49][0][][] */ 116,39,42,127,62,21,-35,15,37,-48,38,9,14,-12,66,-40,100,51,1,3,-55,-17,46,-21,-25,25,20,54,12,-50,-35,46, -31,22,45,-8,-86,-38,7,123,42,-77,-52,113,-23,-53,-26,58,-19,6,23,41,-21,6,-14,-13,-36,-88,-16,24,-5,-46,31,68, -30,-37,34,-124,26,31,3,18,19,-26,-39,-38,-24,36,39,-9,-22,48,-20,70,-2,59,15,18,-13,64,1,4,2,22,23,37, 
  /* [50][0][][] */ -4,-8,7,-1,-3,16,-26,30,32,-25,48,2,-4,-26,46,25,54,127,-42,71,11,4,54,-36,8,-26,-24,25,-27,-39,22,35, -9,42,0,-81,7,11,28,-12,0,-20,9,52,22,33,20,-36,-33,27,-42,-3,-18,42,-40,6,25,36,37,-17,43,-44,23,28, 5,9,-25,-60,-50,-50,-59,49,-18,-18,-53,76,-33,11,11,8,42,14,-8,7,-53,68,-100,-43,15,-10,-74,-31,-26,8,-26,-20, 
  /* [51][0][][] */ -26,-37,66,99,-110,25,-19,42,-19,-69,-9,-14,-10,15,11,-63,72,-54,33,84,-2,127,-81,-24,-20,57,3,-21,-21,-2,48,34, 46,61,69,1,-66,-19,17,45,-13,-51,19,-31,-47,-6,31,-65,53,-40,38,25,-28,40,0,-43,-35,49,29,31,19,15,-76,89, 3,19,12,-43,26,4,36,-2,21,36,0,-22,46,-7,16,66,-26,-6,-63,-72,19,-116,-16,10,-3,-41,-41,24,6,-67,-19,-5, 
  /* [52][0][][] */ -69,-38,-54,-2,-62,22,-56,112,30,-20,18,127,-23,-2,-23,72,56,44,-7,57,16,-34,5,16,-39,-48,-45,75,-19,-42,37,92, 7,25,-77,-47,43,28,-43,93,-24,-59,-34,6,-13,-15,64,-30,-38,64,24,5,-88,54,10,16,19,71,33,-23,50,-29,-79,60, 31,55,-44,24,-94,-29,1,57,11,-84,32,-6,40,-2,71,27,5,91,-68,-18,30,5,12,-76,-21,36,-42,-24,27,-35,17,25, 
  /* [53][0][][] */ 39,1,18,-35,-54,-22,20,-18,25,-59,-15,-19,-26,-6,17,-24,52,-9,-17,29,24,-28,-23,-96,-2,-26,-33,-73,16,-24,6,-1, -7,40,-5,-84,-50,6,65,-66,-3,8,9,-91,2,32,43,-22,74,-103,-10,-19,8,63,-70,-50,61,15,-17,-49,53,28,89,61, -56,-21,40,-52,-1,15,51,7,14,-24,-19,31,-47,-127,-26,-34,-23,-16,-44,-19,-35,-53,-57,23,46,-18,44,-36,-15,-13,-51,-88, 
  /* [54][0][][] */ 4,-4,-5,9,-48,-20,-19,-27,16,-10,-20,-3,-1,11,-11,7,12,-46,-30,-5,-25,41,-24,-20,7,-27,-32,-73,-20,23,-15,34, 19,0,25,-21,-52,-10,-6,-44,-26,-28,15,-84,2,9,6,-48,-26,-29,-6,-41,-15,15,-38,3,-6,11,-74,-9,12,37,31,19, -17,15,10,-13,20,-13,6,-21,-7,29,28,-51,-12,-2,-5,-26,-17,-25,9,5,14,15,-49,39,-10,-2,0,-43,34,26,19,-127, 
  /* [55][0][][] */ -3,-5,-14,4,-1,-4,-24,63,46,-36,-13,121,-15,-11,68,64,89,12,1,127,7,-69,-62,-18,-21,-51,-38,18,-7,26,37,57, -29,9,-33,-92,32,64,-10,18,-10,-16,28,28,-29,10,40,-3,53,23,2,-35,-42,33,13,-14,-27,17,37,11,71,-5,5,66, 55,0,-52,36,-25,14,-9,47,79,-59,-20,-35,33,-71,-23,-17,30,62,7,38,-9,-33,-77,-80,-34,13,-57,-24,-42,-19,13,50, 
  /* [56][0][][] */ -32,-37,-11,-17,-118,-104,-23,1,-1,-105,-55,-1,20,-127,5,-19,-39,-67,-95,-5,-61,-38,-43,-61,-55,-83,-33,-11,-35,-36,-68,-36, 22,-3,-29,-74,-37,-24,0,-63,-28,-15,-27,-62,11,11,10,-22,18,-48,19,-18,-14,-17,-56,12,4,28,-41,-42,15,40,70,21, 37,8,12,30,46,18,-2,29,5,5,-2,-26,-29,-90,19,21,10,-19,-31,23,-12,-20,-48,9,36,10,48,-26,42,-38,-27,34, 
  /* [57][0][][] */ -26,24,-6,-99,-26,8,28,-27,-53,-4,14,-104,-19,-18,-14,-98,-1,-87,-2,-38,3,18,-74,7,53,50,-1,-31,45,29,54,-11, -40,13,2,-25,2,7,3,-13,-53,34,-13,-35,3,-66,-17,-11,-46,-52,-13,11,-40,-68,-48,7,51,-11,28,-7,-22,-11,16,-78, 43,-7,-13,127,-14,25,-18,-6,11,17,-13,-48,9,-32,-33,55,74,-44,7,8,66,-40,-6,-5,30,12,-14,-9,-46,-13,-46,-6, 
  /* [58][0][][] */ -40,31,28,-90,48,51,47,-5,-13,24,-19,-127,18,-51,-73,-101,16,-6,24,2,18,-5,-19,37,25,-16,0,-8,4,-11,34,-22, -20,17,-8,29,39,14,-18,-29,-3,38,-14,-126,-24,-63,-2,-12,-7,-20,33,-35,-22,-41,-47,-15,-17,-5,33,-25,-43,-26,-80,-112, 69,17,9,65,-39,-15,-68,7,48,-17,-33,-42,-37,-31,34,56,50,-74,-41,-34,39,-48,0,-72,-25,-48,8,26,-119,-18,-116,-52, 
  /* [59][0][][] */ 46,-24,12,16,96,-20,-8,-16,59,-21,-30,-42,10,-121,108,30,5,-68,21,3,-3,9,-127,55,-1,-38,66,-20,23,-19,-48,-58, -2,-44,-11,24,28,-3,-59,-6,53,-37,18,19,23,-89,32,86,21,-16,-46,11,-36,-45,38,-82,-44,-31,26,-16,-53,-29,-69,-43, -42,-23,-74,-3,-70,-13,-15,24,17,-36,-21,-14,35,-58,-19,42,66,-33,-11,-7,56,9,-53,-77,-33,-29,-40,-37,-46,53,12,-24, 
  /* [60][0][][] */ -27,-10,-19,-80,-44,-9,35,-52,-10,-6,6,-127,0,-12,-10,-31,-20,27,31,-110,40,-21,-55,-65,19,-1,-24,25,-25,41,5,-44, -43,-33,12,-100,18,-21,61,-25,-28,-28,-50,-73,-8,38,-39,-37,-86,-40,-25,-68,-37,57,-28,48,14,-7,-3,-43,50,-60,36,11, 34,-37,-24,119,-20,19,-38,-68,-11,14,-6,-24,-30,-64,10,-20,21,-69,-63,7,36,17,43,18,-30,-28,-2,72,-60,-81,-78,16, 
  /* [61][0][][] */ -37,-57,-2,44,-80,-41,-5,26,54,-41,-20,30,23,-2,-31,87,-16,-11,11,52,-28,-14,24,-7,16,-29,-63,27,-24,-73,-71,110, -44,32,13,-53,9,67,-40,6,-28,15,45,25,-51,-68,56,-15,-18,77,7,-114,13,-34,74,44,-49,10,2,73,-45,-32,-127,20, -77,27,-22,23,29,17,33,42,1,40,-56,8,-14,-74,-16,62,17,112,41,48,43,-28,98,-2,-19,-99,-38,24,5,57,59,84, 
  /* [62][0][][] */ 8,-35,-39,-15,-33,-40,-20,-23,-1,-40,-72,-15,0,-33,-29,-66,-2,-100,-7,0,-20,-27,-93,-65,-6,-69,-71,-51,-96,-63,-67,-17, -13,13,8,-19,-69,-5,6,-92,-6,-2,-50,-71,29,-10,-18,-18,-10,-96,-16,-45,-35,-27,-75,16,35,25,-57,-60,27,-8,61,6, -5,-29,28,-10,13,-20,9,12,0,27,4,27,25,-20,-1,16,-7,-47,14,-4,-28,-52,-127,17,-4,-19,30,-22,-20,-2,-12,-56, 
  /* [63][0][][] */ 8,8,-14,-52,-2,0,-21,-2,-33,-11,-12,-42,3,-9,-8,-127,19,-1,7,-69,-18,-65,-18,-19,1,4,-9,-25,-15,-15,6,-59, -50,30,-12,-34,10,-19,-34,19,-10,10,-15,-40,-16,-32,-3,-38,-13,-28,12,-31,-22,38,-45,-30,18,13,2,-35,-12,-65,-18,-80, 58,-25,-4,63,-29,-24,-46,1,27,-24,-18,7,-12,-63,53,33,27,-65,-11,-7,50,2,8,-71,-3,-27,4,0,-28,-38,-58,-10, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant13_scale = { 64, { 0.0043472894467413425, 0.0057791187427937984, 0.0052949422970414162, 0.0057949689216911793, 0.004556718748062849, 0.0053391857072710991, 0.0031535385642200708, 0.0071137151680886745, 0.0050868354737758636, 0.0027331358287483454, 0.003537292592227459, 0.0049845213070511818, 0.004090623464435339, 0.0039105960167944431, 0.0051688561215996742, 0.0039596017450094223, 0.0045275641605257988, 0.0037150436546653509, 0.0051193069666624069, 0.0046253306791186333, 0.0043530622497200966, 0.0027461487334221601, 0.0023515310604125261, 0.0048009678721427917, 0.0031059556640684605, 0.0039454014040529728, 0.0031442090403288603, 0.0028715466614812613, 0.0071569066494703293, 0.0040415739640593529, 0.0038187929894775152, 0.0059650898911058903, 0.0052807549946010113, 0.003017837181687355, 0.0062445676885545254, 0.0035821350757032633, 0.0037692324258387089, 0.0026889839209616184, 0.00338533497415483, 0.0046869460493326187, 0.0048142685554921627, 0.0029960765969008207, 0.0038602983113378286, 0.0036091662477701902, 0.0063986168242990971, 0.0028130230493843555, 0.0052872337400913239, 0.0016187685541808605, 0.0014162715524435043, 0.0032245221082121134, 0.0039890771731734276, 0.002973049646243453, 0.0029823086224496365, 0.0031888117082417011, 0.0069036334753036499, 0.0036467076279222965, 0.0049470094963908195, 0.0044155614450573921, 0.0039598653092980385, 0.0029479020740836859, 0.0037614344619214535, 0.002661827951669693, 0.0048438985832035542, 0.0063368710689246655, } };
const TfArray<64, int> quant13_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[32] = { -1245, -2240, -960, 3479, -3116, -1380, -1071, -3001, 1626, -4185, -1768, -3049, -1949, -1646, -720, -1550, -1380, -69, -1001, -2976, 3082, -360, -196, -2872, -1821, 2385, -1238, 733, 1026, 2832, 2774, -846, };
const TfArray<1, int> tensor_dimension14 = { 1, { 32 } };
const TfArray<32, float> quant14_scale = { 32, { 7.8563061833847314e-05, 4.0659786463947967e-05, 3.0529230571119115e-05, 7.4874493293464184e-05, 3.9220485632540658e-05, 4.7623114369343966e-05, 8.7388638348784298e-05, 6.8587287387344986e-05, 5.0803340855054557e-05, 5.214612974668853e-05, 4.4262011215323582e-05, 4.8620880988892168e-05, 3.6748468119185418e-05, 5.9322999732103199e-05, 0.00011970529885729775, 6.3306099036708474e-05, 4.0950020775198936e-05, 7.1327565819956362e-05, 5.8191122661810368e-05, 5.5676937336102128e-05, 4.5518871047534049e-05, 5.7618100981926546e-05, 7.4042480264324695e-05, 7.4805284384638071e-05, 5.5589374824194238e-05, 4.2330353608122095e-05, 5.491825140779838e-05, 7.581906538689509e-05, 4.3527550587896258e-05, 6.3231120293494314e-05, 5.8922381867887452e-05, 6.0871501773362979e-05, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[32*1*3*16] = { 
  /* [0][0][][] */ 48,24,11,-33,-67,31,-3,-101,32,-3,23,28,51,-113,-2,-63, 0,127,35,-18,-27,-25,68,-54,-12,-44,57,-50,20,-69,-10,45, -65,20,-7,-93,-46,-38,-42,14,-23,-28,-46,-106,-55,43,-106,81, 
  /* [1][0][][] */ 4,8,-16,50,-34,-75,88,25,-98,-65,-14,58,-94,12,-19,119, -7,-77,-11,-13,69,-78,-34,-19,43,18,8,26,-32,97,3,-127, -57,-15,-22,10,-43,-78,-30,-90,-65,-39,-53,-31,-68,-1,39,49, 
  /* [2][0][][] */ -127,41,21,-54,-7,-43,5,72,27,-78,-9,-125,-3,63,85,-11, 39,-101,53,56,-72,-76,-7,-111,-104,74,29,-66,-74,8,-22,-85, 55,63,-95,-54,-98,-126,-119,-37,-34,-17,-85,-122,-71,41,-53,126, 
  /* [3][0][][] */ 4,-17,40,35,80,-28,-15,25,-2,-19,2,21,-38,7,-6,-109, 3,127,62,-1,-40,-19,121,37,-48,-11,-28,-46,-61,-52,-120,-15, -15,31,-11,-120,12,-45,-10,-3,-104,-38,20,-101,-57,61,-51,60, 
  /* [4][0][][] */ 50,-38,-87,4,127,-55,32,-19,-45,-10,28,89,32,51,79,-14, 35,88,-15,38,-56,55,-103,-104,-46,52,-10,-31,10,-10,39,101, -36,49,5,25,26,-31,-93,-25,-83,-69,-56,-78,43,-68,-90,15, 
  /* [5][0][][] */ -64,2,-59,-29,-87,-16,16,-3,-23,-37,-26,-7,-34,86,-73,76, 54,-23,-82,-86,32,0,40,49,11,-74,-127,40,17,73,44,-49, 7,-35,63,-3,3,34,-45,10,-32,11,-96,-12,-21,54,-17,37, 
  /* [6][0][][] */ 4,-45,-75,-68,36,-45,-1,23,15,7,2,2,-72,-29,-20,-127, -9,-21,-44,-45,-87,-3,-33,-12,24,-18,-22,22,-18,-73,18,-9, 32,-53,36,-18,-13,24,-43,-33,-9,30,23,7,4,-20,8,-47, 
  /* [7][0][][] */ -25,28,-46,-10,-17,-12,-9,-13,-14,24,54,-11,-41,-2,-73,127, -13,40,-22,34,-15,-42,55,-43,-42,-10,-43,15,31,64,-25,30, 18,89,-30,84,7,-78,104,3,21,19,-24,35,-56,-14,103,41, 
  /* [8][0][][] */ 52,83,-24,61,18,-11,-41,42,-37,-7,57,70,-6,9,-21,-18, -44,127,55,-17,69,3,29,-55,-11,-66,-35,-70,-46,-93,-80,40, 12,43,-29,-16,-58,-68,-54,-61,-26,29,86,-50,-78,36,-62,0, 
  /* [9][0][][] */ -35,49,-22,-86,-33,-12,4,-11,66,28,52,-10,57,-69,-29,75, -34,42,22,-38,-88,43,-21,-127,61,-64,86,-45,53,-21,-9,-20, -19,-70,17,-61,-28,-12,-3,-71,-69,-6,29,25,53,-63,-41,-11, 
  /* [10][0][][] */ -89,-26,-127,-75,86,-23,84,41,-32,50,-38,22,-52,-16,-50,-13, 85,-71,-18,32,45,49,-48,102,-29,-1,-89,-51,59,-3,79,-90, -63,32,3,-25,-55,-57,22,-16,51,-24,-58,-43,-5,-4,-76,-41, 
  /* [11][0][][] */ -17,-9,-91,86,-50,-51,11,-87,80,20,35,-10,11,28,-59,61, 18,70,-33,26,36,-83,127,-46,-11,24,-100,-77,-31,66,-91,106, -84,2,-14,63,126,27,83,41,33,35,53,5,-69,65,76,26, 
  /* [12][0][][] */ -62,-11,-35,19,-30,-36,-82,-73,-31,-62,30,19,62,-10,0,-12, -127,3,13,-43,70,28,-49,-93,-86,-22,67,-103,-106,31,40,16, -31,60,-66,4,-78,36,72,-77,-63,-74,59,39,37,-76,36,-60, 
  /* [13][0][][] */ -80,-5,73,61,-9,49,127,35,36,-35,6,-63,-62,15,52,80, -18,-97,30,95,-51,-35,34,72,-60,28,-39,-51,5,-26,23,-55, -47,10,83,71,48,-25,33,-10,56,12,-58,36,17,-18,-5,10, 
  /* [14][0][][] */ -30,-35,10,0,5,19,-48,-38,-8,-12,15,12,10,-30,-4,-127, -5,29,30,-28,3,-18,-3,-33,7,2,-32,-27,14,-23,-25,-3, -17,43,17,-47,5,-31,-40,6,-34,-17,-2,-31,4,25,-14,47, 
  /* [15][0][][] */ 15,23,48,-65,-74,-59,25,-89,-21,32,72,-22,-56,-45,-47,-26, 44,127,48,-13,30,-12,80,32,-61,-57,3,-77,65,18,4,98, -5,35,-31,-32,0,-6,42,53,-51,-24,23,20,-79,41,37,71, 
  /* [16][0][][] */ 43,-11,28,-91,101,61,-84,-30,-36,-44,56,48,23,15,83,-17, -21,92,-8,-95,-3,0,-24,-2,-98,-63,23,-53,-10,-28,11,63, 7,89,-127,-51,14,61,-76,-104,-41,-15,-44,54,72,76,-62,55, 
  /* [17][0][][] */ -81,19,-64,-6,28,-77,-73,-50,-82,11,-41,-127,-98,5,-57,56, 59,2,56,57,31,14,-17,73,55,2,-59,-18,63,-12,-13,-3, 12,35,-6,58,-3,-44,-11,39,-22,-31,-39,13,-21,6,-27,-9, 
  /* [18][0][][] */ 12,-23,33,-81,-127,-56,15,-86,4,-25,-60,-77,-21,-3,-20,0, -24,-85,-87,-83,-1,-12,-11,5,-16,-14,17,-17,-9,3,-60,-60, 14,-21,2,-28,-36,-74,6,18,48,-13,36,35,-14,-125,5,-18, 
  /* [19][0][][] */ -10,-109,-21,-39,60,59,26,-58,-46,-51,112,-77,-20,127,3,43, -22,37,-29,-60,5,26,83,6,-22,-44,-16,-73,-54,31,6,24, -34,35,7,86,44,-25,21,33,20,-4,-27,17,-57,-20,69,20, 
  /* [20][0][][] */ -97,63,-42,96,-28,-67,-90,26,3,9,-3,-57,11,7,46,-35, -75,99,91,-39,-43,-73,93,20,-115,53,0,-91,24,-59,-127,18, 19,47,-87,-126,-60,-77,37,-68,39,2,-57,20,-18,19,-28,39, 
  /* [21][0][][] */ -48,-3,-39,54,-127,25,-53,46,-12,35,-115,25,-2,58,-23,29, -45,-49,74,28,20,-27,18,33,17,-1,-115,54,-16,-5,84,17, -87,-13,-15,-72,40,15,30,28,-1,-5,-57,-107,-71,7,-50,35, 
  /* [22][0][][] */ -91,7,-21,-49,25,-42,23,31,-35,-28,-30,-95,-127,62,-33,32, 65,25,67,0,45,-11,-62,32,45,20,-47,18,82,-29,21,-45, 27,47,58,13,-73,-42,-9,5,-49,14,-57,9,-11,30,-53,46, 
  /* [23][0][][] */ -39,-57,-101,-28,-12,-7,-11,-15,32,-7,53,-6,-54,-14,-16,-88, 11,-3,-19,-127,-61,-20,-7,-33,28,-10,70,42,-23,-28,11,34, -6,-58,29,-14,-44,47,-85,-48,36,-10,24,37,15,-18,1,-8, 
  /* [24][0][][] */ -113,-4,-114,-116,-85,6,-80,12,18,-1,36,-39,-9,24,-40,-43, -8,19,-127,-29,33,20,-77,-39,-73,7,48,-1,-70,-53,-20,-24, -66,-19,19,9,-50,-56,-14,-83,63,-21,-15,68,51,-43,-44,-38, 
  /* [25][0][][] */ -43,24,-35,47,15,-93,61,88,16,-33,-67,-33,-126,9,30,-39, 36,-24,-88,0,14,56,-11,-105,35,-14,-40,18,19,-50,37,49, 25,-98,67,127,-4,-100,-28,8,13,-21,-51,44,-16,-21,87,98, 
  /* [26][0][][] */ 78,-67,-18,-44,56,14,-64,15,66,52,78,69,-30,36,70,-124, 44,112,55,-43,-46,62,-7,-52,-9,-23,-18,-20,-42,-51,-18,2, 24,44,67,-22,-9,-73,-15,-29,-63,-53,-67,23,41,-65,-79,127, 
  /* [27][0][][] */ -24,27,-13,-54,48,-58,11,-48,-73,-43,-78,-80,-127,44,-23,54, 38,-12,81,7,23,43,-41,10,40,-17,-36,-5,65,-21,-14,-22, 19,0,-6,35,-21,35,22,16,-23,-33,-11,-46,17,-12,-28,17, 
  /* [28][0][][] */ -34,-69,-4,2,62,-14,47,85,-30,-30,14,-56,-73,127,-18,101, 42,59,-95,39,-53,5,78,-60,-3,-24,-98,-72,-87,80,77,-62, 24,-56,107,54,15,-48,-27,81,101,-20,-127,38,47,73,125,-23, 
  /* [29][0][][] */ -17,34,0,-5,76,-58,3,84,-47,-18,-37,-48,-36,-78,-16,-24, -71,9,22,-32,6,-95,-32,-19,10,14,-16,-73,-34,-47,18,-23, -29,-51,-56,-51,84,75,70,-30,20,-40,53,33,22,-65,61,-127, 
  /* [30][0][][] */ 51,32,22,33,-22,55,24,-75,-2,4,-59,-49,67,49,42,15, -76,29,-50,-77,48,-38,-6,-87,-10,-29,-54,-59,-114,127,-21,-7, 5,-46,-33,7,-7,38,-5,95,94,0,62,83,19,65,31,-99, 
  /* [31][0][][] */ -10,37,-25,-99,81,26,-26,-12,-15,-68,4,-88,-55,24,-14,34, -23,33,-11,-127,68,55,-35,9,-73,-76,7,4,48,48,-52,-18, 53,-64,43,-36,26,-36,56,34,-56,-34,19,-3,65,127,-14,-12, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant15_scale = { 32, { 0.0047107646241784096, 0.0024380246177315712, 0.0018305806443095207, 0.0044895922765135765, 0.0023517219815403223, 0.0028555567841976881, 0.0052399602718651295, 0.0041126017458736897, 0.0030462481081485748, 0.0031267639715224504, 0.0026540197432041168, 0.0029153844807296991, 0.0022034959401935339, 0.0035571004264056683, 0.0071777179837226868, 0.003795933211222291, 0.0024554275441914797, 0.0042769131250679493, 0.0034892312251031399, 0.0033384766429662704, 0.0027293830644339323, 0.003454871941357851, 0.0044397036544978619, 0.0044854423031210899, 0.0033332263119518757, 0.0025381946470588446, 0.0032929847948253155, 0.0045462301932275295, 0.0026099802926182747, 0.0037914372514933348, 0.0035330785904079676, 0.0036499509587883949, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[16] = { -488, 273, 154, -423, 770, -1370, 378, 529, -2363, -2729, -1364, -1229, -1822, -53, -1559, 1380, };
const TfArray<1, int> tensor_dimension16 = { 1, { 16 } };
const TfArray<16, float> quant16_scale = { 16, { 0.00014875931083224714, 0.0001897806505439803, 9.1245849034748971e-05, 0.00013913458678871393, 9.3708418717142195e-05, 0.00011773254664149135, 0.00012771363253705204, 9.3470313004218042e-05, 0.00012246229744050652, 0.00010028845281340182, 0.00011758504115277901, 0.00013356110139284283, 0.0001235418749274686, 0.00010710352944443002, 9.1209120000712574e-05, 8.6451953393407166e-05, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[16*1*3*8] = { 
  /* [0][0][][] */ 39,24,32,69,-21,3,-3,-23, 13,22,3,-24,-48,0,12,-127, 32,42,-8,-12,-28,-34,45,4, 
  /* [1][0][][] */ -10,18,-14,24,-5,-42,32,26, -52,8,-48,-56,33,60,76,99, 27,58,27,-127,-59,-7,59,0, 
  /* [2][0][][] */ 45,-19,-46,69,49,-55,35,-66, 105,26,45,75,11,-47,43,69, -59,21,26,-127,-10,39,99,56, 
  /* [3][0][][] */ 45,-74,-9,-30,66,-42,-38,-12, 63,-127,-13,66,38,-18,-64,-12, 15,-63,-32,-46,64,-41,-20,-30, 
  /* [4][0][][] */ -72,-89,-30,-85,-127,-34,1,30, -19,21,3,4,25,108,5,-39, 108,84,86,10,-68,104,37,56, 
  /* [5][0][][] */ -42,66,22,51,-9,-49,-31,97, -32,67,-16,-13,1,127,-77,-19, -92,85,45,15,-63,14,-76,25, 
  /* [6][0][][] */ 67,-20,1,33,-58,-6,100,48, -20,-54,-9,-102,-46,48,53,91, -22,-127,-75,53,-3,-60,-62,-75, 
  /* [7][0][][] */ 66,55,33,-126,28,106,126,95, 127,65,84,116,76,46,30,43, 64,21,-47,-18,98,81,61,-28, 
  /* [8][0][][] */ 12,-77,73,43,-43,-67,81,19, -26,-55,-81,54,-28,-80,-127,19, -23,-42,-3,57,-23,42,-77,-55, 
  /* [9][0][][] */ -33,-127,-2,26,-34,31,38,46, -37,-74,-49,-62,-27,-2,-87,-18, -11,-88,-69,37,-49,29,-41,58, 
  /* [10][0][][] */ -118,-111,-113,34,-43,-76,8,-42, -126,-127,-74,9,-91,-46,-75,-77, -126,-57,-66,58,-105,83,19,37, 
  /* [11][0][][] */ -48,-8,-40,66,5,7,-43,-57, -31,-29,19,21,33,-127,-67,-6, -39,-26,-84,53,-75,-73,-80,-81, 
  /* [12][0][][] */ -25,72,-40,127,-32,-6,34,-65, -8,33,-66,-19,-61,19,-47,-97, 17,26,7,-31,17,-17,-36,-4, 
  /* [13][0][][] */ -12,113,-7,-24,-126,70,-69,-61, 43,93,34,-11,-127,1,-27,-90, -32,75,100,-4,6,-11,-68,80, 
  /* [14][0][][] */ 47,36,109,-57,-11,68,-5,-127, 25,69,94,39,-21,-81,21,-53, 120,-72,19,116,-11,-106,-45,-99, 
  /* [15][0][][] */ 99,126,13,-120,-3,25,31,82, 46,28,87,-124,25,5,127,61, -21,5,119,-72,-68,61,43,73, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant17_scale = { 16, { 0.0042196293361485004, 0.0053832195699214935, 0.0025882325135171413, 0.0039466195739805698, 0.0026580845005810261, 0.003339540446177125, 0.0036226585507392883, 0.002651330316439271, 0.0034737021196633577, 0.0028447301592677832, 0.0033353562466800213, 0.0037885250058025122, 0.0035043249372392893, 0.0030380431562662125, 0.0025871905963867903, 0.0024522512685507536, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int32_t tensor_data18[8] = { 8922, 11314, -6031, -47030, 424, 2029, 16315, 17967, };
const TfArray<1, int> tensor_dimension18 = { 1, { 8 } };
const TfArray<8, float> quant18_scale = { 8, { 1.13639116534614e-05, 2.0359186237328686e-05, 1.0866365300898906e-05, 1.0984222171828151e-05, 1.2405475899868179e-05, 1.7259271771763451e-05, 1.5417012036778033e-05, 1.2540811439976096e-05, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[8*1*3*32] = { 
  /* [0][0][][] */ 36,70,24,-14,15,45,84,1,13,-17,26,-81,-16,-73,-98,-2,-30,-30,-57,-51,8,32,43,79,30,-4,-27,-77,-35,-54,-25,109, 79,64,110,42,116,87,104,101,81,45,-27,21,-23,-55,35,40,-14,8,50,64,-19,112,73,96,88,47,-23,30,-57,54,54,92, -1,-10,82,-22,67,4,-27,17,-29,-66,-44,-50,-25,-47,-115,-29,-19,-42,-1,-67,20,-51,-59,-37,-49,17,-86,-127,-31,-85,-27,44, 
  /* [1][0][][] */ -98,-82,-48,-20,-16,26,-18,-1,-13,-8,-19,-33,21,-16,38,24,-32,3,35,65,50,6,28,36,15,5,-33,-26,-38,2,30,-15, -86,-38,-34,-22,-40,-24,-2,-41,15,-13,-38,4,-4,30,4,39,42,13,-2,10,40,-6,-7,25,13,11,-20,-32,2,32,-19,9, -127,-62,-73,-63,6,2,-17,-13,-24,15,-15,-20,-26,-24,-25,-29,32,-5,10,16,-5,50,37,28,-29,5,-35,28,20,-30,-5,33, 
  /* [2][0][][] */ 15,70,-93,-70,-105,-84,8,19,-86,-47,-46,-71,30,-88,-48,27,19,-50,32,42,82,-51,20,6,17,-43,-65,-66,-30,-67,-15,32, -40,40,76,-55,42,-62,0,-13,-4,-35,-75,-38,7,-20,4,-47,58,-68,60,-66,-10,20,90,55,-46,-57,79,9,-14,82,-46,0, -56,51,-16,-89,-84,-65,-77,8,-127,-40,-100,-68,-118,-9,-112,-90,-22,-45,-47,-38,17,-58,35,81,3,-72,-45,-52,-35,16,25,61, 
  /* [3][0][][] */ 11,38,26,-21,19,22,64,66,54,30,46,5,79,39,58,74,53,69,85,100,127,89,86,92,92,86,58,76,75,98,38,55, -16,29,39,31,14,19,-24,8,41,86,80,42,76,46,64,75,48,40,69,74,106,61,57,25,70,109,60,95,75,49,37,86, -25,13,31,1,-3,-36,-17,-24,36,75,73,65,33,59,27,34,18,18,63,31,90,38,25,19,49,67,36,49,55,44,-34,-10, 
  /* [4][0][][] */ 89,31,34,61,8,46,30,38,13,0,-37,-2,-16,23,-34,45,-66,-37,-51,-75,-68,-66,-58,-22,-53,-56,-35,-21,-21,-61,-64,43, 56,41,82,-17,39,85,16,39,64,17,34,-56,-75,-44,39,-35,-41,-32,-40,-7,-87,26,-44,-3,-29,-20,5,-39,-92,-11,39,85, 52,125,105,3,57,127,14,84,-13,-6,67,-1,-24,12,-48,36,15,-43,-58,16,-31,-3,42,60,-16,-13,-26,3,4,31,-34,86, 
  /* [5][0][][] */ -30,-1,23,-1,-7,28,-38,-36,-34,21,-66,28,-17,-11,-3,7,-6,54,55,39,3,-8,34,-39,3,-46,-21,7,-68,66,-23,67, -10,-41,49,-15,2,-40,-32,-50,-44,-127,-37,30,-6,-67,-70,-30,-28,-33,-16,-16,-34,31,-31,-4,-7,-4,30,19,26,9,70,45, -29,8,-25,-12,11,-6,-46,-23,-63,-19,-69,-37,26,25,-62,-39,36,-25,44,14,10,-2,1,6,0,28,10,17,-21,35,23,42, 
  /* [6][0][][] */ 25,30,-6,3,-19,-14,11,-36,-54,-4,-29,9,-20,-7,15,14,11,19,21,-12,-15,50,21,31,-36,62,73,28,28,4,-8,-23, -20,-48,-27,19,-64,55,-16,-26,16,-61,-4,-38,-2,0,18,-29,-47,-18,-25,44,-95,16,-7,-41,-29,-50,-8,13,-49,-81,-38,-107, -80,51,6,-56,-47,-15,-6,22,-32,-36,-114,-6,-11,26,-55,-29,-29,-79,-79,-16,-58,-69,-57,-42,-10,4,-93,-105,-28,-93,-67,-127, 
  /* [7][0][][] */ 17,27,49,17,15,5,-15,0,11,-2,46,-36,61,-55,-11,53,34,95,9,3,18,25,-10,12,81,18,15,76,83,91,44,-1, 40,46,16,-16,52,-16,-30,-31,-45,-16,-96,-83,-67,-96,-3,-10,-21,-23,-25,-108,-38,-77,-127,-60,-51,-18,-44,-86,6,60,43,-12, 4,-36,-1,-29,12,-17,-47,-41,-5,-33,3,14,7,-35,-57,-12,-57,-73,-31,-87,-66,-60,-49,27,-55,39,-53,-46,-48,12,22,15, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,3,32 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0030155940912663937, 0.0054026329889893532, 0.0028835623525083065, 0.0029148375615477562, 0.0032919896766543388, 0.0045800213702023029, 0.0040911487303674221, 0.0033279031049460173, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,23,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0037683823611587286, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,23,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.035254117101430893, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,23,1,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.035254117101430893, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,12,1,8 } };
const TfArray<1, float> quant23_scale = { 1, { 0.035254117101430893, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,12,8 } };
const TfArray<1, float> quant24_scale = { 1, { 0.035254117101430893, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,12,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.01667734794318676, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,12,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.01667734794318676, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,6,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.01667734794318676, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,6,16 } };
const TfArray<1, float> quant28_scale = { 1, { 0.01667734794318676, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,6,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.014600077643990517, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,6,1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.014600077643990517, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,3,1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.014600077643990517, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,1,3,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.014600077643990517, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,1,3,64 } };
const TfArray<1, float> quant33_scale = { 1, { 0.016797788441181183, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,1,64 } };
const TfArray<1, float> quant34_scale = { 1, { 0.016797788441181183, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,2,1,64 } };
const TfArray<1, float> quant35_scale = { 1, { 0.016797788441181183, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<2, int> tensor_dimension36 = { 2, { 1,128 } };
const TfArray<1, float> quant36_scale = { 1, { 0.016797788441181183, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<2, int> tensor_dimension37 = { 2, { 1,2 } };
const TfArray<1, float> quant37_scale = { 1, { 0.11828644573688507, } };
const TfArray<1, int> quant37_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<2, int> tensor_dimension38 = { 2, { 1,2 } };
const TfArray<1, float> quant38_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 20 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 20,19,18 } };
const TfArray<1, int> outputs1 = { 1, { 21 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 21,2 } };
const TfArray<1, int> outputs2 = { 1, { 22 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 22 } };
const TfArray<1, int> outputs3 = { 1, { 23 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 23,3 } };
const TfArray<1, int> outputs4 = { 1, { 24 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 24,17,16 } };
const TfArray<1, int> outputs5 = { 1, { 25 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 25,4 } };
const TfArray<1, int> outputs6 = { 1, { 26 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 26 } };
const TfArray<1, int> outputs7 = { 1, { 27 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 27,5 } };
const TfArray<1, int> outputs8 = { 1, { 28 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 28,15,14 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 29,6 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 30 } };
const TfArray<1, int> outputs11 = { 1, { 31 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 31,7 } };
const TfArray<1, int> outputs12 = { 1, { 32 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 32,13,12 } };
const TfArray<1, int> outputs13 = { 1, { 33 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 33,8 } };
const TfArray<1, int> outputs14 = { 1, { 34 } };
const TfLitePoolParams opdata15 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs15 = { 1, { 34 } };
const TfArray<1, int> outputs15 = { 1, { 35 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 35,9 } };
const TfArray<1, int> outputs16 = { 1, { 36 } };
const TfLiteFullyConnectedParams opdata17 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs17 = { 3, { 36,11,10 } };
const TfArray<1, int> outputs17 = { 1, { 37 } };
const TfLiteSoftmaxParams opdata18 = { 1 };
const TfArray<1, int> inputs18 = { 1, { 37 } };
const TfArray<1, int> outputs18 = { 1, { 38 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 736), (TfLiteIntArray*)&g0::tensor_dimension0, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1120), (TfLiteIntArray*)&g0::tensor_dimension21, 184, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 184, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension23, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension24, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension27, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 384), (TfLiteIntArray*)&g0::tensor_dimension28, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension31, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension32, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 384), (TfLiteIntArray*)&g0::tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension35, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension36, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 128), (TfLiteIntArray*)&g0::tensor_dimension37, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension38, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[19] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[19] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 39, };
const size_t tflNodes_subgraph_index[] = {0, 19, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  38, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_67_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 39;
  for (size_t i = 0; i < 39; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_67_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_67_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_67_invoke() {
  for (size_t i = 0; i < 19; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_67_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
