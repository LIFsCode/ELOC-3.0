/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 19.10.2024 09:29:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 4576;
#else
constexpr int kTensorArenaSize = 3552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,640 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038756127469241619, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 20, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 20, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 10, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 10, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 320, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data6[2] = { 429, -429, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const TfArray<1, float> quant6_scale = { 1, { 4.5106575271347538e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[2*320] = { 
  27, -28, 53, 40, 50, -29, -31, 20, 3, -19, -33, -45, -21, 8, -42, 18, 61, 4, 1, -61, 39, 39, 1, 39, -36, -4, -10, 43, 17, -1, -27, -1, 53, 20, -10, -11, -49, 2, -24, -7, 28, -24, -25, 48, 1, -19, 33, -38, -1, -47, 42, -44, 21, -34, -26, 25, -75, -68, -16, 58, -25, 48, -43, 2, -22, -6, 21, 39, 35, 5, -39, 29, 44, 20, 17, -58, 19, -7, -23, 20, 56, -1, -67, -60, -30, 19, -4, -11, 55, -33, -20, 44, 29, -24, -57, -17, 44, 2, 42, -55, 17, 16, -62, -34, 44, -31, -31, -23, 9, -50, -8, -57, -5, -18, 19, 27, 17, 24, -39, 5, -76, -46, -47, -16, -12, 8, 29, -25, 48, 47, -39, 30, 73, -1, -20, 43, 16, 30, 64, 0, 66, 64, -12, 77, 6, -42, -34, -34, -25, 9, 3, -42, 35, -50, 7, -12, 66, 36, -20, 20, -51, 3, 17, -53, 23, -50, 9, 2, 27, -28, -6, -30, 48, 18, -11, -14, 51, -49, 45, 69, 6, 82, 22, 6, -40, -40, -46, -53, 22, 31, 4, -52, 31, 38, -35, -20, 17, 11, 94, 37, 37, 11, 30, -31, 43, 6, 12, 26, -27, -55, -2, 9, -73, -31, 19, 9, 34, -23, 13, -40, 34, 25, 57, 36, -65, 66, 41, -34, 2, -54, 20, 37, -1, -7, 50, -65, -1, 52, -57, 43, 31, 4, 49, -21, -25, 54, 10, -47, -7, 25, -12, -54, 2, 10, 12, -16, 87, 95, 31, -48, -60, 100, -78, -57, 14, 93, 46, 71, 100, 76, 59, 45, 86, -73, 16, -20, 20, -62, 66, -55, 79, -22, 19, 20, 45, 75, 60, 102, 47, 81, -8, 4, 127, -71, 44, 56, -33, 27, 105, 32, 3, 20, -81, 53, 44, 31, 46, 74, -71, 109, 25, -22, 8, 31, -27, -8, 114, -23, 99, 28, 
  6, 8, -41, -21, -44, 11, -6, -32, -22, 48, -13, 10, -5, 39, 44, -11, -43, -12, 15, 17, -3, -34, 4, -15, 41, -22, 31, -55, -7, 36, 16, 52, -43, 12, 29, -23, 34, -54, 50, 53, -40, 69, -3, -50, -16, 49, -59, 29, 25, 29, -31, 0, -10, 30, 66, -51, 61, 21, 57, -36, 15, -67, 7, -13, 29, 14, -20, -35, -46, 3, 11, -33, -33, -16, -42, 25, -43, 3, 27, -30, -71, -9, 54, 64, 27, -40, 26, 10, -65, 38, 33, -33, -36, 6, 15, 23, -17, 26, -3, 53, 16, -10, 64, 51, -62, 58, -1, 43, -37, 38, 4, 36, -1, 45, -29, 2, 20, -30, 40, -58, 55, 1, 50, 33, 40, -39, 13, -7, -62, -34, 16, -12, -69, 26, 47, -62, -47, -24, -68, 23, -33, -60, -16, -64, -31, 16, 20, 64, 38, 32, -39, 65, -27, 18, 14, 0, -62, -27, -7, -48, 28, -9, -25, 66, -44, 27, 14, 43, -40, 33, -28, 47, -45, -26, 36, 2, -16, 43, -8, -54, 8, -80, -29, -16, 25, -8, 34, 28, -30, -20, -46, 1, -32, -41, 55, -16, 12, -23, -85, -48, -49, -24, -15, -4, -38, -49, -31, -26, 5, 67, 22, 31, 44, 49, -42, -16, -60, 36, -24, 50, -1, 7, -50, -36, 70, -39, -30, -7, -16, 14, 12, -51, 15, 3, -49, 14, -2, -41, 34, -31, -2, -7, -23, -11, 64, -41, 1, 43, 9, 2, 11, 33, -23, 10, -28, -18, -83, -75, 1, 38, 19, -61, 52, 66, -16, -85, -85, -44, -66, -57, -48, -85, -75, 81, 0, 35, -15, 64, -71, 65, -83, 10, -60, 1, -30, -70, -57, -63, -31, -29, -15, -26, -98, 55, 0, -24, 34, -30, -55, 16, -21, 17, 76, -31, -49, -18, -30, -100, 77, -83, -17, -2, 9, -78, -2, -33, -58, 4, -75, -64, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 2,320 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0046841208823025227, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[64] = { 1175, 616, 2156, 872, 2408, 2323, 426, 802, -2735, 2828, 1313, -918, 1515, 1750, 1202, 3046, 1726, -68, 59, 622, 414, -371, 465, 5, 4099, -1074, -198, -255, 1886, 1239, 1563, 1468, 1555, 1177, 1181, 337, 1507, 1278, -502, 1322, 1478, 271, 1634, -163, 213, -956, 808, -735, 546, 94, 3289, 1661, -844, 1764, -1351, 1965, -319, -915, -386, 1509, 2733, 2960, 1951, 1502, };
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const TfArray<64, float> quant8_scale = { 64, { 4.1195158701157197e-05, 3.2250394724542275e-05, 3.5159479011781514e-05, 3.1162602681433782e-05, 3.0576662538805977e-05, 3.5301916796015576e-05, 4.0030849049799144e-05, 2.6743213311419822e-05, 4.421117773745209e-05, 3.1573374144500121e-05, 3.6605208151740953e-05, 3.0856961529934779e-05, 4.4324431655695662e-05, 4.1618372051743791e-05, 3.6352139431983232e-05, 3.4384258469799533e-05, 2.9877901397412643e-05, 4.3494903366081417e-05, 3.9318976632785052e-05, 4.4562337279785424e-05, 5.2231960580684245e-05, 4.0231403545476496e-05, 4.3011023080907762e-05, 3.6758821806870401e-05, 3.4065036743413657e-05, 3.8248417695285752e-05, 2.6264422558597289e-05, 4.0815451939124614e-05, 3.9510305214207619e-05, 2.9984383218106814e-05, 2.7062938897870481e-05, 3.3624164643697441e-05, 3.6235749576007947e-05, 4.3337069655535743e-05, 3.1176663469523191e-05, 3.9969196222955361e-05, 4.3043604819104075e-05, 4.9027563363779336e-05, 4.3795284000225365e-05, 2.9968121452839114e-05, 3.4675776987569407e-05, 4.7275043471017852e-05, 4.2893934733001515e-05, 3.3333311876049265e-05, 2.9772036214126274e-05, 3.9534814277430996e-05, 3.5492968891048804e-05, 3.6125758924754336e-05, 2.9112839911249466e-05, 3.3120417356258258e-05, 2.356348886678461e-05, 3.9868904423201457e-05, 4.3059575546067208e-05, 3.8088353903731331e-05, 3.8834616134408861e-05, 2.8527245376608334e-05, 4.0497769077774137e-05, 3.0662224162369967e-05, 4.2870080505963415e-05, 3.671253944048658e-05, 3.6819390516029671e-05, 2.8025462597724982e-05, 3.7932917621219531e-05, 2.699115066207014e-05, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[64*1*3*32] = { 
  /* [0][0][][] */ 8,-30,-5,-80,8,-32,47,16,6,-126,29,32,-34,17,4,24,30,0,6,-15,35,48,22,14,-4,-37,43,-34,65,-1,24,-2, -60,-30,-36,-3,-36,3,39,-48,-16,-100,14,18,22,14,-58,13,-1,-23,9,-9,23,32,-18,3,30,-71,24,-45,37,-11,-11,-21, -38,12,28,-87,42,4,68,-24,19,-32,78,19,-11,44,-21,22,10,73,4,30,7,20,54,32,-1,2,11,18,127,28,-34,-19, 
  /* [1][0][][] */ -36,-43,-33,-65,89,-1,69,-65,31,-127,92,-5,-84,46,-54,85,-5,57,-38,-41,-3,57,91,-14,45,-44,35,24,110,-13,81,9, -3,6,21,-91,27,10,13,-74,-1,-84,30,36,-58,23,-26,96,-12,6,46,-19,-39,87,-8,-35,19,-10,24,63,47,-41,19,25, -77,18,-24,-48,68,9,43,-80,24,-17,38,108,19,-16,38,24,-1,74,62,24,67,-11,52,60,14,36,59,23,18,-13,35,56, 
  /* [2][0][][] */ 17,-69,26,-67,-12,-8,10,-64,-5,10,-39,-14,-46,-47,-58,-2,28,-46,-14,-66,-66,-5,4,-28,-54,-58,-15,-8,2,-87,-29,-76, -17,-40,29,-55,-59,34,32,-3,112,14,-9,54,76,25,30,29,1,43,1,64,7,13,-7,46,71,9,28,18,-26,33,-3,127, 64,-34,-54,-8,-50,-23,-17,34,4,66,-25,-53,6,40,-57,-22,-23,-15,-15,57,-65,14,-29,16,12,-15,-22,-56,-7,-14,32,35, 
  /* [3][0][][] */ 61,-50,8,-27,-17,-15,55,64,46,-12,-43,-43,24,64,-121,3,-59,29,-51,44,31,-7,-96,-76,55,38,4,-23,44,-52,-16,27, 56,-12,19,-10,-7,48,45,68,45,60,38,-20,19,127,-6,38,7,0,62,-65,47,6,-5,41,64,-66,34,26,-39,-19,-3,71, -39,-83,24,8,-86,-12,51,46,35,-45,5,-10,38,-28,-83,18,-21,-3,-26,61,-23,24,-92,5,100,-43,9,9,-64,14,50,46, 
  /* [4][0][][] */ 4,-127,-100,-41,16,-99,-42,56,-4,-73,-11,37,-37,49,-114,10,-42,28,-77,7,-19,82,-28,-64,81,15,-13,-41,0,-58,62,-30, -16,-93,27,-1,-21,9,25,67,121,9,72,31,-28,55,20,6,-23,-3,14,-18,75,73,-57,43,40,-33,-1,-31,6,-64,54,93, -3,-69,-5,-33,-86,-10,74,-1,11,3,27,-11,20,116,-79,47,3,24,-23,17,33,42,-62,-30,49,-20,8,-6,46,-62,37,62, 
  /* [5][0][][] */ -65,-29,-42,-34,3,30,-17,-18,-50,35,14,-19,-13,-27,-53,33,0,4,4,86,-72,31,21,-24,36,-10,-62,57,9,1,51,39, -37,15,4,-89,51,3,1,-88,5,-30,-23,5,-34,-1,-85,6,-13,0,-23,14,-47,26,17,-41,8,-2,-2,22,-33,6,35,28, -1,33,66,22,21,2,46,-28,32,-13,70,127,24,-4,-10,59,68,112,45,-28,66,-21,35,12,-16,30,15,21,-3,4,54,28, 
  /* [6][0][][] */ 78,-35,35,32,-42,4,-27,15,67,78,-5,2,57,-23,97,-14,-25,-42,21,30,-37,-127,-45,11,-63,118,-8,9,-8,26,40,-27, 51,-28,-18,22,-61,-63,-8,64,-4,119,-3,-23,15,-5,74,7,-59,-43,-45,27,-57,-107,-14,-44,44,14,-7,-39,-69,-28,40,-60, 51,-46,-51,-44,45,-46,27,-48,-35,36,12,42,-58,-43,-35,-35,41,-13,-53,-30,-61,-14,31,-16,-59,-73,-14,4,-8,-68,-2,-5, 
  /* [7][0][][] */ 65,-70,-7,31,-22,-48,20,127,28,-58,-52,-38,-1,40,-119,78,-82,-33,26,62,-47,68,-44,-67,101,47,-15,-76,40,-59,116,-52, 30,-42,-96,-21,-18,-58,71,25,38,-12,-57,1,-74,75,16,36,-30,-41,-42,-82,-87,70,-44,-26,20,-68,7,-70,33,-31,14,52, -15,2,0,51,-48,-40,-49,-27,-62,-10,19,27,18,86,-28,64,8,-77,12,-67,67,85,-26,-34,64,4,7,-85,-7,-37,-84,107, 
  /* [8][0][][] */ 9,1,-11,28,29,2,-25,-7,-50,80,-59,-12,-24,56,19,79,28,-29,-7,-43,-15,28,9,7,18,-6,-45,-33,10,-22,-29,-39, 30,-10,-17,51,21,-31,-5,32,3,127,8,23,-14,64,-43,27,-33,-53,9,22,35,70,29,24,30,-45,4,-34,31,-28,-6,-1, 6,-31,6,19,-39,14,-14,25,-11,61,-53,-12,16,-14,-12,32,-21,-50,30,8,-15,93,-43,-24,31,-60,-12,-16,-40,-2,-20,21, 
  /* [9][0][][] */ -62,-37,-52,-72,54,5,31,-127,10,-111,20,-27,-59,11,-54,22,24,47,-35,-24,-12,99,33,-4,73,-89,18,44,112,-39,59,-14, -23,3,11,-25,42,-11,22,-127,33,-85,46,27,-2,15,-37,85,-26,-1,3,-56,-21,40,55,-19,27,-97,-25,24,23,-50,90,-34, -32,6,8,-12,76,15,44,-97,44,-85,48,102,13,16,-7,-5,51,56,52,9,67,24,10,42,35,8,2,0,49,-10,18,0, 
  /* [10][0][][] */ -85,-19,-72,-56,-26,-30,13,-51,64,-96,4,5,34,31,-74,18,-37,-15,-30,42,-10,20,-46,-49,62,-87,14,1,103,-43,55,9, -69,-21,3,-59,9,-26,10,-127,27,-77,41,-16,-28,70,-24,16,39,23,4,-3,2,64,59,-31,32,-87,-7,-4,114,4,33,1, -90,39,-2,-14,-7,-13,41,-118,26,-53,66,19,-32,31,16,4,48,50,20,-11,64,53,-7,-4,82,-39,52,30,55,12,38,14, 
  /* [11][0][][] */ 21,46,-66,51,15,-31,37,27,-48,-17,34,16,-127,-30,56,-3,26,18,23,-3,2,-61,48,1,-86,25,54,36,45,-67,37,47, -28,-25,-36,12,-18,47,44,-33,-29,87,-12,97,-55,-42,80,-30,57,42,15,-46,-16,-26,15,-6,-124,62,12,-1,-50,-39,-48,82, -15,65,25,90,0,-1,-6,29,43,82,-32,112,41,-25,81,-16,63,63,59,-43,-25,-26,69,68,-67,117,44,29,-83,48,-63,65, 
  /* [12][0][][] */ -66,-14,-10,-78,21,21,-8,-60,34,-84,22,0,-23,-3,-30,20,33,36,6,-13,-19,12,28,-29,-5,-102,-11,18,42,-48,12,24, -9,-25,26,-17,-15,15,30,-44,-2,-127,27,-13,26,-6,-30,54,-9,28,-12,-30,31,19,36,-19,16,-51,22,33,40,-14,1,-13, -35,44,25,-28,60,32,43,-113,-1,-72,65,70,17,-2,-23,40,8,16,44,4,54,10,45,-4,36,-7,31,27,95,-14,39,-14, 
  /* [13][0][][] */ -31,-48,-28,-61,-6,24,26,-32,-14,-127,18,14,-13,-24,-32,23,-13,10,-4,-24,-14,28,5,-6,9,-76,31,38,54,-47,9,-45, -42,-3,-21,-45,2,5,68,-63,-22,-92,55,-21,-49,48,-9,2,39,39,-17,-41,-4,8,79,9,49,-34,3,46,59,30,49,-21, -38,-11,11,26,8,3,54,-70,37,-13,77,21,50,24,-26,16,33,2,22,2,-14,62,15,33,16,-17,13,13,37,-21,46,-5, 
  /* [14][0][][] */ 21,-19,-18,-47,104,-14,105,-68,-13,-34,35,16,-56,-38,-40,72,1,55,-19,4,27,-15,24,18,17,-74,86,81,56,-31,57,-49, -11,2,41,38,86,-17,0,0,8,-36,35,108,-26,0,43,36,-17,34,73,13,43,-10,22,44,-19,21,11,47,26,7,43,-14, -27,-27,9,2,31,-27,-64,-22,-34,120,-31,10,-43,-24,89,-15,9,-36,22,-61,30,-11,-34,20,-73,127,-35,-29,-83,11,-2,-26, 
  /* [15][0][][] */ -68,-41,-20,-26,-47,-17,41,-84,39,-85,37,17,17,46,-19,11,31,-27,-44,51,54,115,-19,-10,31,-72,13,7,35,-17,41,34, -70,-15,34,-64,30,5,63,-107,40,-91,58,-30,5,51,-28,-41,12,33,15,-26,39,63,52,-46,79,-30,-34,-30,67,-8,23,-6, -127,12,-13,-56,-20,2,16,-123,82,-15,63,22,53,9,-70,37,6,63,-15,16,13,36,32,-28,70,-47,37,-22,54,-14,-12,4, 
  /* [16][0][][] */ -50,-35,17,-24,5,6,53,-61,20,-109,45,20,-13,46,-45,13,-8,11,-22,-15,-49,19,-17,-41,44,-116,33,-29,51,-84,33,26, -94,-35,20,-10,-35,82,31,-68,127,-97,15,78,70,34,-9,-52,67,61,68,-10,38,22,-23,-9,33,40,1,64,19,-32,-37,49, -94,-86,-92,-77,-47,-68,-2,-65,-71,-12,15,-80,16,32,-31,23,-68,-66,-45,-30,-8,50,-39,-121,67,-73,-59,-65,-64,-53,31,-33, 
  /* [17][0][][] */ 17,-29,5,60,22,-17,-15,-28,33,71,-8,10,50,-7,33,1,-24,-27,-25,9,-9,22,5,-34,-123,71,23,0,-52,-1,-1,-5, 66,-33,-7,1,-18,-71,-42,79,19,78,-36,-50,46,-26,-23,-27,-71,-37,-97,14,-56,-35,-39,-60,-78,19,-41,-55,-114,-5,18,-61, 99,29,-80,76,-66,-100,23,127,27,69,19,-36,23,-15,-15,-59,-79,4,-84,15,-26,-62,-66,-59,-29,46,48,-48,-111,3,10,-93, 
  /* [18][0][][] */ 59,-6,-18,22,25,12,-6,39,7,42,-20,41,-54,9,94,23,2,-18,-13,-40,37,-127,5,-41,-6,73,7,19,-23,28,-8,25, 11,-21,-16,67,13,35,-36,37,-87,87,18,13,-31,-59,85,18,51,-22,46,-60,-5,-14,10,6,-106,100,-18,42,-7,-7,-58,39, 1,16,4,77,20,38,-64,-21,-23,116,4,41,-22,-34,96,-32,-6,-16,28,21,-7,-3,27,3,-57,105,-23,-8,-46,36,-20,10, 
  /* [19][0][][] */ 44,-4,-74,44,-13,-28,-61,-46,-26,77,-6,10,-23,-29,78,-46,-5,-15,32,-56,-18,-55,-27,27,-120,96,-9,-4,11,-32,-70,19, 82,7,-69,79,-18,3,-64,2,-31,53,-1,15,-13,-16,101,-7,-30,-2,38,-31,11,-75,-9,23,-127,77,-47,-57,-27,-14,-124,36, 52,5,-4,43,-11,-30,-33,5,37,84,-27,3,-23,0,53,-37,-10,-23,-22,-6,16,-91,6,5,-58,50,-51,-9,-17,10,-114,6, 
  /* [20][0][][] */ -5,-12,-27,53,20,25,-56,-16,-31,87,-16,16,-6,-72,38,-27,31,-1,13,13,21,-66,-32,17,-127,30,2,10,-65,8,-32,57, 4,32,38,58,-30,10,-38,-1,-9,55,-21,18,21,-34,47,-21,-9,4,14,30,9,-46,3,20,-101,54,-34,-3,-40,3,-16,60, 71,-12,-12,7,-23,-22,-30,70,-33,49,-29,10,-3,0,29,-25,-2,-2,8,-13,-13,-74,-14,-35,-94,26,-39,-35,-54,1,1,29, 
  /* [21][0][][] */ 21,-8,56,41,49,27,17,18,31,26,28,14,49,28,27,-25,28,13,28,37,10,-12,23,-40,-25,52,8,14,26,-11,-3,27, 66,-22,-11,38,-49,-68,16,96,0,2,-11,-67,4,55,0,-24,-34,-69,-19,51,-28,-21,-16,-34,12,39,4,-60,-85,-6,38,24, 81,-23,-70,-3,-115,-34,52,102,48,-127,9,-64,18,17,-89,6,-78,-16,16,23,-27,-2,-127,1,49,-1,12,-13,1,-40,51,-37, 
  /* [22][0][][] */ -24,-15,-24,-48,15,16,28,-7,14,-70,58,19,-53,24,-6,38,-2,3,-27,-19,8,57,28,21,-18,-46,54,12,127,-32,40,-34, -30,23,-3,-27,-3,38,12,-41,21,-84,-14,48,-55,-27,-28,40,-5,10,-2,49,-16,41,4,1,30,-70,-24,27,-10,12,10,-8, -31,13,18,-7,78,30,34,-42,46,-22,57,70,-7,0,-22,25,2,50,63,8,0,-5,59,29,-22,4,29,62,88,-12,-25,57, 
  /* [23][0][][] */ 17,40,65,71,-84,26,-5,-75,21,98,-46,-46,2,-63,54,-5,-12,-26,-6,53,-20,10,24,3,-44,127,-78,-11,28,-10,39,18, 86,-44,-53,55,-37,19,-26,83,0,119,-38,6,-8,-19,42,-44,-45,-55,29,42,-32,-67,16,-3,-62,43,-21,-39,-72,-28,-50,-27, 62,34,-76,-4,10,18,-32,53,-18,48,-3,-30,-28,-13,-27,7,-27,25,31,-22,-40,-28,35,-9,-25,-56,37,-39,44,18,-9,40, 
  /* [24][0][][] */ -116,-13,-32,-54,-71,9,-42,-127,27,-10,-23,2,-13,63,-51,-37,-8,-41,-27,97,-43,65,0,-25,-1,-38,-79,15,-39,20,48,34, -59,5,-52,-32,25,-67,45,-82,-63,-79,-1,-35,-42,-1,-59,-5,4,-9,-10,-30,-53,44,40,-48,-19,-69,-15,19,51,-27,8,-60, 8,44,26,1,15,-2,58,-33,20,-81,42,86,4,6,26,28,11,76,-2,-19,76,42,-10,53,-36,21,76,-6,22,35,27,-38, 
  /* [25][0][][] */ 11,34,-40,74,-38,15,-1,23,-56,90,1,46,22,-38,75,-15,29,26,22,-11,-2,-127,-50,11,-60,99,-57,-13,-67,0,-34,58, 45,19,-45,44,-41,-18,-50,68,-39,82,-29,15,-13,22,33,-53,-17,-28,7,-18,-11,-89,-6,29,-26,34,-7,-38,-27,-5,-30,58, 48,-26,-36,79,20,-26,-64,24,-40,81,-32,20,-33,-54,16,-77,-13,19,2,14,28,-30,3,-9,-35,42,-5,-49,-79,4,-42,-10, 
  /* [26][0][][] */ -27,-69,-89,-106,11,34,42,7,-101,-103,101,44,-86,-57,77,66,-5,-16,2,18,127,59,55,-3,3,-5,33,66,31,-2,-60,-38, 8,-38,-32,-36,-35,-5,7,-114,-8,-64,85,61,-23,-32,-7,-43,0,43,40,-59,37,18,-20,48,35,-52,-23,69,-87,0,-64,70, -26,28,68,30,13,28,-36,-101,-7,4,32,76,26,-72,43,-64,54,19,12,-43,-22,-36,-10,18,-63,9,-7,10,-1,48,-12,54, 
  /* [27][0][][] */ 22,-34,-53,-27,2,-49,-13,-10,-17,43,-51,-41,-45,-22,-33,-20,-13,-8,-59,27,-55,0,39,-20,-45,-32,-35,-14,-29,-54,-33,1, -2,-6,55,2,7,5,31,16,83,-12,61,12,77,9,34,19,15,42,10,72,72,31,-8,5,10,28,7,39,-9,-13,21,127, -19,-27,-5,-23,-40,-24,2,30,49,-44,-36,-19,81,31,-60,12,-56,-20,-15,55,-54,74,-73,15,12,6,-69,11,-1,-39,42,31, 
  /* [28][0][][] */ -30,-22,-33,-9,13,-45,-1,-18,0,-127,14,-28,-10,-26,-24,7,-13,-28,-9,40,-26,50,9,-39,-15,-100,-36,3,19,1,17,-17, -57,-19,-8,-57,-16,20,68,-59,44,-88,51,-1,5,3,0,-13,-9,62,4,-22,3,25,16,34,25,-89,39,23,33,3,18,-14, -46,-21,-52,2,-27,23,72,-68,-24,-94,15,19,49,10,-31,24,13,33,-7,27,50,34,3,11,4,-22,7,31,48,22,33,17, 
  /* [29][0][][] */ -78,12,-20,-107,75,-54,38,-120,1,-98,-8,-9,-2,45,-26,-1,24,19,-13,6,35,52,20,-6,37,-127,68,34,118,-18,25,-80, -51,-26,-12,-59,76,-16,40,-102,-16,-100,14,38,-74,-6,-4,-5,-73,33,-56,-67,6,57,49,22,53,-91,57,49,105,-18,28,-41, -63,-25,51,-40,13,61,28,-86,61,-48,41,96,-12,16,0,47,52,53,0,-5,28,-27,28,65,-5,32,52,-5,38,16,21,38, 
  /* [30][0][][] */ 21,8,-20,-74,-18,-62,2,71,-8,-35,63,44,-126,69,-15,-53,34,48,41,-68,11,-14,71,-41,74,61,-11,49,67,6,-21,16, -5,7,13,23,4,30,-55,-52,-41,-27,29,88,-80,-73,34,-96,38,28,26,-62,-10,-2,94,40,-10,59,52,6,-74,-4,-123,81, -13,6,-14,13,9,16,-46,45,14,17,-37,121,-73,-35,122,-86,7,4,58,0,1,-13,-11,32,-9,123,60,56,-89,33,-127,23, 
  /* [31][0][][] */ -19,-27,-13,-72,30,15,30,-23,-33,-81,63,36,-36,-18,-17,9,22,37,-8,26,24,64,81,-7,10,-90,66,25,76,-23,69,-60, -60,34,60,-45,10,15,18,-104,-56,-127,77,54,-87,-4,1,27,-9,24,-13,-61,-19,102,39,0,59,-47,36,33,0,9,59,44, -68,-7,70,-33,26,66,78,-37,11,-43,28,80,2,2,26,-8,27,61,51,-44,63,37,73,26,-8,90,18,15,-7,60,1,69, 
  /* [32][0][][] */ 43,-21,3,16,10,39,42,-6,-18,76,31,24,-54,19,-23,-51,44,66,-41,34,-39,42,-16,-13,-90,-25,-12,14,7,-54,-42,8, -96,-16,55,-42,0,-16,-2,-83,35,-6,54,48,29,-66,7,13,104,26,55,71,42,19,23,-12,-11,36,16,7,17,-54,-29,87, 64,-32,-43,-8,-105,-97,-40,127,18,-27,-63,-31,29,-5,-64,16,-80,-50,-102,-2,-25,-61,-19,-72,-50,0,-21,-47,-110,-25,-40,-56, 
  /* [33][0][][] */ -47,-22,7,-36,18,4,29,-32,31,-62,-1,-24,-7,0,-21,24,19,-33,18,-37,-4,52,12,-11,60,-60,0,23,-17,18,16,7, -60,-3,13,-4,-27,61,-17,-57,32,-58,30,68,21,14,3,-2,24,24,63,31,48,25,30,37,17,9,5,22,-7,4,-8,54, -91,0,24,-55,82,17,1,-127,-2,10,1,41,-40,11,-24,-8,35,27,37,13,-14,89,20,53,-18,-45,1,26,15,-28,3,4, 
  /* [34][0][][] */ -55,-16,-6,-81,10,26,6,36,10,-84,50,-65,-23,2,-15,35,-29,-53,-22,11,-69,50,44,26,-12,-44,25,-38,102,-19,52,-37, 29,29,-68,-11,20,-45,59,-24,-8,-100,45,37,-1,47,-71,5,-17,42,-23,13,26,84,42,36,-17,-57,42,46,25,31,0,-49, 12,16,-15,-59,60,-19,11,-58,9,-57,56,46,-83,20,-55,-11,8,25,65,-18,-3,-24,63,47,-4,-127,48,2,5,22,60,14, 
  /* [35][0][][] */ 74,-46,-32,29,-64,30,-24,2,-42,114,5,56,-13,-63,58,-6,19,11,23,-41,27,-15,23,13,-37,93,-3,-6,-36,-16,7,6, 0,4,2,38,0,33,-38,3,-40,127,-3,12,-24,-76,64,-24,-4,-31,4,21,-23,13,-5,9,-92,69,3,-16,-88,-38,-4,51, 87,47,18,93,-9,-25,-62,-6,-17,122,-9,-12,28,-37,53,-52,43,7,13,24,41,-39,-23,1,-124,110,5,4,-117,-7,-17,4, 
  /* [36][0][][] */ -62,3,-42,-38,51,-4,29,-25,-6,-127,48,30,-28,9,-64,-4,-4,8,-3,31,36,37,43,-40,-15,-105,37,30,61,-50,48,-28, -33,-33,-29,-25,68,20,69,-90,-2,-116,12,21,-78,8,-27,-14,-10,12,-20,-14,19,19,21,-27,16,-58,44,15,11,-41,15,25, -9,19,31,-29,-2,24,52,-58,50,-5,56,98,38,19,1,0,9,46,44,22,20,6,23,22,-45,41,23,21,4,22,1,44, 
  /* [37][0][][] */ 52,12,-44,17,-53,-50,2,27,42,70,-9,-20,29,-38,30,-51,-58,-43,-5,28,-41,-34,-40,-6,-82,69,1,-16,-89,31,-18,-20, 69,-16,-37,39,-81,-34,-12,63,31,83,-33,-73,2,-9,28,-84,-127,-41,-12,11,-46,-116,-52,-31,-98,3,-13,-69,-47,-23,-27,-23, 12,25,-57,60,-2,-26,-12,39,-28,59,-31,-42,3,-39,57,-108,-55,-59,1,-67,-11,-78,8,33,-77,-22,5,-43,10,35,-54,-37, 
  /* [38][0][][] */ 60,-5,-19,1,4,-59,41,5,-49,22,24,40,-64,-89,14,-5,34,19,-35,-86,-26,-81,53,-26,15,45,51,-20,42,21,15,-60, 2,-41,-24,25,30,-10,-12,-5,-56,47,-22,32,-69,-78,46,-18,-10,-3,21,-79,-9,-30,10,26,-67,70,29,-28,12,3,-35,-7, 32,8,-18,47,-16,-8,-43,-10,-30,98,14,54,-2,-65,79,-23,30,27,33,-6,-28,3,10,15,-87,127,-18,22,-43,16,-37,30, 
  /* [39][0][][] */ -14,25,-30,-30,26,2,47,-5,-90,-14,39,4,-116,-14,28,-22,27,86,-22,-78,13,11,87,-3,-22,13,60,19,103,-42,18,-61, 8,36,-49,34,23,10,-3,17,-97,29,9,101,-75,-77,59,-42,60,44,82,-93,-12,-11,46,-27,-58,37,34,36,-6,44,-105,1, 19,36,-38,99,42,58,-29,53,-41,85,9,127,-52,-57,96,-24,59,49,60,15,59,-42,-16,26,-61,29,-3,-19,-80,53,-90,62, 
  /* [40][0][][] */ 66,-76,-63,-127,-16,-44,60,62,38,-58,-35,13,3,53,-12,-15,-73,16,-50,5,-56,80,-80,-70,69,45,-1,-50,37,-49,22,10, 0,-60,8,-45,-38,6,40,44,98,20,63,6,-5,48,0,39,-10,13,17,2,34,79,28,-44,56,-90,48,-3,8,7,11,65, -72,-94,-13,-1,-30,-5,84,3,51,-96,7,-40,21,6,-16,-14,8,3,-2,33,6,98,-26,16,33,-53,-42,-25,32,14,38,58, 
  /* [41][0][][] */ 39,34,-18,39,7,-11,-40,-1,-27,30,18,40,-85,-48,66,-6,-3,-11,32,-39,4,-83,7,16,-26,92,21,25,-3,20,23,27, 16,-10,-5,32,-29,7,-37,1,-33,67,7,20,-61,-40,79,-13,9,22,40,-1,-2,-31,-12,21,-127,84,9,-14,0,0,-13,36, 16,-5,13,56,7,6,-18,12,24,84,-11,58,8,-44,67,-12,15,12,27,-24,8,-53,-11,12,-64,86,0,11,-85,19,-23,38, 
  /* [42][0][][] */ -52,1,-12,-74,31,-5,43,-36,43,-53,4,-24,-43,21,17,14,-13,53,-29,29,-25,20,80,10,72,-12,40,18,127,-40,31,-13, -50,32,11,-33,7,27,19,-85,-8,-83,-7,31,-57,17,22,63,-27,24,32,-14,5,56,32,-9,46,-53,5,15,12,-25,8,41, -54,40,31,-23,10,43,38,-52,29,-41,29,72,-3,16,-4,7,38,53,64,-11,-25,-25,56,13,28,-34,-4,-6,-22,36,27,31, 
  /* [43][0][][] */ 0,-22,27,62,-40,14,-19,9,-28,118,3,62,30,-60,75,-120,1,27,54,20,-26,-66,-12,53,-67,35,51,12,-15,43,-88,108, -23,7,60,60,-39,21,2,12,-6,122,-31,53,32,4,20,-42,3,-37,-21,45,-44,-25,14,38,-95,127,-59,-16,-57,-36,-36,33, 41,-10,-46,47,1,-9,-45,37,14,86,15,-40,36,-38,-67,-58,4,19,-12,-38,-59,-94,-71,-17,-16,112,20,-58,-120,-45,-33,-25, 
  /* [44][0][][] */ -80,5,-34,-86,6,-28,11,-27,-1,-42,35,17,-28,29,-27,9,46,18,-24,33,18,65,11,-6,23,-96,-34,-19,56,11,33,51, -79,-51,-73,16,-26,-9,3,-78,18,-108,28,33,49,26,-59,-1,-76,-32,-1,-15,-50,45,-67,-31,-2,-17,-37,-27,-34,-14,11,-54, -39,6,-33,-9,69,-34,54,-74,39,-72,50,-12,-42,38,-21,-25,60,36,-23,-24,64,68,5,-29,64,-10,47,17,127,-15,58,-33, 
  /* [45][0][][] */ -58,-12,4,-35,62,-31,66,-30,-121,-18,70,24,-78,-84,18,-13,0,9,-26,-75,59,20,34,15,23,21,50,1,-1,11,61,-35, -71,-5,-46,32,-28,-22,-6,-52,-127,8,26,45,-16,-70,33,9,13,7,2,-55,-2,19,56,6,2,-1,-9,17,5,36,-14,27, -71,13,-3,17,-42,7,-23,-49,-24,53,8,60,-9,-31,24,-14,-20,-10,-19,25,-8,1,32,37,42,10,10,7,-38,-12,-22,8, 
  /* [46][0][][] */ 26,49,40,112,-18,-51,-31,26,10,116,-37,-64,76,-60,42,-121,-58,-35,-76,-29,-99,-114,13,-16,-57,100,-40,-48,-76,-43,-50,-42, 88,8,-66,63,-127,-103,-44,73,21,79,13,-30,47,-1,5,-40,-92,-23,-46,28,2,8,-5,-49,-69,12,-32,-21,-89,23,-11,-18, 90,-34,-59,29,-58,-61,43,114,24,103,-46,-57,71,-17,15,-18,-41,-65,-46,-13,-58,-26,-28,-36,-25,8,-15,-33,-28,25,86,-55, 
  /* [47][0][][] */ -32,-30,-4,-55,51,3,43,-58,-98,-15,64,0,-118,24,57,27,44,-4,3,6,13,5,52,16,36,59,14,37,40,26,20,-26, -54,29,-5,5,70,27,-9,-68,-127,29,5,54,-60,-2,72,-5,23,4,25,-35,2,-4,61,23,-18,35,16,36,-15,-18,-6,19, -80,-9,15,53,-17,53,-67,-4,-39,66,-12,36,-37,-25,45,43,18,17,59,8,44,29,7,48,-4,91,-13,-14,-41,5,19,58, 
  /* [48][0][][] */ 6,17,-21,-101,24,3,38,-49,37,-127,33,-25,-38,5,-57,28,10,3,-57,21,13,126,6,-57,31,-2,-57,56,104,-24,57,-49, -55,-24,33,-94,26,36,14,-49,7,-25,-6,66,-68,65,-8,62,19,27,-8,-37,60,110,54,-6,25,-43,66,1,87,22,2,-40, -76,17,-54,-26,60,-26,8,-33,-2,-25,26,65,55,-6,-58,85,-1,64,26,15,33,112,35,-2,44,-7,-12,-35,36,-40,-7,41, 
  /* [49][0][][] */ 60,7,-22,38,-9,4,30,-44,-43,-44,-7,15,-113,-73,64,-3,17,3,8,13,6,-85,21,16,-58,79,83,71,98,-2,20,-4, 41,46,1,23,52,44,1,4,11,26,30,59,-27,-87,78,-11,49,19,77,-49,12,-41,-7,30,-108,127,-21,18,-48,-5,-35,-11, 35,60,-30,50,-3,-1,-50,11,-23,27,-31,9,-63,-23,102,-27,39,1,64,-70,-22,-69,-30,8,-32,72,-2,-41,-37,-28,-6,45, 
  /* [50][0][][] */ 39,23,82,45,-1,23,48,74,-11,-52,49,21,21,23,57,28,52,7,-12,43,19,4,66,-25,55,21,70,57,22,-19,82,90, 80,25,74,-28,-12,-5,72,-26,63,-51,86,2,-1,100,64,99,127,8,-12,-14,61,2,28,23,6,-16,71,5,38,-12,45,109, -11,-50,104,56,52,15,108,76,-8,37,73,88,-21,7,9,25,30,47,67,59,65,24,4,37,-5,85,74,1,1,-31,86,49, 
  /* [51][0][][] */ -40,-8,-8,-44,-6,28,24,-41,0,-64,27,24,-21,-31,-57,35,-27,23,-57,27,-31,77,32,-36,14,-57,3,-24,-4,-11,29,15, -87,9,-26,-75,62,-14,50,-81,8,-127,47,13,-61,36,-23,16,-13,55,-42,3,-15,68,30,7,64,-61,55,58,92,-31,30,21, -42,-5,49,12,-15,16,86,-59,38,-82,65,79,26,-27,15,60,6,17,31,2,3,40,28,14,-4,74,49,56,-2,9,26,15, 
  /* [52][0][][] */ -9,26,-8,12,10,-8,-4,10,18,66,6,-33,51,-85,35,-8,-46,7,-56,21,-34,-14,17,-38,-76,106,23,-45,-19,14,23,-7, 65,-20,-34,46,-54,-24,-15,79,37,41,-7,-43,11,0,34,4,-55,-16,-72,41,-10,-6,7,-48,-56,41,-35,-13,-91,-21,34,-54, 69,37,-110,50,-81,-87,21,127,54,-36,-35,-49,28,17,49,-51,-73,-10,-9,-2,-56,-90,-82,-22,-11,14,32,-35,-74,16,66,-34, 
  /* [53][0][][] */ -40,27,-50,-79,-5,11,-7,-93,12,-93,26,-15,34,-4,-25,87,11,-11,-59,37,-1,55,-8,-47,73,-81,-19,-7,37,-11,72,-56, -41,-19,-28,-76,11,-17,31,-110,-43,-91,29,-50,-2,28,-43,21,-22,-4,-14,-10,1,67,12,12,32,-62,-5,5,50,-30,78,-21, -8,-15,0,-57,41,38,96,-127,11,-71,42,65,-4,10,18,47,13,63,29,-47,89,-20,63,-8,44,16,44,43,21,48,-6,-37, 
  /* [54][0][][] */ 68,-2,-63,25,46,-65,13,52,-47,-32,7,58,-104,-81,-18,30,44,12,-47,-48,69,-67,32,-35,32,8,83,12,-7,-41,1,-68, -29,12,-65,-5,57,-5,-21,1,-69,-9,20,3,-75,-86,12,-62,18,34,21,-28,21,-45,18,-7,-6,43,43,12,13,25,-29,-17, 26,14,2,23,-3,14,-3,-1,-26,63,-20,49,-27,-86,76,-8,18,-27,41,-18,17,-12,33,11,-63,127,-24,4,-20,24,-26,50, 
  /* [55][0][][] */ 0,-50,54,-37,14,-11,-33,72,92,23,-27,34,13,83,-45,26,4,2,-55,29,-12,-39,-64,-76,9,18,25,-82,59,-9,2,-10, 59,-47,35,-15,-56,43,-11,74,81,-50,-31,36,127,62,40,26,12,44,38,73,32,-2,-9,35,44,15,14,34,-26,-37,70,104, 47,-80,-31,-75,-83,7,18,70,98,-36,-21,-15,5,-10,-57,54,-20,-17,-12,45,-76,58,-16,-67,55,31,-63,-35,29,-13,42,4, 
  /* [56][0][][] */ 89,17,-23,96,24,-38,14,31,-33,53,18,29,-97,-50,42,-1,16,8,-42,-64,55,-127,39,-11,-47,99,10,16,1,-16,35,-60, 16,11,-46,83,15,-5,-21,-5,-76,52,20,28,-84,-39,72,-14,2,39,-9,-58,16,-39,-12,12,-126,127,-21,-23,37,-22,-33,-43, 13,27,-14,65,-33,-29,-59,-7,-33,69,-8,41,-26,-72,109,11,26,25,17,-17,24,8,5,18,-92,117,3,-11,-59,22,-45,0, 
  /* [57][0][][] */ 33,51,-75,7,121,62,-1,39,-73,-65,39,11,-123,-49,71,52,25,44,-33,-39,2,-28,36,-28,-56,18,26,22,123,-14,21,14, 33,17,-38,54,43,37,-18,-66,-35,15,17,69,-80,-112,80,-14,26,20,25,-46,-34,-84,20,31,-70,93,28,-1,23,-49,-28,34, -9,-34,35,50,30,76,-4,21,23,69,24,125,4,-12,111,-11,38,11,64,-11,14,-57,-1,48,-83,127,-7,-25,-51,19,-32,94, 
  /* [58][0][][] */ 64,3,-8,76,5,19,-23,54,-67,94,-15,12,-34,-29,57,-14,2,-36,0,-77,-13,-80,8,13,-51,125,3,36,-9,1,29,-18, 95,39,-33,45,11,-31,-80,-1,-66,82,3,22,-34,-61,56,16,-1,-31,5,-79,7,-58,30,25,-119,127,24,-13,-31,27,-37,-6, 49,39,-24,63,18,23,-48,-4,-34,75,0,8,-32,-26,45,-27,25,-53,28,-76,19,-67,19,25,-103,83,23,-1,-75,22,-35,41, 
  /* [59][0][][] */ 64,-54,-10,60,20,6,-17,-51,-13,53,7,-29,9,-72,19,-56,33,22,-41,-51,-37,-45,3,-45,-76,82,-10,11,-36,-26,-94,31, 10,-33,72,26,-35,16,-23,-60,9,92,-15,6,52,-35,43,24,30,31,16,39,37,35,21,-33,-75,63,28,-8,-20,8,-37,36, 81,-43,-36,22,-61,-52,-74,55,27,56,6,-19,23,15,-27,-9,-60,-1,-37,8,-3,8,-52,-82,-46,70,-3,-30,-127,-16,-43,-47, 
  /* [60][0][][] */ -3,-22,-44,-85,50,12,13,-38,-22,-127,29,30,-34,-7,10,1,-6,15,-24,25,33,1,35,26,7,-83,21,1,86,-24,35,-49, -73,-13,-40,-62,59,12,51,-102,-13,-105,43,2,-56,-27,-34,0,-36,65,-9,9,4,25,50,-23,61,-45,10,49,31,-14,22,37, 10,45,45,-12,7,58,65,-63,7,-53,50,43,-7,-20,-7,28,12,76,4,26,-18,5,-16,17,4,34,32,68,49,42,26,21, 
  /* [61][0][][] */ -33,-38,-8,-82,-49,12,7,56,2,-49,-1,47,68,6,-19,-55,1,49,47,-1,28,-31,9,37,-23,-48,22,46,5,25,-2,9, 5,-66,-90,-40,-89,14,2,55,-24,-127,-41,-35,76,19,-58,-29,-27,5,0,68,-54,3,-79,-38,19,-89,-11,-70,-43,10,19,-56, -56,83,-18,-90,19,31,101,-54,-6,-72,65,-26,-62,3,-55,17,22,87,-38,-46,51,-10,17,35,94,-111,36,-20,50,-45,-9,-5, 
  /* [62][0][][] */ -62,-29,0,-79,79,-5,48,-52,37,-110,16,21,-49,-4,-32,22,18,46,-19,-22,28,41,39,9,24,-120,-4,57,127,-53,42,18, -54,-2,24,-49,27,-28,22,-86,-13,-65,13,-12,25,-14,-17,72,-43,-21,14,12,-3,60,1,25,38,-81,-17,7,59,-11,30,-15, -58,-7,24,-62,8,54,63,-104,85,-79,64,69,38,13,-6,-8,7,71,-2,7,1,64,37,39,13,9,41,63,51,31,54,8, 
  /* [63][0][][] */ 13,-27,1,-52,-50,63,-43,28,43,46,-55,35,-100,46,63,5,-10,-3,-22,89,42,16,41,41,17,33,26,19,-7,-2,-20,49, -75,-14,96,-77,47,97,49,-41,-15,40,-45,-37,-70,8,-111,-48,-31,2,-64,79,-51,-15,-88,16,30,-61,-43,63,-58,-17,-27,89, 8,27,-8,5,91,30,57,-50,118,-21,54,84,43,46,-100,-63,82,127,5,0,29,56,44,17,-63,-18,3,31,28,-33,32,35, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant9_scale = { 64, { 0.0042832000181078911, 0.0033531826920807362, 0.003655649721622467, 0.0032400812488049269, 0.0031791587825864553, 0.0036704596132040024, 0.0041621425189077854, 0.0027805822901427746, 0.0045967856422066689, 0.0032827903050929308, 0.0038059670478105545, 0.0032083024270832539, 0.0046085608191788197, 0.0043272026814520359, 0.003779654623940587, 0.0035750477109104395, 0.0031065063085407019, 0.0045223119668662548, 0.0040881270542740822, 0.0046332967467606068, 0.0054307333193719387, 0.004182994831353426, 0.0044720014557242393, 0.0038219387643039227, 0.0035418570041656494, 0.0039768172428011894, 0.0027308007702231407, 0.0042437203228473663, 0.0041080201044678688, 0.003117577638477087, 0.0028138251509517431, 0.0034960180055350065, 0.0037675534840673208, 0.0045059015974402428, 0.0032415431924164295, 0.0041557322256267071, 0.0044753891415894032, 0.0050975615158677101, 0.0045535438694059849, 0.0031158868223428726, 0.0036053578369319439, 0.0049153459258377552, 0.0044598272070288658, 0.003465777263045311, 0.0030954992398619652, 0.0041105682030320168, 0.0036903237923979759, 0.0037561173085123301, 0.0030269604176282883, 0.0034436418209224939, 0.0024499755818396807, 0.0041453046724200249, 0.0044770496897399426, 0.0039601749740540981, 0.0040377662517130375, 0.0029660740401595831, 0.0042106900364160538, 0.003188055008649826, 0.0044573470950126648, 0.0038171266205608845, 0.0038282363675534725, 0.0029139020480215549, 0.0039440137334167957, 0.0028063610661774874, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[32] = { 4571, -8267, 1746, -6634, -1874, -380, 4030, 6822, 4416, -1299, 4108, 3764, -3070, 3430, -236, -1606, 2363, 4173, -15658, 131, 599, -4341, 1006, -13913, 2858, -56, 1826, 249, 873, -16230, 539, 577, };
const TfArray<1, int> tensor_dimension10 = { 1, { 32 } };
const TfArray<32, float> quant10_scale = { 32, { 3.5583736462285742e-05, 1.6423082342953421e-05, 1.2744970263156574e-05, 1.8135444406652823e-05, 1.1502479537739418e-05, 9.5855066319927573e-06, 1.7663747712504119e-05, 3.6423905839910731e-05, 1.0749050488811918e-05, 1.5582520063617267e-05, 1.381864603899885e-05, 1.3813436453347094e-05, 1.579232957737986e-05, 9.2546843006857671e-06, 1.3024674444750417e-05, 1.0669969924492761e-05, 1.0908669537457172e-05, 1.5371124391094781e-05, 1.0370677046012133e-05, 1.1909345630556345e-05, 1.6310814316966571e-05, 1.2403334039845504e-05, 1.2071765013388358e-05, 1.322894331678981e-05, 1.4163524610921741e-05, 4.4702552258968353e-05, 1.8635724700288847e-05, 1.5325027561630122e-05, 1.4583810298063327e-05, 1.2523683835752308e-05, 1.2000493370578624e-05, 1.1824767170764972e-05, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[32*1*3*32] = { 
  /* [0][0][][] */ -100,-49,-62,-6,-127,-98,0,15,-74,7,8,-52,-15,1,22,13,26,-28,-45,-59,10,28,9,13,-34,9,-2,-3,1,-55,-39,-5, -109,-49,-94,14,-118,-100,-3,59,-106,-18,-20,-37,-64,-8,10,39,20,-72,-49,-124,-52,-9,-14,-27,-40,-14,19,2,2,-26,-72,-37, -109,-44,-99,-14,-115,-108,23,36,-111,-41,-65,1,-18,-38,5,25,24,-26,-19,-97,-30,11,-3,-2,5,11,5,6,9,-3,8,-25, 
  /* [1][0][][] */ -127,-79,36,40,-58,-56,3,-7,-29,-49,39,-16,19,26,-15,-15,-71,-18,4,21,76,-37,-56,24,-13,-37,14,-14,31,41,2,7, -26,33,21,-14,16,-37,7,-24,-22,4,37,9,-23,29,-26,-46,-48,-30,12,57,68,30,-49,-6,-45,-4,-35,10,3,55,21,22, -40,-28,89,-12,7,-41,18,4,-13,-8,42,4,-21,16,-21,8,-46,39,41,23,14,-6,-19,42,-31,17,3,35,52,60,-25,-27, 
  /* [2][0][][] */ 17,-71,-127,20,62,72,58,-41,-23,114,38,12,9,-87,-65,-53,-47,-61,-83,-57,-9,-27,4,43,-7,57,53,-10,6,-12,18,9, 63,15,37,0,-43,-39,-27,-3,48,115,39,-3,33,-22,-4,36,56,25,31,14,-10,12,-12,35,99,78,54,-4,6,49,6,-20, 48,0,-59,-64,-24,-10,-19,20,-13,11,-22,-14,0,-11,11,-75,-70,-43,-49,-28,-31,-39,35,74,38,-66,-88,-8,-86,-42,-13,-32, 
  /* [3][0][][] */ -98,0,101,19,50,12,0,23,-5,-50,-18,-26,-51,-101,22,5,-3,37,55,46,59,-13,-80,-29,37,-20,-14,38,11,29,34,7, -49,-41,127,27,56,-24,-1,12,-23,4,-3,-46,-105,-83,2,1,-25,36,51,20,18,-31,-65,12,55,-17,-22,11,-6,35,48,-30, -61,2,53,3,26,14,8,18,-17,-40,24,-57,-26,-64,15,-27,6,12,42,67,-10,-49,-50,-9,25,-6,10,9,-16,6,44,17, 
  /* [4][0][][] */ 127,-7,-94,76,-47,-46,-61,10,-45,43,13,-65,0,9,-54,-24,-4,-31,-108,-69,-1,-41,9,53,-38,6,16,8,72,62,-11,-11, -29,-81,-114,-18,-42,-106,-24,-50,10,117,49,-37,-29,74,47,-35,41,-74,16,49,-60,-27,-56,38,0,-71,34,-42,22,-21,-43,-57, -6,20,-50,-11,-50,-74,-38,-64,63,89,113,64,0,32,9,-38,2,84,32,36,-23,33,-17,98,85,116,84,66,-2,-1,4,6, 
  /* [5][0][][] */ -13,-15,-126,73,-29,-41,6,-83,24,62,-46,16,-4,17,-70,-26,-94,20,-96,6,4,-17,-1,-21,65,32,-1,16,-47,-48,-43,33, 56,-74,-55,23,-79,26,35,-71,-4,106,-16,-4,-69,50,15,-115,-76,25,-108,-77,-94,-40,45,109,69,54,9,-75,-18,-55,-43,92, -5,-37,-127,-45,-37,9,16,-38,79,97,52,-48,90,76,-3,-106,-39,67,-48,-5,-74,2,29,-51,63,71,19,2,14,-49,-28,91, 
  /* [6][0][][] */ 50,-75,-81,-108,-54,-32,-34,-16,10,-19,-43,-62,-27,-57,-27,-35,-51,-22,-60,7,-25,-33,59,12,34,-9,3,-8,-18,-21,-7,-24, 43,-42,-109,-58,-9,10,-17,-31,49,31,3,-12,-18,-8,-13,44,28,2,21,-5,-51,5,48,1,-21,40,-25,-36,-25,-4,18,-21, -79,-72,-94,-127,-59,-31,27,-21,42,96,27,-16,-40,-25,60,7,12,29,-16,12,4,-18,74,50,53,0,-23,29,-16,0,-5,20, 
  /* [7][0][][] */ 35,-25,-44,-77,-122,-104,-5,53,-37,-2,-36,-48,-69,-56,-88,17,22,-17,6,-30,-10,-41,-29,-16,-37,3,-27,13,-7,-53,-32,-36, -71,-40,-68,-80,-111,-98,42,49,-25,-37,-68,-84,-52,-102,-33,36,46,-3,-37,-83,-31,-109,-127,-116,-59,-71,-4,-33,-94,-40,-31,-23, -59,-28,-55,-43,-98,-74,-76,-51,-33,-23,-42,-43,-73,-73,-35,14,7,-29,0,-55,-87,-19,-52,-36,-43,-16,21,23,-9,-25,-34,-41, 
  /* [8][0][][] */ 93,20,-107,-108,24,80,31,-63,8,11,17,-36,-63,-50,-3,5,-76,-52,-73,-23,-70,-112,-3,-73,-14,-26,-62,-59,-72,46,-12,15, -67,-45,-59,-23,68,76,-5,-43,61,66,22,-14,-48,-5,3,-66,-58,-19,11,-27,15,-7,28,81,102,127,75,36,54,-39,-7,-20, -41,18,-50,-2,29,84,17,-38,64,2,-42,60,2,-62,-25,2,-113,-76,30,-53,-90,-69,-26,58,27,35,-62,-35,0,-90,-33,-44, 
  /* [9][0][][] */ -127,-23,43,-39,-23,-18,-18,23,14,-63,-23,-16,-87,-94,28,111,49,42,35,-42,-115,-26,-32,-16,74,53,60,-35,-50,-3,37,-42, -49,6,68,-14,11,-36,-20,38,-33,11,29,-54,-34,-27,58,47,47,47,23,-79,-93,-76,-61,32,59,36,34,4,-32,-2,-16,9, -33,33,26,0,-6,-59,4,20,-30,-73,-48,-28,-33,-47,91,94,43,-5,-35,-61,-66,2,-33,36,38,-8,28,24,-30,-22,33,-11, 
  /* [10][0][][] */ 43,-100,-112,-93,-27,32,-44,-76,63,12,3,-35,-64,-6,-43,17,31,-55,-28,-21,-80,-19,-29,12,-43,5,-58,31,-60,36,27,43, 39,-74,-78,-69,21,-34,36,-39,32,83,21,-25,5,-18,-9,28,57,-10,-39,-1,-61,-20,66,8,-10,33,44,-27,-27,3,60,-6, -61,-87,-70,-127,-61,-71,-4,-48,75,37,-45,-13,23,-35,-32,-15,50,55,-22,26,-23,0,63,70,62,14,2,-26,-18,35,-12,54, 
  /* [11][0][][] */ 19,-54,-76,120,2,-3,114,25,-15,56,-10,-66,52,-28,-9,-16,-30,-18,-57,-36,-5,6,-18,-4,50,26,28,-14,18,-72,-86,-22, -52,-108,-67,19,-77,-50,-16,-127,-5,-45,-78,56,-81,-45,-29,10,58,-61,7,110,62,-81,27,8,77,85,-43,20,39,21,-13,28, 10,-31,39,69,-55,-41,-66,-98,-71,-81,-19,33,28,-19,38,-58,67,2,4,84,47,-19,1,14,104,50,56,-27,-7,-4,-95,-2, 
  /* [12][0][][] */ -23,32,95,20,46,-2,7,4,33,36,46,18,-47,-2,44,63,66,43,-1,83,30,19,6,103,48,47,17,51,31,116,49,68, 1,-15,91,-81,52,-40,-52,-36,-2,-40,-41,-5,-63,-11,32,49,-36,1,38,23,0,2,18,31,13,86,8,-46,-3,-37,27,-44, 7,27,-6,-39,-15,22,-42,63,21,-127,-30,26,-24,-19,-29,-14,-58,-28,63,-33,-52,-4,-43,-58,-53,-83,-44,-33,-45,-41,17,-26, 
  /* [13][0][][] */ -29,11,72,84,19,-27,-116,26,-29,-74,-103,-59,-93,43,2,-45,-5,23,32,71,-60,2,66,51,-30,49,-77,-70,-127,-87,32,22, 36,-44,-96,-15,30,-60,-84,-53,60,-59,-34,26,-51,41,-58,18,-32,72,-37,-39,7,52,-71,-14,7,62,-46,-25,-83,-60,-109,-114, -66,-116,11,9,-34,-114,-75,-17,42,25,-64,15,-52,89,120,82,35,37,77,19,67,47,57,-11,-44,-39,-41,14,-28,-55,-77,-111, 
  /* [14][0][][] */ 20,-36,12,77,60,13,32,2,-24,31,-30,21,52,34,-109,-119,-11,-53,14,84,64,-42,9,-86,-76,-60,35,71,77,-36,-78,-39, -45,14,27,127,46,11,16,-17,-5,-43,-6,33,-9,83,-49,-44,-74,-60,9,76,70,77,-32,-91,-70,44,4,75,65,-63,-50,25, -17,-32,83,3,-1,-67,36,-18,-55,-17,29,-46,-19,31,-54,-34,-4,17,-10,21,105,67,15,-25,-82,26,40,43,21,-28,-51,27, 
  /* [15][0][][] */ 7,24,-18,-29,83,59,30,90,94,-6,-3,-49,31,7,-13,5,-30,-37,14,13,-43,-45,5,1,25,12,38,8,-44,-59,-60,-54, 28,36,-21,108,93,122,91,89,50,37,-48,-18,-17,82,19,18,54,55,-50,31,-72,-77,-40,26,-36,-9,-68,-50,-72,-7,-40,-3, 50,127,66,61,20,50,-23,83,39,14,-9,-33,6,-14,-4,-38,-19,37,0,-19,-45,-47,-2,-32,1,-29,43,-12,39,-31,-28,-12, 
  /* [16][0][][] */ 35,22,-31,52,-51,-34,7,-74,-12,33,-83,-11,84,92,-75,-37,27,-63,-106,-58,27,-76,-56,-40,51,-24,-15,-43,-24,41,-24,-48, 27,-90,-12,10,-44,-73,-91,-57,-126,-17,-9,-2,-20,-7,-62,-6,43,-42,-43,-10,-28,-6,-68,75,25,-37,-13,14,43,3,-26,61, -61,-34,-58,-22,-29,-127,-36,-69,-110,-85,-38,-17,27,-18,26,-82,85,-34,80,79,34,60,52,54,57,16,-43,37,-23,-52,-2,72, 
  /* [17][0][][] */ 5,-49,-92,84,75,41,-25,-10,17,33,-31,1,-28,-49,-49,-51,-5,-7,-31,-38,-38,19,-36,5,47,-50,-20,30,-31,-35,-39,42, -7,-103,-79,5,-44,8,-2,-58,1,10,20,60,-34,23,-21,-20,-1,4,-68,-55,-22,-16,4,35,58,60,22,4,26,-39,19,55, -69,-89,-127,-28,11,-5,46,27,59,43,-13,-16,-24,34,33,-16,65,-7,33,9,25,48,39,-10,34,1,26,40,-15,45,16,-10, 
  /* [18][0][][] */ -95,32,77,59,53,-53,-24,-36,37,-39,19,-11,123,110,-1,-68,-53,-63,-66,-29,13,90,-60,2,89,-43,22,55,88,-19,-67,-19, -38,0,77,36,34,1,32,-74,6,-89,-21,37,49,55,-30,-79,-8,-73,0,88,94,-8,-12,-26,14,38,44,-51,76,-41,-56,89, -51,-47,77,63,-70,-87,-91,-70,7,-127,-23,52,-26,68,-59,-13,-41,33,43,59,107,34,51,-6,52,-50,55,-36,-10,75,59,44, 
  /* [19][0][][] */ 18,52,-45,-31,26,68,59,-2,28,-44,22,71,-11,36,35,16,84,85,2,45,43,26,67,0,36,26,93,76,-47,-32,25,11, 18,34,-65,-40,-3,28,-54,-79,-91,43,-57,58,-9,-39,45,7,35,27,44,-84,-47,12,19,37,46,-38,25,-36,-54,-8,14,89, -19,-29,-127,-100,-52,-26,-89,-100,-115,-113,-17,26,-58,-99,-25,-79,-65,-67,-20,-29,-27,-3,-52,17,-19,13,-32,-44,-69,-65,-32,-12, 
  /* [20][0][][] */ -25,-28,-60,32,-31,-65,-10,-53,20,-26,18,-4,-17,-11,-12,-16,-29,-40,-21,-55,-52,5,-45,-42,14,-15,-47,19,-39,-19,-55,20, -52,-88,-48,31,-39,-92,37,-67,-38,22,-59,41,-37,-1,-9,-24,20,26,-20,76,18,11,31,-14,3,28,4,-10,29,15,-7,4, -59,-127,-72,-70,-86,-47,-44,-92,-60,20,-36,-12,11,-12,46,57,12,8,18,53,12,52,63,48,34,-10,-8,-46,-30,13,-12,22, 
  /* [21][0][][] */ 101,70,35,44,32,80,26,-53,54,50,17,-56,-56,-32,60,30,-50,-36,-43,-33,33,-29,17,-43,0,-38,26,-10,-49,12,-11,7, 105,104,68,127,76,53,-33,43,14,51,41,-23,22,-5,38,-4,-45,28,-67,-35,-35,20,-57,-28,-10,-47,-48,27,-68,-21,-23,14, 54,100,71,99,-19,-32,24,-44,37,63,17,-66,-39,1,35,-10,51,-43,-42,29,2,-41,-47,18,-56,-13,22,13,26,-18,-61,-28, 
  /* [22][0][][] */ -16,-72,-122,122,59,36,127,-18,-48,39,44,12,7,65,13,-44,-13,30,-88,-68,-66,-36,-85,-59,20,26,-30,9,4,-65,-29,28, -24,-53,2,105,102,-55,23,1,-10,65,-83,16,0,65,19,31,8,44,-90,-60,-80,-36,6,-17,-28,-17,-20,58,63,37,-37,69, 22,-46,-7,17,29,3,-31,-100,15,40,-62,59,3,26,94,1,34,17,20,46,27,44,-37,50,30,63,29,61,87,4,1,54, 
  /* [23][0][][] */ 18,-7,106,80,16,-59,15,-9,-13,18,-7,0,81,-31,-24,1,-41,-59,11,16,15,3,-28,0,44,37,19,24,-16,19,-3,5, 5,34,127,34,-19,-72,48,-29,-53,-15,-18,-6,12,-39,4,-22,-40,-14,31,57,57,34,-13,-41,14,20,-5,16,7,17,-30,35, 14,-27,77,62,9,-59,-11,-2,6,-82,20,25,0,14,29,-63,-4,-8,7,77,49,13,0,-8,-19,34,17,35,27,24,-40,30, 
  /* [24][0][][] */ -28,-25,-5,64,10,81,1,28,4,43,28,36,60,77,62,-9,-26,62,22,0,-51,-40,-71,-39,-49,-5,-20,-83,-58,-5,17,-7, 79,-23,26,104,119,127,44,11,42,17,38,23,-16,54,67,-33,-12,-25,-44,-49,28,-57,-52,-38,-7,-41,-41,-62,-37,5,-52,-4, 39,-26,35,52,89,29,21,-48,31,-30,28,-7,-30,50,61,29,5,26,-21,51,42,27,40,32,-43,-8,-70,7,-76,-55,-56,-55, 
  /* [25][0][][] */ 21,31,3,19,10,-6,-5,-13,-4,-28,-12,-4,13,37,11,10,-3,-15,-14,-34,-25,14,24,11,-4,7,16,-5,19,18,13,-4, -1,16,28,14,-13,-34,-6,-11,-13,-13,-17,6,11,13,24,30,-3,-28,-15,-42,-20,7,26,10,6,-4,-4,-15,11,17,12,-5, -127,17,-46,-8,-34,-77,8,-17,-14,-20,-32,-5,21,21,21,27,-6,-15,-35,-27,-30,2,15,18,-3,-21,-13,2,-11,-5,-13,-17, 
  /* [26][0][][] */ 16,19,-67,48,25,22,-29,-1,-16,6,-22,-43,-55,2,10,-24,-10,20,-41,-52,-36,28,-7,27,-35,-8,-33,-14,-26,-38,-23,-1, -16,-38,-127,6,-23,-10,-3,10,15,58,6,-4,-35,20,-47,11,-10,6,7,30,-32,-27,20,1,-15,41,43,7,-16,21,31,-24, -10,-68,-86,-2,-54,-39,-63,-47,-13,26,22,4,-25,39,12,25,-15,-9,-29,28,11,28,2,5,56,-5,14,18,21,5,-50,43, 
  /* [27][0][][] */ -52,-44,-59,26,25,73,-37,-14,17,58,-37,-47,-28,-56,-9,6,-49,34,-61,-57,-83,-23,-43,-1,34,0,0,-34,-22,-31,11,13, -7,-54,-127,56,-6,76,50,-51,3,23,-18,27,30,7,-31,-1,15,25,-66,-17,-71,-27,32,-4,-35,-34,42,47,-36,35,2,66, -45,-55,-82,20,-11,-15,30,-18,-37,75,-9,11,34,12,5,-47,-19,-9,21,-7,-33,-9,-12,17,28,6,30,-18,-15,0,-15,64, 
  /* [28][0][][] */ 20,7,-64,-28,-96,-62,22,5,-70,-3,-75,-93,-28,-20,-22,31,-22,37,9,-9,-24,5,43,12,-9,-51,-40,-74,0,-75,-8,-53, 100,3,-127,-56,-32,-73,62,-2,-42,20,-42,-95,-71,-65,-34,-4,-1,2,-34,17,29,1,-25,37,-6,-4,-20,-46,-13,-41,-51,9, -13,-30,-66,-45,-83,-35,54,68,34,13,-3,73,45,55,91,-4,86,-12,50,10,-1,53,41,75,71,10,8,25,-3,8,-6,-21, 
  /* [29][0][][] */ -11,6,127,64,66,-84,16,49,1,-30,47,-38,-9,-7,24,34,31,-17,-8,0,36,-11,14,13,-42,31,50,57,-20,51,-49,-32, -15,72,81,76,-11,-33,22,45,-13,-85,23,26,-11,9,43,-14,21,-28,78,44,82,32,-15,-11,22,-26,23,43,-25,-36,10,25, -4,20,71,2,-27,-87,-55,41,14,-46,-1,-36,-15,47,0,40,5,-10,52,60,25,4,29,24,-16,21,9,-1,26,51,37,-77, 
  /* [30][0][][] */ 9,-22,-2,11,43,127,79,-21,63,12,13,53,72,-22,47,-7,9,51,24,-61,-56,-52,-70,-61,-9,12,-5,-24,20,-17,31,6, -3,27,-54,-20,13,96,100,68,-17,-5,-4,25,41,-33,-51,-38,6,17,-70,-44,-43,-8,-20,-33,74,-1,0,-63,-16,-1,-33,29, 59,42,66,47,56,98,76,-33,95,-9,-31,-35,-43,-63,-14,-24,-86,-57,-48,-10,-85,-89,-1,-15,8,-3,-53,-9,8,-53,40,74, 
  /* [31][0][][] */ -2,6,-127,82,-6,-73,43,-83,-45,-35,-7,49,-11,-37,-97,-54,-29,-63,-68,32,2,14,-3,80,51,62,60,27,-12,-11,-28,33, 68,-60,-31,22,-29,-95,12,-50,21,-53,41,16,84,5,-45,-96,-83,-70,11,1,79,32,-16,72,90,42,-46,-77,-5,-33,43,36, -119,10,-76,46,-79,-15,-28,-7,-31,-48,-14,54,70,35,-58,-95,-17,-55,-11,-26,92,46,38,4,66,-8,-64,-86,-41,2,17,13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant11_scale = { 32, { 0.009181448258459568, 0.0042375447228550911, 0.0032885046675801277, 0.0046793748624622822, 0.002967912470921874, 0.002473287982866168, 0.004557665903121233, 0.0093982312828302383, 0.0027735098265111446, 0.0040206597186625004, 0.0035655384417623281, 0.0035641940776258707, 0.0040747956372797489, 0.0023879280779510736, 0.003360674949362874, 0.0027531052473932505, 0.0028146954718977213, 0.0039661144837737083, 0.0026758806779980659, 0.003072893712669611, 0.0042085768654942513, 0.0032003542874008417, 0.0031148015987128019, 0.0034133810549974442, 0.0036545251496136189, 0.011534318327903748, 0.0048084589652717113, 0.0039542205631732941, 0.0037629688158631325, 0.0032314073760062456, 0.0030964119359850883, 0.0030510702636092901, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,20,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0038756127469241619, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,20,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0096178464591503143, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,20,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0096178464591503143, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0096178464591503143, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0096178464591503143, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,10,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0096296779811382294, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,10,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0096296779811382294, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,5,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0096296779811382294, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,320 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0096296779811382294, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.12535890936851501, } };
const TfArray<1, int> quant21_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension0, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension13, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension15, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1280), (TfLiteIntArray*)&g0::tensor_dimension16, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension17, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 320), (TfLiteIntArray*)&g0::tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_766_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_766_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_766_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_766_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_766_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
