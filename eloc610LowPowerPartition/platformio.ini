; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
;
;
; !!!!!!!!!!!!!!!!!!!!!!!!!!   NOTE  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; This scheme uses sdkconfig.defaults to set defaults for all builds.
; Generated sdkconfig for tasks should not be committed to git.
;
; When adding/ changing options, make sure to add them to sdkconfig.defaults
; if possible, so that they are set for all builds. If not possible, add them
; to the build_flags of the specific build.

[platformio]
; Set default build
name = ELOC-3.0
description = ELOC-3.0 build
default_envs = esp32dev

[options]
; Parameters that CAN be reused in one or more environments
;platform = espressif32@~6.1.0
platform = espressif32 @ 6.9.0 ; https://github.com/platformio/platform-espressif32/releases
board = esp32dev
        ;esp-wrover-kit
framework =
    espidf
    arduino
monitor_filters = esp32_exception_decoder, log2file
board_build.partitions = elocPartitions.csv
extra_scripts =
    ; pre:tools/modify_edge-impulse-sdk.py
    pre:tools/genVersion.py
    pre:tools/genNVS.py
    post:tools/setUploadMonitorPort.py
build_flags =
;https://docs.platformio.org/en/latest/platforms/espressif32.html#build-flags
; More than this required to enable SPI RAM
;https://github.com/LIFsCode/ELOC-3.0/issues/16#issuecomment-1707275057
    -DBOARD_HAS_PSRAM
    -DCONFIG_SPIRAM_CACHE_WORKAROUND
    -Wl,-Map,firmware.map
selected_tests =
    ; Modify as necessary to select tests
	test_target_ElocConfig
unit_test_define =
    -D UNIT_TESTING
    -D BUILD_TIME_UNIX=$UNIX_TIME
# Tensorflow libraries break on some warnings
# Ideally this would be limited to lib/edge-impulse/edge-impulse-sdk
build_unflags = -Werror=all

[env]
; Parameters that WILL be reused in all [env:NAME]
upload_speed = 460800
monitor_speed = 115200
; Static code checking
check_tool = cppcheck
check_flags = --enable=all
board_upload.flash_size=16MB
lib_deps =
    ; Common libraries for all builds
    ; NB: Don't include files from /lib - strange build errors result!
    bblanchon/ArduinoJson@^6.21.2
    pvizeli/CmdParser@0.0.0-alpha+sha.dcaa7eada9
    evert-arias/EasyBuzzer @ 1.0.4
    jgromes/RadioLib@^7.1.0
debug_tool = esp-prog
debug_init_break = tbreak setup

[env:esp32dev]
; Build without Edge Impulse
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
monitor_filters = ${options.monitor_filters}
board_build.partitions = ${options.board_build.partitions}
extra_scripts = ${options.extra_scripts}
build_flags = ${options.build_flags}
build_unflags = ${options.build_unflags}

[env:esp32dev-ei]
; Build with Edge Impulse
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
monitor_filters = ${options.monitor_filters}
board_build.partitions = ${options.board_build.partitions}
extra_scripts = ${options.extra_scripts}
build_flags = ${options.build_flags}
    -DEDGE_IMPULSE_ENABLED
    # Force static allocation of classifier
    # https://docs.edgeimpulse.com/docs/run-inference/cpp-library/deploy-your-model-as-a-c-library#static-allocation
    -DEI_CLASSIFIER_ALLOCATION_STATIC=1
build_unflags = ${options.build_unflags}

; All unit tests for the ELOC board
[env:target_unit_selected_tests]
platform = ${options.platform}
board = ${options.board}
board_build.partitions = ${options.board_build.partitions}
framework = ${options.framework}
build_flags = ${options.unit_test_define}
build_unflags = ${options.build_unflags}
test_framework = unity
test_filter = ${options.selected_tests}
lib_deps = ${env.lib_deps}
extra_scripts =
    post:tools/setUploadMonitorPort.py


; All unit tests for the ELOC board
[env:target_unit_all_tests]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
build_flags = ${options.unit_test_define}
build_unflags = ${options.build_unflags}
test_framework = unity
test_filter =
    test_target_*
    test_*
test_ignore =
    test_generic_*
lib_deps = ${env.lib_deps}
   ;ArduinoFake has build errors with ESP-IDF
extra_scripts =
    post:tools/setUploadMonitorPort.py

; Unit tests for desktop
[env:generic_unit_tests]
platform = native
build_flags =
    ${options.unit_test_define}
    -D GENERIC_HW
test_framework = unity
test_filter =
    test_generic_*
    test_*
test_ignore =
    test_target_*
check_src_filters =
    lib/*
    src/*
    test/*