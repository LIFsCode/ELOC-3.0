import os
import subprocess

FILENAME_VERSION_H = 'src/version.h'

gitFound = False
try:
    build_hash = subprocess.run(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE).stdout.decode('utf-8')
    gitFound = True
except:
    print("git not found in path. Please add git to system path variable to be able to use git commit hash in version")
    build_hash = "UNKNOWN"

if gitFound:
    subprocess.run(['git', 'update-index', '-q', '--ignore-submodules', '--refresh'], stdout=subprocess.PIPE).stdout.decode('utf-8')
    # check for unstaged changes in working tree, option -uno checks only tracked files
    modifiedFiles = subprocess.run(['git', 'status', '--porcelain', '-uno'], stdout=subprocess.PIPE).stdout.decode('utf-8')

print("Build Hash: " + build_hash[:8])
print(modifiedFiles)

BUILD_CHECKEDIN = ""
if (len(modifiedFiles) != 0):
  BUILD_CHECKEDIN = "_MODIFIED"


hf = """

// AUTO GENERATED FILE, DO NOT EDIT THIS FILE
// this file is generated by the genVersion.py prebuild script

#ifndef BUILDINFO_H_
#define BUILDINFO_H_
#include "config.h"

#ifndef BUILD_HASH
  #define BUILD_HASH "{}"
#endif

#ifndef BUILD_CHECKEDIN
  #define BUILD_CHECKEDIN "{}"
#endif

#ifndef VERSIONTAG
#define VERSIONTAG VERSION "_" BUILD_HASH BUILD_CHECKEDIN " " __DATE__ " " __TIME__""
#endif

#endif /* BUILDINFO_H_ */
""".format(build_hash[:8], BUILD_CHECKEDIN)
with open(FILENAME_VERSION_H, 'w+') as f:
    f.write(hf)